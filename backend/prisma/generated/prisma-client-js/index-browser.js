
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.JobCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillMasterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  category: 'category',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicantScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  nida: 'nida',
  phone: 'phone',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  userId: 'userId',
  profileCompleted: 'profileCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmployerScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  industry: 'industry',
  companySize: 'companySize',
  website: 'website',
  address: 'address',
  phone: 'phone',
  description: 'description',
  userId: 'userId',
  isVerified: 'isVerified',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  location: 'location',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  currency: 'currency',
  employmentType: 'employmentType',
  experienceLevel: 'experienceLevel',
  status: 'status',
  applicationCount: 'applicationCount',
  viewCount: 'viewCount',
  employerId: 'employerId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobRequirementScalarFieldEnum = {
  id: 'id',
  jobId: 'jobId',
  skillMasterId: 'skillMasterId',
  importance: 'importance',
  proficiencyLevel: 'proficiencyLevel',
  yearsRequired: 'yearsRequired',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicantSkillScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  skillMasterId: 'skillMasterId',
  proficiency: 'proficiency',
  yearsExperience: 'yearsExperience',
  lastUsed: 'lastUsed',
  isCertified: 'isCertified',
  certificationName: 'certificationName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  status: 'status',
  jobId: 'jobId',
  applicantId: 'applicantId',
  coverLetter: 'coverLetter',
  appliedAt: 'appliedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  rejectionReason: 'rejectionReason',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  createdAt: 'createdAt',
  readAt: 'readAt',
  expiresAt: 'expiresAt',
  applicantId: 'applicantId',
  employerId: 'employerId',
  applicationId: 'applicationId'
};

exports.Prisma.AcademicQualificationScalarFieldEnum = {
  id: 'id',
  level: 'level',
  countryId: 'countryId',
  institution: 'institution',
  fieldOfStudy: 'fieldOfStudy',
  grade: 'grade',
  startDate: 'startDate',
  endDate: 'endDate',
  isCompleted: 'isCompleted',
  certificateUrl: 'certificateUrl',
  applicantId: 'applicantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkExperienceScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  jobTitle: 'jobTitle',
  industry: 'industry',
  location: 'location',
  employmentType: 'employmentType',
  startDate: 'startDate',
  endDate: 'endDate',
  isCurrent: 'isCurrent',
  responsibilities: 'responsibilities',
  achievements: 'achievements',
  supervisorName: 'supervisorName',
  supervisorContact: 'supervisorContact',
  applicantId: 'applicantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LanguageProficiencyScalarFieldEnum = {
  id: 'id',
  language: 'language',
  speakLevel: 'speakLevel',
  readLevel: 'readLevel',
  writeLevel: 'writeLevel',
  isCertified: 'isCertified',
  certificationName: 'certificationName',
  applicantId: 'applicantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComputerSkillScalarFieldEnum = {
  id: 'id',
  skill: 'skill',
  proficiency: 'proficiency',
  applicantId: 'applicantId',
  createdAt: 'createdAt'
};

exports.Prisma.GeneralSkillScalarFieldEnum = {
  id: 'id',
  skill: 'skill',
  description: 'description',
  proficiency: 'proficiency',
  applicantId: 'applicantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillDemandScalarFieldEnum = {
  id: 'id',
  skillMasterId: 'skillMasterId',
  demandScore: 'demandScore',
  growth: 'growth',
  industry: 'industry',
  region: 'region',
  period: 'period',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  agentId: 'agentId',
  topic: 'topic',
  status: 'status',
  createdAt: 'createdAt',
  endedAt: 'endedAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  roomId: 'roomId',
  senderId: 'senderId',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  readAt: 'readAt',
  timestamp: 'timestamp'
};

exports.Prisma.NotificationSettingsScalarFieldEnum = {
  id: 'id',
  applicantId: 'applicantId',
  emailEnabled: 'emailEnabled',
  emailJobMatches: 'emailJobMatches',
  emailApplicationStatus: 'emailApplicationStatus',
  emailInterviews: 'emailInterviews',
  emailMarketing: 'emailMarketing',
  smsEnabled: 'smsEnabled',
  smsApplicationStatus: 'smsApplicationStatus',
  smsInterviews: 'smsInterviews',
  smsUrgent: 'smsUrgent',
  pushEnabled: 'pushEnabled',
  pushJobMatches: 'pushJobMatches',
  pushApplicationStatus: 'pushApplicationStatus',
  pushInterviews: 'pushInterviews',
  profileVisible: 'profileVisible',
  autoApply: 'autoApply',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MarketTrendScalarFieldEnum = {
  id: 'id',
  industry: 'industry',
  metric: 'metric',
  value: 'value',
  period: 'period',
  date: 'date',
  source: 'source',
  createdAt: 'createdAt'
};

exports.Prisma.UserConsentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  consentType: 'consentType',
  granted: 'granted',
  grantedAt: 'grantedAt',
  revokedAt: 'revokedAt',
  purpose: 'purpose',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  timestamp: 'timestamp'
};

exports.Prisma.AnonymizedDataScalarFieldEnum = {
  id: 'id',
  anonymousId: 'anonymousId',
  originalUserId: 'originalUserId',
  anonymizedData: 'anonymizedData',
  createdAt: 'createdAt'
};

exports.Prisma.InterviewScalarFieldEnum = {
  id: 'id',
  applicationId: 'applicationId',
  jobId: 'jobId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  location: 'location',
  type: 'type',
  notes: 'notes',
  interviewers: 'interviewers',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailLogScalarFieldEnum = {
  id: 'id',
  to: 'to',
  subject: 'subject',
  message: 'message',
  applicationId: 'applicationId',
  employerId: 'employerId',
  applicantId: 'applicantId',
  status: 'status',
  sentAt: 'sentAt',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JobCategoryOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description'
};

exports.Prisma.SkillMasterOrderByRelevanceFieldEnum = {
  name: 'name',
  category: 'category',
  description: 'description'
};

exports.Prisma.CountryOrderByRelevanceFieldEnum = {
  name: 'name',
  code: 'code'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password'
};

exports.Prisma.ApplicantOrderByRelevanceFieldEnum = {
  fullName: 'fullName',
  nida: 'nida',
  phone: 'phone',
  address: 'address',
  gender: 'gender'
};

exports.Prisma.EmployerOrderByRelevanceFieldEnum = {
  companyName: 'companyName',
  industry: 'industry',
  companySize: 'companySize',
  website: 'website',
  address: 'address',
  phone: 'phone',
  description: 'description'
};

exports.Prisma.JobOrderByRelevanceFieldEnum = {
  title: 'title',
  description: 'description',
  location: 'location',
  currency: 'currency',
  employmentType: 'employmentType',
  experienceLevel: 'experienceLevel'
};

exports.Prisma.JobRequirementOrderByRelevanceFieldEnum = {
  description: 'description'
};

exports.Prisma.ApplicantSkillOrderByRelevanceFieldEnum = {
  certificationName: 'certificationName'
};

exports.Prisma.ApplicationOrderByRelevanceFieldEnum = {
  coverLetter: 'coverLetter',
  rejectionReason: 'rejectionReason',
  notes: 'notes'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message'
};

exports.Prisma.AcademicQualificationOrderByRelevanceFieldEnum = {
  level: 'level',
  institution: 'institution',
  fieldOfStudy: 'fieldOfStudy',
  grade: 'grade',
  certificateUrl: 'certificateUrl'
};

exports.Prisma.WorkExperienceOrderByRelevanceFieldEnum = {
  companyName: 'companyName',
  jobTitle: 'jobTitle',
  industry: 'industry',
  location: 'location',
  employmentType: 'employmentType',
  responsibilities: 'responsibilities',
  achievements: 'achievements',
  supervisorName: 'supervisorName',
  supervisorContact: 'supervisorContact'
};

exports.Prisma.LanguageProficiencyOrderByRelevanceFieldEnum = {
  language: 'language',
  speakLevel: 'speakLevel',
  readLevel: 'readLevel',
  writeLevel: 'writeLevel',
  certificationName: 'certificationName'
};

exports.Prisma.ComputerSkillOrderByRelevanceFieldEnum = {
  skill: 'skill',
  proficiency: 'proficiency'
};

exports.Prisma.GeneralSkillOrderByRelevanceFieldEnum = {
  skill: 'skill',
  description: 'description',
  proficiency: 'proficiency'
};

exports.Prisma.SkillDemandOrderByRelevanceFieldEnum = {
  industry: 'industry',
  region: 'region',
  source: 'source'
};

exports.Prisma.ChatRoomOrderByRelevanceFieldEnum = {
  topic: 'topic',
  status: 'status'
};

exports.Prisma.ChatMessageOrderByRelevanceFieldEnum = {
  message: 'message',
  type: 'type'
};

exports.Prisma.MarketTrendOrderByRelevanceFieldEnum = {
  industry: 'industry',
  metric: 'metric',
  period: 'period',
  source: 'source'
};

exports.Prisma.UserConsentOrderByRelevanceFieldEnum = {
  consentType: 'consentType',
  purpose: 'purpose'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  action: 'action',
  details: 'details'
};

exports.Prisma.AnonymizedDataOrderByRelevanceFieldEnum = {
  anonymousId: 'anonymousId',
  anonymizedData: 'anonymizedData'
};

exports.Prisma.InterviewOrderByRelevanceFieldEnum = {
  location: 'location',
  type: 'type',
  notes: 'notes',
  interviewers: 'interviewers',
  status: 'status'
};

exports.Prisma.EmailLogOrderByRelevanceFieldEnum = {
  to: 'to',
  subject: 'subject',
  message: 'message',
  status: 'status',
  error: 'error'
};
exports.Role = exports.$Enums.Role = {
  APPLICANT: 'APPLICANT',
  EMPLOYER: 'EMPLOYER',
  ADMIN: 'ADMIN'
};

exports.JobStatus = exports.$Enums.JobStatus = {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CLOSED: 'CLOSED',
  EXPIRED: 'EXPIRED'
};

exports.ImportanceLevel = exports.$Enums.ImportanceLevel = {
  REQUIRED: 'REQUIRED',
  PREFERRED: 'PREFERRED',
  NICE_TO_HAVE: 'NICE_TO_HAVE'
};

exports.ProficiencyLevel = exports.$Enums.ProficiencyLevel = {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  APPLIED: 'APPLIED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEWED: 'INTERVIEWED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  STATUS_CHANGE: 'STATUS_CHANGE',
  NEW_APPLICATION: 'NEW_APPLICATION',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  MESSAGE: 'MESSAGE',
  GENERAL: 'GENERAL'
};

exports.Prisma.ModelName = {
  JobCategory: 'JobCategory',
  SkillMaster: 'SkillMaster',
  Country: 'Country',
  User: 'User',
  Applicant: 'Applicant',
  Employer: 'Employer',
  Job: 'Job',
  JobRequirement: 'JobRequirement',
  ApplicantSkill: 'ApplicantSkill',
  Application: 'Application',
  Notification: 'Notification',
  AcademicQualification: 'AcademicQualification',
  WorkExperience: 'WorkExperience',
  LanguageProficiency: 'LanguageProficiency',
  ComputerSkill: 'ComputerSkill',
  GeneralSkill: 'GeneralSkill',
  SkillDemand: 'SkillDemand',
  ChatRoom: 'ChatRoom',
  ChatMessage: 'ChatMessage',
  NotificationSettings: 'NotificationSettings',
  MarketTrend: 'MarketTrend',
  UserConsent: 'UserConsent',
  AuditLog: 'AuditLog',
  AnonymizedData: 'AnonymizedData',
  Interview: 'Interview',
  EmailLog: 'EmailLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
