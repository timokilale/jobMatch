
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model JobCategory
 * 
 */
export type JobCategory = $Result.DefaultSelection<Prisma.$JobCategoryPayload>
/**
 * Model SkillMaster
 * 
 */
export type SkillMaster = $Result.DefaultSelection<Prisma.$SkillMasterPayload>
/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Applicant
 * 
 */
export type Applicant = $Result.DefaultSelection<Prisma.$ApplicantPayload>
/**
 * Model Employer
 * 
 */
export type Employer = $Result.DefaultSelection<Prisma.$EmployerPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model JobRequirement
 * 
 */
export type JobRequirement = $Result.DefaultSelection<Prisma.$JobRequirementPayload>
/**
 * Model ApplicantSkill
 * 
 */
export type ApplicantSkill = $Result.DefaultSelection<Prisma.$ApplicantSkillPayload>
/**
 * Model Application
 * 
 */
export type Application = $Result.DefaultSelection<Prisma.$ApplicationPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AcademicQualification
 * 
 */
export type AcademicQualification = $Result.DefaultSelection<Prisma.$AcademicQualificationPayload>
/**
 * Model WorkExperience
 * 
 */
export type WorkExperience = $Result.DefaultSelection<Prisma.$WorkExperiencePayload>
/**
 * Model LanguageProficiency
 * 
 */
export type LanguageProficiency = $Result.DefaultSelection<Prisma.$LanguageProficiencyPayload>
/**
 * Model ComputerSkill
 * 
 */
export type ComputerSkill = $Result.DefaultSelection<Prisma.$ComputerSkillPayload>
/**
 * Model GeneralSkill
 * 
 */
export type GeneralSkill = $Result.DefaultSelection<Prisma.$GeneralSkillPayload>
/**
 * Model SkillDemand
 * 
 */
export type SkillDemand = $Result.DefaultSelection<Prisma.$SkillDemandPayload>
/**
 * Model ChatRoom
 * 
 */
export type ChatRoom = $Result.DefaultSelection<Prisma.$ChatRoomPayload>
/**
 * Model ChatMessage
 * 
 */
export type ChatMessage = $Result.DefaultSelection<Prisma.$ChatMessagePayload>
/**
 * Model NotificationSettings
 * 
 */
export type NotificationSettings = $Result.DefaultSelection<Prisma.$NotificationSettingsPayload>
/**
 * Model MarketTrend
 * 
 */
export type MarketTrend = $Result.DefaultSelection<Prisma.$MarketTrendPayload>
/**
 * Model UserConsent
 * 
 */
export type UserConsent = $Result.DefaultSelection<Prisma.$UserConsentPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>
/**
 * Model AnonymizedData
 * 
 */
export type AnonymizedData = $Result.DefaultSelection<Prisma.$AnonymizedDataPayload>
/**
 * Model Interview
 * 
 */
export type Interview = $Result.DefaultSelection<Prisma.$InterviewPayload>
/**
 * Model EmailLog
 * 
 */
export type EmailLog = $Result.DefaultSelection<Prisma.$EmailLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  APPLICANT: 'APPLICANT',
  EMPLOYER: 'EMPLOYER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const NotificationType: {
  STATUS_CHANGE: 'STATUS_CHANGE',
  NEW_APPLICATION: 'NEW_APPLICATION',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  MESSAGE: 'MESSAGE',
  GENERAL: 'GENERAL'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const ApplicationStatus: {
  APPLIED: 'APPLIED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEWED: 'INTERVIEWED',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

export type ApplicationStatus = (typeof ApplicationStatus)[keyof typeof ApplicationStatus]


export const JobStatus: {
  DRAFT: 'DRAFT',
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CLOSED: 'CLOSED',
  EXPIRED: 'EXPIRED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const ImportanceLevel: {
  REQUIRED: 'REQUIRED',
  PREFERRED: 'PREFERRED',
  NICE_TO_HAVE: 'NICE_TO_HAVE'
};

export type ImportanceLevel = (typeof ImportanceLevel)[keyof typeof ImportanceLevel]


export const ProficiencyLevel: {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  ADVANCED: 'ADVANCED',
  EXPERT: 'EXPERT'
};

export type ProficiencyLevel = (typeof ProficiencyLevel)[keyof typeof ProficiencyLevel]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type ApplicationStatus = $Enums.ApplicationStatus

export const ApplicationStatus: typeof $Enums.ApplicationStatus

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type ImportanceLevel = $Enums.ImportanceLevel

export const ImportanceLevel: typeof $Enums.ImportanceLevel

export type ProficiencyLevel = $Enums.ProficiencyLevel

export const ProficiencyLevel: typeof $Enums.ProficiencyLevel

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more JobCategories
 * const jobCategories = await prisma.jobCategory.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more JobCategories
   * const jobCategories = await prisma.jobCategory.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.jobCategory`: Exposes CRUD operations for the **JobCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobCategories
    * const jobCategories = await prisma.jobCategory.findMany()
    * ```
    */
  get jobCategory(): Prisma.JobCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skillMaster`: Exposes CRUD operations for the **SkillMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillMasters
    * const skillMasters = await prisma.skillMaster.findMany()
    * ```
    */
  get skillMaster(): Prisma.SkillMasterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicant`: Exposes CRUD operations for the **Applicant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applicants
    * const applicants = await prisma.applicant.findMany()
    * ```
    */
  get applicant(): Prisma.ApplicantDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.employer`: Exposes CRUD operations for the **Employer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Employers
    * const employers = await prisma.employer.findMany()
    * ```
    */
  get employer(): Prisma.EmployerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.jobRequirement`: Exposes CRUD operations for the **JobRequirement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JobRequirements
    * const jobRequirements = await prisma.jobRequirement.findMany()
    * ```
    */
  get jobRequirement(): Prisma.JobRequirementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.applicantSkill`: Exposes CRUD operations for the **ApplicantSkill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApplicantSkills
    * const applicantSkills = await prisma.applicantSkill.findMany()
    * ```
    */
  get applicantSkill(): Prisma.ApplicantSkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.application`: Exposes CRUD operations for the **Application** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Applications
    * const applications = await prisma.application.findMany()
    * ```
    */
  get application(): Prisma.ApplicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.academicQualification`: Exposes CRUD operations for the **AcademicQualification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicQualifications
    * const academicQualifications = await prisma.academicQualification.findMany()
    * ```
    */
  get academicQualification(): Prisma.AcademicQualificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.workExperience`: Exposes CRUD operations for the **WorkExperience** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkExperiences
    * const workExperiences = await prisma.workExperience.findMany()
    * ```
    */
  get workExperience(): Prisma.WorkExperienceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.languageProficiency`: Exposes CRUD operations for the **LanguageProficiency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LanguageProficiencies
    * const languageProficiencies = await prisma.languageProficiency.findMany()
    * ```
    */
  get languageProficiency(): Prisma.LanguageProficiencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.computerSkill`: Exposes CRUD operations for the **ComputerSkill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComputerSkills
    * const computerSkills = await prisma.computerSkill.findMany()
    * ```
    */
  get computerSkill(): Prisma.ComputerSkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.generalSkill`: Exposes CRUD operations for the **GeneralSkill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GeneralSkills
    * const generalSkills = await prisma.generalSkill.findMany()
    * ```
    */
  get generalSkill(): Prisma.GeneralSkillDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.skillDemand`: Exposes CRUD operations for the **SkillDemand** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SkillDemands
    * const skillDemands = await prisma.skillDemand.findMany()
    * ```
    */
  get skillDemand(): Prisma.SkillDemandDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **ChatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): Prisma.ChatRoomDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatMessage`: Exposes CRUD operations for the **ChatMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatMessages
    * const chatMessages = await prisma.chatMessage.findMany()
    * ```
    */
  get chatMessage(): Prisma.ChatMessageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notificationSettings`: Exposes CRUD operations for the **NotificationSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationSettings
    * const notificationSettings = await prisma.notificationSettings.findMany()
    * ```
    */
  get notificationSettings(): Prisma.NotificationSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketTrend`: Exposes CRUD operations for the **MarketTrend** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketTrends
    * const marketTrends = await prisma.marketTrend.findMany()
    * ```
    */
  get marketTrend(): Prisma.MarketTrendDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userConsent`: Exposes CRUD operations for the **UserConsent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserConsents
    * const userConsents = await prisma.userConsent.findMany()
    * ```
    */
  get userConsent(): Prisma.UserConsentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.anonymizedData`: Exposes CRUD operations for the **AnonymizedData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnonymizedData
    * const anonymizedData = await prisma.anonymizedData.findMany()
    * ```
    */
  get anonymizedData(): Prisma.AnonymizedDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interview`: Exposes CRUD operations for the **Interview** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Interviews
    * const interviews = await prisma.interview.findMany()
    * ```
    */
  get interview(): Prisma.InterviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.emailLog`: Exposes CRUD operations for the **EmailLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailLogs
    * const emailLogs = await prisma.emailLog.findMany()
    * ```
    */
  get emailLog(): Prisma.EmailLogDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    JobCategory: 'JobCategory',
    SkillMaster: 'SkillMaster',
    Country: 'Country',
    User: 'User',
    Applicant: 'Applicant',
    Employer: 'Employer',
    Job: 'Job',
    JobRequirement: 'JobRequirement',
    ApplicantSkill: 'ApplicantSkill',
    Application: 'Application',
    Notification: 'Notification',
    AcademicQualification: 'AcademicQualification',
    WorkExperience: 'WorkExperience',
    LanguageProficiency: 'LanguageProficiency',
    ComputerSkill: 'ComputerSkill',
    GeneralSkill: 'GeneralSkill',
    SkillDemand: 'SkillDemand',
    ChatRoom: 'ChatRoom',
    ChatMessage: 'ChatMessage',
    NotificationSettings: 'NotificationSettings',
    MarketTrend: 'MarketTrend',
    UserConsent: 'UserConsent',
    AuditLog: 'AuditLog',
    AnonymizedData: 'AnonymizedData',
    Interview: 'Interview',
    EmailLog: 'EmailLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "jobCategory" | "skillMaster" | "country" | "user" | "applicant" | "employer" | "job" | "jobRequirement" | "applicantSkill" | "application" | "notification" | "academicQualification" | "workExperience" | "languageProficiency" | "computerSkill" | "generalSkill" | "skillDemand" | "chatRoom" | "chatMessage" | "notificationSettings" | "marketTrend" | "userConsent" | "auditLog" | "anonymizedData" | "interview" | "emailLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      JobCategory: {
        payload: Prisma.$JobCategoryPayload<ExtArgs>
        fields: Prisma.JobCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          findFirst: {
            args: Prisma.JobCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          findMany: {
            args: Prisma.JobCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>[]
          }
          create: {
            args: Prisma.JobCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          createMany: {
            args: Prisma.JobCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JobCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          update: {
            args: Prisma.JobCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          deleteMany: {
            args: Prisma.JobCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobCategoryPayload>
          }
          aggregate: {
            args: Prisma.JobCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobCategory>
          }
          groupBy: {
            args: Prisma.JobCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<JobCategoryCountAggregateOutputType> | number
          }
        }
      }
      SkillMaster: {
        payload: Prisma.$SkillMasterPayload<ExtArgs>
        fields: Prisma.SkillMasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillMasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillMasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload>
          }
          findFirst: {
            args: Prisma.SkillMasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillMasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload>
          }
          findMany: {
            args: Prisma.SkillMasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload>[]
          }
          create: {
            args: Prisma.SkillMasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload>
          }
          createMany: {
            args: Prisma.SkillMasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SkillMasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload>
          }
          update: {
            args: Prisma.SkillMasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload>
          }
          deleteMany: {
            args: Prisma.SkillMasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillMasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillMasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillMasterPayload>
          }
          aggregate: {
            args: Prisma.SkillMasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillMaster>
          }
          groupBy: {
            args: Prisma.SkillMasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillMasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillMasterCountArgs<ExtArgs>
            result: $Utils.Optional<SkillMasterCountAggregateOutputType> | number
          }
        }
      }
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Applicant: {
        payload: Prisma.$ApplicantPayload<ExtArgs>
        fields: Prisma.ApplicantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          findFirst: {
            args: Prisma.ApplicantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          findMany: {
            args: Prisma.ApplicantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>[]
          }
          create: {
            args: Prisma.ApplicantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          createMany: {
            args: Prisma.ApplicantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ApplicantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          update: {
            args: Prisma.ApplicantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          deleteMany: {
            args: Prisma.ApplicantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApplicantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantPayload>
          }
          aggregate: {
            args: Prisma.ApplicantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicant>
          }
          groupBy: {
            args: Prisma.ApplicantGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicantGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicantCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicantCountAggregateOutputType> | number
          }
        }
      }
      Employer: {
        payload: Prisma.$EmployerPayload<ExtArgs>
        fields: Prisma.EmployerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmployerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmployerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          findFirst: {
            args: Prisma.EmployerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmployerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          findMany: {
            args: Prisma.EmployerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>[]
          }
          create: {
            args: Prisma.EmployerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          createMany: {
            args: Prisma.EmployerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmployerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          update: {
            args: Prisma.EmployerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          deleteMany: {
            args: Prisma.EmployerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmployerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmployerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmployerPayload>
          }
          aggregate: {
            args: Prisma.EmployerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmployer>
          }
          groupBy: {
            args: Prisma.EmployerGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmployerGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmployerCountArgs<ExtArgs>
            result: $Utils.Optional<EmployerCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      JobRequirement: {
        payload: Prisma.$JobRequirementPayload<ExtArgs>
        fields: Prisma.JobRequirementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobRequirementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobRequirementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload>
          }
          findFirst: {
            args: Prisma.JobRequirementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobRequirementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload>
          }
          findMany: {
            args: Prisma.JobRequirementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload>[]
          }
          create: {
            args: Prisma.JobRequirementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload>
          }
          createMany: {
            args: Prisma.JobRequirementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.JobRequirementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload>
          }
          update: {
            args: Prisma.JobRequirementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload>
          }
          deleteMany: {
            args: Prisma.JobRequirementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobRequirementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobRequirementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobRequirementPayload>
          }
          aggregate: {
            args: Prisma.JobRequirementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJobRequirement>
          }
          groupBy: {
            args: Prisma.JobRequirementGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobRequirementGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobRequirementCountArgs<ExtArgs>
            result: $Utils.Optional<JobRequirementCountAggregateOutputType> | number
          }
        }
      }
      ApplicantSkill: {
        payload: Prisma.$ApplicantSkillPayload<ExtArgs>
        fields: Prisma.ApplicantSkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicantSkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicantSkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload>
          }
          findFirst: {
            args: Prisma.ApplicantSkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicantSkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload>
          }
          findMany: {
            args: Prisma.ApplicantSkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload>[]
          }
          create: {
            args: Prisma.ApplicantSkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload>
          }
          createMany: {
            args: Prisma.ApplicantSkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ApplicantSkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload>
          }
          update: {
            args: Prisma.ApplicantSkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload>
          }
          deleteMany: {
            args: Prisma.ApplicantSkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicantSkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApplicantSkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicantSkillPayload>
          }
          aggregate: {
            args: Prisma.ApplicantSkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplicantSkill>
          }
          groupBy: {
            args: Prisma.ApplicantSkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicantSkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicantSkillCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicantSkillCountAggregateOutputType> | number
          }
        }
      }
      Application: {
        payload: Prisma.$ApplicationPayload<ExtArgs>
        fields: Prisma.ApplicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApplicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApplicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findFirst: {
            args: Prisma.ApplicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApplicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          findMany: {
            args: Prisma.ApplicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>[]
          }
          create: {
            args: Prisma.ApplicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          createMany: {
            args: Prisma.ApplicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ApplicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          update: {
            args: Prisma.ApplicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          deleteMany: {
            args: Prisma.ApplicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApplicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApplicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApplicationPayload>
          }
          aggregate: {
            args: Prisma.ApplicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApplication>
          }
          groupBy: {
            args: Prisma.ApplicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApplicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApplicationCountArgs<ExtArgs>
            result: $Utils.Optional<ApplicationCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AcademicQualification: {
        payload: Prisma.$AcademicQualificationPayload<ExtArgs>
        fields: Prisma.AcademicQualificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicQualificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicQualificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload>
          }
          findFirst: {
            args: Prisma.AcademicQualificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicQualificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload>
          }
          findMany: {
            args: Prisma.AcademicQualificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload>[]
          }
          create: {
            args: Prisma.AcademicQualificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload>
          }
          createMany: {
            args: Prisma.AcademicQualificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AcademicQualificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload>
          }
          update: {
            args: Prisma.AcademicQualificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload>
          }
          deleteMany: {
            args: Prisma.AcademicQualificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicQualificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AcademicQualificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicQualificationPayload>
          }
          aggregate: {
            args: Prisma.AcademicQualificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcademicQualification>
          }
          groupBy: {
            args: Prisma.AcademicQualificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcademicQualificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicQualificationCountArgs<ExtArgs>
            result: $Utils.Optional<AcademicQualificationCountAggregateOutputType> | number
          }
        }
      }
      WorkExperience: {
        payload: Prisma.$WorkExperiencePayload<ExtArgs>
        fields: Prisma.WorkExperienceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkExperienceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkExperienceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          findFirst: {
            args: Prisma.WorkExperienceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkExperienceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          findMany: {
            args: Prisma.WorkExperienceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>[]
          }
          create: {
            args: Prisma.WorkExperienceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          createMany: {
            args: Prisma.WorkExperienceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WorkExperienceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          update: {
            args: Prisma.WorkExperienceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          deleteMany: {
            args: Prisma.WorkExperienceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkExperienceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkExperienceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkExperiencePayload>
          }
          aggregate: {
            args: Prisma.WorkExperienceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkExperience>
          }
          groupBy: {
            args: Prisma.WorkExperienceGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkExperienceGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkExperienceCountArgs<ExtArgs>
            result: $Utils.Optional<WorkExperienceCountAggregateOutputType> | number
          }
        }
      }
      LanguageProficiency: {
        payload: Prisma.$LanguageProficiencyPayload<ExtArgs>
        fields: Prisma.LanguageProficiencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LanguageProficiencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LanguageProficiencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload>
          }
          findFirst: {
            args: Prisma.LanguageProficiencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LanguageProficiencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload>
          }
          findMany: {
            args: Prisma.LanguageProficiencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload>[]
          }
          create: {
            args: Prisma.LanguageProficiencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload>
          }
          createMany: {
            args: Prisma.LanguageProficiencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.LanguageProficiencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload>
          }
          update: {
            args: Prisma.LanguageProficiencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload>
          }
          deleteMany: {
            args: Prisma.LanguageProficiencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LanguageProficiencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LanguageProficiencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LanguageProficiencyPayload>
          }
          aggregate: {
            args: Prisma.LanguageProficiencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguageProficiency>
          }
          groupBy: {
            args: Prisma.LanguageProficiencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageProficiencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.LanguageProficiencyCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageProficiencyCountAggregateOutputType> | number
          }
        }
      }
      ComputerSkill: {
        payload: Prisma.$ComputerSkillPayload<ExtArgs>
        fields: Prisma.ComputerSkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComputerSkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComputerSkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload>
          }
          findFirst: {
            args: Prisma.ComputerSkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComputerSkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload>
          }
          findMany: {
            args: Prisma.ComputerSkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload>[]
          }
          create: {
            args: Prisma.ComputerSkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload>
          }
          createMany: {
            args: Prisma.ComputerSkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComputerSkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload>
          }
          update: {
            args: Prisma.ComputerSkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload>
          }
          deleteMany: {
            args: Prisma.ComputerSkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComputerSkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComputerSkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComputerSkillPayload>
          }
          aggregate: {
            args: Prisma.ComputerSkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComputerSkill>
          }
          groupBy: {
            args: Prisma.ComputerSkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComputerSkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.ComputerSkillCountArgs<ExtArgs>
            result: $Utils.Optional<ComputerSkillCountAggregateOutputType> | number
          }
        }
      }
      GeneralSkill: {
        payload: Prisma.$GeneralSkillPayload<ExtArgs>
        fields: Prisma.GeneralSkillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneralSkillFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneralSkillFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload>
          }
          findFirst: {
            args: Prisma.GeneralSkillFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneralSkillFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload>
          }
          findMany: {
            args: Prisma.GeneralSkillFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload>[]
          }
          create: {
            args: Prisma.GeneralSkillCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload>
          }
          createMany: {
            args: Prisma.GeneralSkillCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GeneralSkillDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload>
          }
          update: {
            args: Prisma.GeneralSkillUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload>
          }
          deleteMany: {
            args: Prisma.GeneralSkillDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneralSkillUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GeneralSkillUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneralSkillPayload>
          }
          aggregate: {
            args: Prisma.GeneralSkillAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGeneralSkill>
          }
          groupBy: {
            args: Prisma.GeneralSkillGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneralSkillGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneralSkillCountArgs<ExtArgs>
            result: $Utils.Optional<GeneralSkillCountAggregateOutputType> | number
          }
        }
      }
      SkillDemand: {
        payload: Prisma.$SkillDemandPayload<ExtArgs>
        fields: Prisma.SkillDemandFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SkillDemandFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SkillDemandFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload>
          }
          findFirst: {
            args: Prisma.SkillDemandFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SkillDemandFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload>
          }
          findMany: {
            args: Prisma.SkillDemandFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload>[]
          }
          create: {
            args: Prisma.SkillDemandCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload>
          }
          createMany: {
            args: Prisma.SkillDemandCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SkillDemandDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload>
          }
          update: {
            args: Prisma.SkillDemandUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload>
          }
          deleteMany: {
            args: Prisma.SkillDemandDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SkillDemandUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SkillDemandUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SkillDemandPayload>
          }
          aggregate: {
            args: Prisma.SkillDemandAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSkillDemand>
          }
          groupBy: {
            args: Prisma.SkillDemandGroupByArgs<ExtArgs>
            result: $Utils.Optional<SkillDemandGroupByOutputType>[]
          }
          count: {
            args: Prisma.SkillDemandCountArgs<ExtArgs>
            result: $Utils.Optional<SkillDemandCountAggregateOutputType> | number
          }
        }
      }
      ChatRoom: {
        payload: Prisma.$ChatRoomPayload<ExtArgs>
        fields: Prisma.ChatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findFirst: {
            args: Prisma.ChatRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          findMany: {
            args: Prisma.ChatRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>[]
          }
          create: {
            args: Prisma.ChatRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          createMany: {
            args: Prisma.ChatRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChatRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          update: {
            args: Prisma.ChatRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          deleteMany: {
            args: Prisma.ChatRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatRoomPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoom>
          }
          groupBy: {
            args: Prisma.ChatRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatRoomCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomCountAggregateOutputType> | number
          }
        }
      }
      ChatMessage: {
        payload: Prisma.$ChatMessagePayload<ExtArgs>
        fields: Prisma.ChatMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findFirst: {
            args: Prisma.ChatMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          findMany: {
            args: Prisma.ChatMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>[]
          }
          create: {
            args: Prisma.ChatMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          createMany: {
            args: Prisma.ChatMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ChatMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          update: {
            args: Prisma.ChatMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          deleteMany: {
            args: Prisma.ChatMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ChatMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatMessagePayload>
          }
          aggregate: {
            args: Prisma.ChatMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatMessage>
          }
          groupBy: {
            args: Prisma.ChatMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ChatMessageCountAggregateOutputType> | number
          }
        }
      }
      NotificationSettings: {
        payload: Prisma.$NotificationSettingsPayload<ExtArgs>
        fields: Prisma.NotificationSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findFirst: {
            args: Prisma.NotificationSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          findMany: {
            args: Prisma.NotificationSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>[]
          }
          create: {
            args: Prisma.NotificationSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          createMany: {
            args: Prisma.NotificationSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NotificationSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          update: {
            args: Prisma.NotificationSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          deleteMany: {
            args: Prisma.NotificationSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationSettingsPayload>
          }
          aggregate: {
            args: Prisma.NotificationSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotificationSettings>
          }
          groupBy: {
            args: Prisma.NotificationSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationSettingsCountAggregateOutputType> | number
          }
        }
      }
      MarketTrend: {
        payload: Prisma.$MarketTrendPayload<ExtArgs>
        fields: Prisma.MarketTrendFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketTrendFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketTrendFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload>
          }
          findFirst: {
            args: Prisma.MarketTrendFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketTrendFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload>
          }
          findMany: {
            args: Prisma.MarketTrendFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload>[]
          }
          create: {
            args: Prisma.MarketTrendCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload>
          }
          createMany: {
            args: Prisma.MarketTrendCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MarketTrendDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload>
          }
          update: {
            args: Prisma.MarketTrendUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload>
          }
          deleteMany: {
            args: Prisma.MarketTrendDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketTrendUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MarketTrendUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketTrendPayload>
          }
          aggregate: {
            args: Prisma.MarketTrendAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketTrend>
          }
          groupBy: {
            args: Prisma.MarketTrendGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketTrendGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketTrendCountArgs<ExtArgs>
            result: $Utils.Optional<MarketTrendCountAggregateOutputType> | number
          }
        }
      }
      UserConsent: {
        payload: Prisma.$UserConsentPayload<ExtArgs>
        fields: Prisma.UserConsentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserConsentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserConsentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          findFirst: {
            args: Prisma.UserConsentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserConsentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          findMany: {
            args: Prisma.UserConsentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>[]
          }
          create: {
            args: Prisma.UserConsentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          createMany: {
            args: Prisma.UserConsentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserConsentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          update: {
            args: Prisma.UserConsentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          deleteMany: {
            args: Prisma.UserConsentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserConsentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserConsentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserConsentPayload>
          }
          aggregate: {
            args: Prisma.UserConsentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserConsent>
          }
          groupBy: {
            args: Prisma.UserConsentGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserConsentGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserConsentCountArgs<ExtArgs>
            result: $Utils.Optional<UserConsentCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
      AnonymizedData: {
        payload: Prisma.$AnonymizedDataPayload<ExtArgs>
        fields: Prisma.AnonymizedDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnonymizedDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnonymizedDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload>
          }
          findFirst: {
            args: Prisma.AnonymizedDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnonymizedDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload>
          }
          findMany: {
            args: Prisma.AnonymizedDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload>[]
          }
          create: {
            args: Prisma.AnonymizedDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload>
          }
          createMany: {
            args: Prisma.AnonymizedDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AnonymizedDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload>
          }
          update: {
            args: Prisma.AnonymizedDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload>
          }
          deleteMany: {
            args: Prisma.AnonymizedDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnonymizedDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnonymizedDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnonymizedDataPayload>
          }
          aggregate: {
            args: Prisma.AnonymizedDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnonymizedData>
          }
          groupBy: {
            args: Prisma.AnonymizedDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnonymizedDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnonymizedDataCountArgs<ExtArgs>
            result: $Utils.Optional<AnonymizedDataCountAggregateOutputType> | number
          }
        }
      }
      Interview: {
        payload: Prisma.$InterviewPayload<ExtArgs>
        fields: Prisma.InterviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InterviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InterviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          findFirst: {
            args: Prisma.InterviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InterviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          findMany: {
            args: Prisma.InterviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>[]
          }
          create: {
            args: Prisma.InterviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          createMany: {
            args: Prisma.InterviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InterviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          update: {
            args: Prisma.InterviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          deleteMany: {
            args: Prisma.InterviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InterviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InterviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InterviewPayload>
          }
          aggregate: {
            args: Prisma.InterviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInterview>
          }
          groupBy: {
            args: Prisma.InterviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<InterviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.InterviewCountArgs<ExtArgs>
            result: $Utils.Optional<InterviewCountAggregateOutputType> | number
          }
        }
      }
      EmailLog: {
        payload: Prisma.$EmailLogPayload<ExtArgs>
        fields: Prisma.EmailLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findFirst: {
            args: Prisma.EmailLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          findMany: {
            args: Prisma.EmailLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>[]
          }
          create: {
            args: Prisma.EmailLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          createMany: {
            args: Prisma.EmailLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EmailLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          update: {
            args: Prisma.EmailLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          deleteMany: {
            args: Prisma.EmailLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmailLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailLogPayload>
          }
          aggregate: {
            args: Prisma.EmailLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailLog>
          }
          groupBy: {
            args: Prisma.EmailLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailLogCountArgs<ExtArgs>
            result: $Utils.Optional<EmailLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    jobCategory?: JobCategoryOmit
    skillMaster?: SkillMasterOmit
    country?: CountryOmit
    user?: UserOmit
    applicant?: ApplicantOmit
    employer?: EmployerOmit
    job?: JobOmit
    jobRequirement?: JobRequirementOmit
    applicantSkill?: ApplicantSkillOmit
    application?: ApplicationOmit
    notification?: NotificationOmit
    academicQualification?: AcademicQualificationOmit
    workExperience?: WorkExperienceOmit
    languageProficiency?: LanguageProficiencyOmit
    computerSkill?: ComputerSkillOmit
    generalSkill?: GeneralSkillOmit
    skillDemand?: SkillDemandOmit
    chatRoom?: ChatRoomOmit
    chatMessage?: ChatMessageOmit
    notificationSettings?: NotificationSettingsOmit
    marketTrend?: MarketTrendOmit
    userConsent?: UserConsentOmit
    auditLog?: AuditLogOmit
    anonymizedData?: AnonymizedDataOmit
    interview?: InterviewOmit
    emailLog?: EmailLogOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type JobCategoryCountOutputType
   */

  export type JobCategoryCountOutputType = {
    applicants: number
    jobs: number
  }

  export type JobCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicants?: boolean | JobCategoryCountOutputTypeCountApplicantsArgs
    jobs?: boolean | JobCategoryCountOutputTypeCountJobsArgs
  }

  // Custom InputTypes
  /**
   * JobCategoryCountOutputType without action
   */
  export type JobCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategoryCountOutputType
     */
    select?: JobCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCategoryCountOutputType without action
   */
  export type JobCategoryCountOutputTypeCountApplicantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantWhereInput
  }

  /**
   * JobCategoryCountOutputType without action
   */
  export type JobCategoryCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }


  /**
   * Count Type SkillMasterCountOutputType
   */

  export type SkillMasterCountOutputType = {
    jobRequirements: number
    applicantSkills: number
    skillDemands: number
  }

  export type SkillMasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobRequirements?: boolean | SkillMasterCountOutputTypeCountJobRequirementsArgs
    applicantSkills?: boolean | SkillMasterCountOutputTypeCountApplicantSkillsArgs
    skillDemands?: boolean | SkillMasterCountOutputTypeCountSkillDemandsArgs
  }

  // Custom InputTypes
  /**
   * SkillMasterCountOutputType without action
   */
  export type SkillMasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMasterCountOutputType
     */
    select?: SkillMasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SkillMasterCountOutputType without action
   */
  export type SkillMasterCountOutputTypeCountJobRequirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobRequirementWhereInput
  }

  /**
   * SkillMasterCountOutputType without action
   */
  export type SkillMasterCountOutputTypeCountApplicantSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantSkillWhereInput
  }

  /**
   * SkillMasterCountOutputType without action
   */
  export type SkillMasterCountOutputTypeCountSkillDemandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillDemandWhereInput
  }


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    qualifications: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualifications?: boolean | CountryCountOutputTypeCountQualificationsArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountQualificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicQualificationWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    chatRooms: number
    agentChats: number
    chatMessages: number
    consents: number
    auditLogs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRooms?: boolean | UserCountOutputTypeCountChatRoomsArgs
    agentChats?: boolean | UserCountOutputTypeCountAgentChatsArgs
    chatMessages?: boolean | UserCountOutputTypeCountChatMessagesArgs
    consents?: boolean | UserCountOutputTypeCountConsentsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAgentChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountConsentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserConsentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type ApplicantCountOutputType
   */

  export type ApplicantCountOutputType = {
    applications: number
    qualifications: number
    experiences: number
    languages: number
    computerSkills: number
    skills: number
    generalSkills: number
    notifications: number
    categories: number
  }

  export type ApplicantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | ApplicantCountOutputTypeCountApplicationsArgs
    qualifications?: boolean | ApplicantCountOutputTypeCountQualificationsArgs
    experiences?: boolean | ApplicantCountOutputTypeCountExperiencesArgs
    languages?: boolean | ApplicantCountOutputTypeCountLanguagesArgs
    computerSkills?: boolean | ApplicantCountOutputTypeCountComputerSkillsArgs
    skills?: boolean | ApplicantCountOutputTypeCountSkillsArgs
    generalSkills?: boolean | ApplicantCountOutputTypeCountGeneralSkillsArgs
    notifications?: boolean | ApplicantCountOutputTypeCountNotificationsArgs
    categories?: boolean | ApplicantCountOutputTypeCountCategoriesArgs
  }

  // Custom InputTypes
  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantCountOutputType
     */
    select?: ApplicantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountQualificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicQualificationWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountExperiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkExperienceWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountLanguagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageProficiencyWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountComputerSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComputerSkillWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantSkillWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountGeneralSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralSkillWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * ApplicantCountOutputType without action
   */
  export type ApplicantCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobCategoryWhereInput
  }


  /**
   * Count Type EmployerCountOutputType
   */

  export type EmployerCountOutputType = {
    jobs: number
    notifications: number
  }

  export type EmployerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobs?: boolean | EmployerCountOutputTypeCountJobsArgs
    notifications?: boolean | EmployerCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * EmployerCountOutputType without action
   */
  export type EmployerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmployerCountOutputType
     */
    select?: EmployerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmployerCountOutputType without action
   */
  export type EmployerCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * EmployerCountOutputType without action
   */
  export type EmployerCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    applications: number
    categories: number
    requirements: number
    interviews: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applications?: boolean | JobCountOutputTypeCountApplicationsArgs
    categories?: boolean | JobCountOutputTypeCountCategoriesArgs
    requirements?: boolean | JobCountOutputTypeCountRequirementsArgs
    interviews?: boolean | JobCountOutputTypeCountInterviewsArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountApplicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobCategoryWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountRequirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobRequirementWhereInput
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
  }


  /**
   * Count Type ApplicationCountOutputType
   */

  export type ApplicationCountOutputType = {
    notifications: number
    interviews: number
    emailLogs: number
  }

  export type ApplicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notifications?: boolean | ApplicationCountOutputTypeCountNotificationsArgs
    interviews?: boolean | ApplicationCountOutputTypeCountInterviewsArgs
    emailLogs?: boolean | ApplicationCountOutputTypeCountEmailLogsArgs
  }

  // Custom InputTypes
  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicationCountOutputType
     */
    select?: ApplicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountInterviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
  }

  /**
   * ApplicationCountOutputType without action
   */
  export type ApplicationCountOutputTypeCountEmailLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
  }


  /**
   * Count Type ChatRoomCountOutputType
   */

  export type ChatRoomCountOutputType = {
    messages: number
  }

  export type ChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomCountOutputType
     */
    select?: ChatRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model JobCategory
   */

  export type AggregateJobCategory = {
    _count: JobCategoryCountAggregateOutputType | null
    _avg: JobCategoryAvgAggregateOutputType | null
    _sum: JobCategorySumAggregateOutputType | null
    _min: JobCategoryMinAggregateOutputType | null
    _max: JobCategoryMaxAggregateOutputType | null
  }

  export type JobCategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type JobCategorySumAggregateOutputType = {
    id: number | null
  }

  export type JobCategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobCategoryAvgAggregateInputType = {
    id?: true
  }

  export type JobCategorySumAggregateInputType = {
    id?: true
  }

  export type JobCategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobCategory to aggregate.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobCategories
    **/
    _count?: true | JobCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobCategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobCategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobCategoryMaxAggregateInputType
  }

  export type GetJobCategoryAggregateType<T extends JobCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateJobCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobCategory[P]>
      : GetScalarType<T[P], AggregateJobCategory[P]>
  }




  export type JobCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobCategoryWhereInput
    orderBy?: JobCategoryOrderByWithAggregationInput | JobCategoryOrderByWithAggregationInput[]
    by: JobCategoryScalarFieldEnum[] | JobCategoryScalarFieldEnum
    having?: JobCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCategoryCountAggregateInputType | true
    _avg?: JobCategoryAvgAggregateInputType
    _sum?: JobCategorySumAggregateInputType
    _min?: JobCategoryMinAggregateInputType
    _max?: JobCategoryMaxAggregateInputType
  }

  export type JobCategoryGroupByOutputType = {
    id: number
    name: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: JobCategoryCountAggregateOutputType | null
    _avg: JobCategoryAvgAggregateOutputType | null
    _sum: JobCategorySumAggregateOutputType | null
    _min: JobCategoryMinAggregateOutputType | null
    _max: JobCategoryMaxAggregateOutputType | null
  }

  type GetJobCategoryGroupByPayload<T extends JobCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], JobCategoryGroupByOutputType[P]>
        }
      >
    >


  export type JobCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicants?: boolean | JobCategory$applicantsArgs<ExtArgs>
    jobs?: boolean | JobCategory$jobsArgs<ExtArgs>
    _count?: boolean | JobCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobCategory"]>



  export type JobCategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["jobCategory"]>
  export type JobCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicants?: boolean | JobCategory$applicantsArgs<ExtArgs>
    jobs?: boolean | JobCategory$jobsArgs<ExtArgs>
    _count?: boolean | JobCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $JobCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobCategory"
    objects: {
      applicants: Prisma.$ApplicantPayload<ExtArgs>[]
      jobs: Prisma.$JobPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobCategory"]>
    composites: {}
  }

  type JobCategoryGetPayload<S extends boolean | null | undefined | JobCategoryDefaultArgs> = $Result.GetResult<Prisma.$JobCategoryPayload, S>

  type JobCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCategoryCountAggregateInputType | true
    }

  export interface JobCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobCategory'], meta: { name: 'JobCategory' } }
    /**
     * Find zero or one JobCategory that matches the filter.
     * @param {JobCategoryFindUniqueArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobCategoryFindUniqueArgs>(args: SelectSubset<T, JobCategoryFindUniqueArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobCategoryFindUniqueOrThrowArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, JobCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindFirstArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobCategoryFindFirstArgs>(args?: SelectSubset<T, JobCategoryFindFirstArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindFirstOrThrowArgs} args - Arguments to find a JobCategory
     * @example
     * // Get one JobCategory
     * const jobCategory = await prisma.jobCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, JobCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobCategories
     * const jobCategories = await prisma.jobCategory.findMany()
     * 
     * // Get first 10 JobCategories
     * const jobCategories = await prisma.jobCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobCategoryWithIdOnly = await prisma.jobCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobCategoryFindManyArgs>(args?: SelectSubset<T, JobCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobCategory.
     * @param {JobCategoryCreateArgs} args - Arguments to create a JobCategory.
     * @example
     * // Create one JobCategory
     * const JobCategory = await prisma.jobCategory.create({
     *   data: {
     *     // ... data to create a JobCategory
     *   }
     * })
     * 
     */
    create<T extends JobCategoryCreateArgs>(args: SelectSubset<T, JobCategoryCreateArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobCategories.
     * @param {JobCategoryCreateManyArgs} args - Arguments to create many JobCategories.
     * @example
     * // Create many JobCategories
     * const jobCategory = await prisma.jobCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCategoryCreateManyArgs>(args?: SelectSubset<T, JobCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobCategory.
     * @param {JobCategoryDeleteArgs} args - Arguments to delete one JobCategory.
     * @example
     * // Delete one JobCategory
     * const JobCategory = await prisma.jobCategory.delete({
     *   where: {
     *     // ... filter to delete one JobCategory
     *   }
     * })
     * 
     */
    delete<T extends JobCategoryDeleteArgs>(args: SelectSubset<T, JobCategoryDeleteArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobCategory.
     * @param {JobCategoryUpdateArgs} args - Arguments to update one JobCategory.
     * @example
     * // Update one JobCategory
     * const jobCategory = await prisma.jobCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobCategoryUpdateArgs>(args: SelectSubset<T, JobCategoryUpdateArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobCategories.
     * @param {JobCategoryDeleteManyArgs} args - Arguments to filter JobCategories to delete.
     * @example
     * // Delete a few JobCategories
     * const { count } = await prisma.jobCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobCategoryDeleteManyArgs>(args?: SelectSubset<T, JobCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobCategories
     * const jobCategory = await prisma.jobCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobCategoryUpdateManyArgs>(args: SelectSubset<T, JobCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobCategory.
     * @param {JobCategoryUpsertArgs} args - Arguments to update or create a JobCategory.
     * @example
     * // Update or create a JobCategory
     * const jobCategory = await prisma.jobCategory.upsert({
     *   create: {
     *     // ... data to create a JobCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobCategory we want to update
     *   }
     * })
     */
    upsert<T extends JobCategoryUpsertArgs>(args: SelectSubset<T, JobCategoryUpsertArgs<ExtArgs>>): Prisma__JobCategoryClient<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryCountArgs} args - Arguments to filter JobCategories to count.
     * @example
     * // Count the number of JobCategories
     * const count = await prisma.jobCategory.count({
     *   where: {
     *     // ... the filter for the JobCategories we want to count
     *   }
     * })
    **/
    count<T extends JobCategoryCountArgs>(
      args?: Subset<T, JobCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobCategoryAggregateArgs>(args: Subset<T, JobCategoryAggregateArgs>): Prisma.PrismaPromise<GetJobCategoryAggregateType<T>>

    /**
     * Group by JobCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobCategoryGroupByArgs['orderBy'] }
        : { orderBy?: JobCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobCategory model
   */
  readonly fields: JobCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicants<T extends JobCategory$applicantsArgs<ExtArgs> = {}>(args?: Subset<T, JobCategory$applicantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    jobs<T extends JobCategory$jobsArgs<ExtArgs> = {}>(args?: Subset<T, JobCategory$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobCategory model
   */
  interface JobCategoryFieldRefs {
    readonly id: FieldRef<"JobCategory", 'Int'>
    readonly name: FieldRef<"JobCategory", 'String'>
    readonly description: FieldRef<"JobCategory", 'String'>
    readonly isActive: FieldRef<"JobCategory", 'Boolean'>
    readonly createdAt: FieldRef<"JobCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"JobCategory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobCategory findUnique
   */
  export type JobCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory findUniqueOrThrow
   */
  export type JobCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory findFirst
   */
  export type JobCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobCategories.
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobCategories.
     */
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * JobCategory findFirstOrThrow
   */
  export type JobCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategory to fetch.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobCategories.
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobCategories.
     */
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * JobCategory findMany
   */
  export type JobCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter, which JobCategories to fetch.
     */
    where?: JobCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobCategories to fetch.
     */
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobCategories.
     */
    cursor?: JobCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobCategories.
     */
    skip?: number
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * JobCategory create
   */
  export type JobCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a JobCategory.
     */
    data: XOR<JobCategoryCreateInput, JobCategoryUncheckedCreateInput>
  }

  /**
   * JobCategory createMany
   */
  export type JobCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobCategories.
     */
    data: JobCategoryCreateManyInput | JobCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobCategory update
   */
  export type JobCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a JobCategory.
     */
    data: XOR<JobCategoryUpdateInput, JobCategoryUncheckedUpdateInput>
    /**
     * Choose, which JobCategory to update.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory updateMany
   */
  export type JobCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobCategories.
     */
    data: XOR<JobCategoryUpdateManyMutationInput, JobCategoryUncheckedUpdateManyInput>
    /**
     * Filter which JobCategories to update
     */
    where?: JobCategoryWhereInput
    /**
     * Limit how many JobCategories to update.
     */
    limit?: number
  }

  /**
   * JobCategory upsert
   */
  export type JobCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the JobCategory to update in case it exists.
     */
    where: JobCategoryWhereUniqueInput
    /**
     * In case the JobCategory found by the `where` argument doesn't exist, create a new JobCategory with this data.
     */
    create: XOR<JobCategoryCreateInput, JobCategoryUncheckedCreateInput>
    /**
     * In case the JobCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobCategoryUpdateInput, JobCategoryUncheckedUpdateInput>
  }

  /**
   * JobCategory delete
   */
  export type JobCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    /**
     * Filter which JobCategory to delete.
     */
    where: JobCategoryWhereUniqueInput
  }

  /**
   * JobCategory deleteMany
   */
  export type JobCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobCategories to delete
     */
    where?: JobCategoryWhereInput
    /**
     * Limit how many JobCategories to delete.
     */
    limit?: number
  }

  /**
   * JobCategory.applicants
   */
  export type JobCategory$applicantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    where?: ApplicantWhereInput
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    cursor?: ApplicantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicantScalarFieldEnum | ApplicantScalarFieldEnum[]
  }

  /**
   * JobCategory.jobs
   */
  export type JobCategory$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * JobCategory without action
   */
  export type JobCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
  }


  /**
   * Model SkillMaster
   */

  export type AggregateSkillMaster = {
    _count: SkillMasterCountAggregateOutputType | null
    _avg: SkillMasterAvgAggregateOutputType | null
    _sum: SkillMasterSumAggregateOutputType | null
    _min: SkillMasterMinAggregateOutputType | null
    _max: SkillMasterMaxAggregateOutputType | null
  }

  export type SkillMasterAvgAggregateOutputType = {
    id: number | null
  }

  export type SkillMasterSumAggregateOutputType = {
    id: number | null
  }

  export type SkillMasterMinAggregateOutputType = {
    id: number | null
    name: string | null
    category: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillMasterMaxAggregateOutputType = {
    id: number | null
    name: string | null
    category: string | null
    description: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SkillMasterCountAggregateOutputType = {
    id: number
    name: number
    category: number
    description: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SkillMasterAvgAggregateInputType = {
    id?: true
  }

  export type SkillMasterSumAggregateInputType = {
    id?: true
  }

  export type SkillMasterMinAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillMasterMaxAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SkillMasterCountAggregateInputType = {
    id?: true
    name?: true
    category?: true
    description?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SkillMasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillMaster to aggregate.
     */
    where?: SkillMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMasters to fetch.
     */
    orderBy?: SkillMasterOrderByWithRelationInput | SkillMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillMasters
    **/
    _count?: true | SkillMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillMasterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillMasterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillMasterMaxAggregateInputType
  }

  export type GetSkillMasterAggregateType<T extends SkillMasterAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillMaster[P]>
      : GetScalarType<T[P], AggregateSkillMaster[P]>
  }




  export type SkillMasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillMasterWhereInput
    orderBy?: SkillMasterOrderByWithAggregationInput | SkillMasterOrderByWithAggregationInput[]
    by: SkillMasterScalarFieldEnum[] | SkillMasterScalarFieldEnum
    having?: SkillMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillMasterCountAggregateInputType | true
    _avg?: SkillMasterAvgAggregateInputType
    _sum?: SkillMasterSumAggregateInputType
    _min?: SkillMasterMinAggregateInputType
    _max?: SkillMasterMaxAggregateInputType
  }

  export type SkillMasterGroupByOutputType = {
    id: number
    name: string
    category: string
    description: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: SkillMasterCountAggregateOutputType | null
    _avg: SkillMasterAvgAggregateOutputType | null
    _sum: SkillMasterSumAggregateOutputType | null
    _min: SkillMasterMinAggregateOutputType | null
    _max: SkillMasterMaxAggregateOutputType | null
  }

  type GetSkillMasterGroupByPayload<T extends SkillMasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillMasterGroupByOutputType[P]>
            : GetScalarType<T[P], SkillMasterGroupByOutputType[P]>
        }
      >
    >


  export type SkillMasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jobRequirements?: boolean | SkillMaster$jobRequirementsArgs<ExtArgs>
    applicantSkills?: boolean | SkillMaster$applicantSkillsArgs<ExtArgs>
    skillDemands?: boolean | SkillMaster$skillDemandsArgs<ExtArgs>
    _count?: boolean | SkillMasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillMaster"]>



  export type SkillMasterSelectScalar = {
    id?: boolean
    name?: boolean
    category?: boolean
    description?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SkillMasterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "category" | "description" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["skillMaster"]>
  export type SkillMasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jobRequirements?: boolean | SkillMaster$jobRequirementsArgs<ExtArgs>
    applicantSkills?: boolean | SkillMaster$applicantSkillsArgs<ExtArgs>
    skillDemands?: boolean | SkillMaster$skillDemandsArgs<ExtArgs>
    _count?: boolean | SkillMasterCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SkillMasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillMaster"
    objects: {
      jobRequirements: Prisma.$JobRequirementPayload<ExtArgs>[]
      applicantSkills: Prisma.$ApplicantSkillPayload<ExtArgs>[]
      skillDemands: Prisma.$SkillDemandPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      category: string
      description: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["skillMaster"]>
    composites: {}
  }

  type SkillMasterGetPayload<S extends boolean | null | undefined | SkillMasterDefaultArgs> = $Result.GetResult<Prisma.$SkillMasterPayload, S>

  type SkillMasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillMasterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillMasterCountAggregateInputType | true
    }

  export interface SkillMasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillMaster'], meta: { name: 'SkillMaster' } }
    /**
     * Find zero or one SkillMaster that matches the filter.
     * @param {SkillMasterFindUniqueArgs} args - Arguments to find a SkillMaster
     * @example
     * // Get one SkillMaster
     * const skillMaster = await prisma.skillMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillMasterFindUniqueArgs>(args: SelectSubset<T, SkillMasterFindUniqueArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkillMaster that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillMasterFindUniqueOrThrowArgs} args - Arguments to find a SkillMaster
     * @example
     * // Get one SkillMaster
     * const skillMaster = await prisma.skillMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillMasterFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillMasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMasterFindFirstArgs} args - Arguments to find a SkillMaster
     * @example
     * // Get one SkillMaster
     * const skillMaster = await prisma.skillMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillMasterFindFirstArgs>(args?: SelectSubset<T, SkillMasterFindFirstArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillMaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMasterFindFirstOrThrowArgs} args - Arguments to find a SkillMaster
     * @example
     * // Get one SkillMaster
     * const skillMaster = await prisma.skillMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillMasterFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillMasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkillMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillMasters
     * const skillMasters = await prisma.skillMaster.findMany()
     * 
     * // Get first 10 SkillMasters
     * const skillMasters = await prisma.skillMaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillMasterWithIdOnly = await prisma.skillMaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillMasterFindManyArgs>(args?: SelectSubset<T, SkillMasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkillMaster.
     * @param {SkillMasterCreateArgs} args - Arguments to create a SkillMaster.
     * @example
     * // Create one SkillMaster
     * const SkillMaster = await prisma.skillMaster.create({
     *   data: {
     *     // ... data to create a SkillMaster
     *   }
     * })
     * 
     */
    create<T extends SkillMasterCreateArgs>(args: SelectSubset<T, SkillMasterCreateArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkillMasters.
     * @param {SkillMasterCreateManyArgs} args - Arguments to create many SkillMasters.
     * @example
     * // Create many SkillMasters
     * const skillMaster = await prisma.skillMaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillMasterCreateManyArgs>(args?: SelectSubset<T, SkillMasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SkillMaster.
     * @param {SkillMasterDeleteArgs} args - Arguments to delete one SkillMaster.
     * @example
     * // Delete one SkillMaster
     * const SkillMaster = await prisma.skillMaster.delete({
     *   where: {
     *     // ... filter to delete one SkillMaster
     *   }
     * })
     * 
     */
    delete<T extends SkillMasterDeleteArgs>(args: SelectSubset<T, SkillMasterDeleteArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkillMaster.
     * @param {SkillMasterUpdateArgs} args - Arguments to update one SkillMaster.
     * @example
     * // Update one SkillMaster
     * const skillMaster = await prisma.skillMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillMasterUpdateArgs>(args: SelectSubset<T, SkillMasterUpdateArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkillMasters.
     * @param {SkillMasterDeleteManyArgs} args - Arguments to filter SkillMasters to delete.
     * @example
     * // Delete a few SkillMasters
     * const { count } = await prisma.skillMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillMasterDeleteManyArgs>(args?: SelectSubset<T, SkillMasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillMasters
     * const skillMaster = await prisma.skillMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillMasterUpdateManyArgs>(args: SelectSubset<T, SkillMasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SkillMaster.
     * @param {SkillMasterUpsertArgs} args - Arguments to update or create a SkillMaster.
     * @example
     * // Update or create a SkillMaster
     * const skillMaster = await prisma.skillMaster.upsert({
     *   create: {
     *     // ... data to create a SkillMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillMaster we want to update
     *   }
     * })
     */
    upsert<T extends SkillMasterUpsertArgs>(args: SelectSubset<T, SkillMasterUpsertArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkillMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMasterCountArgs} args - Arguments to filter SkillMasters to count.
     * @example
     * // Count the number of SkillMasters
     * const count = await prisma.skillMaster.count({
     *   where: {
     *     // ... the filter for the SkillMasters we want to count
     *   }
     * })
    **/
    count<T extends SkillMasterCountArgs>(
      args?: Subset<T, SkillMasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillMasterAggregateArgs>(args: Subset<T, SkillMasterAggregateArgs>): Prisma.PrismaPromise<GetSkillMasterAggregateType<T>>

    /**
     * Group by SkillMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillMasterGroupByArgs['orderBy'] }
        : { orderBy?: SkillMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillMaster model
   */
  readonly fields: SkillMasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillMasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    jobRequirements<T extends SkillMaster$jobRequirementsArgs<ExtArgs> = {}>(args?: Subset<T, SkillMaster$jobRequirementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    applicantSkills<T extends SkillMaster$applicantSkillsArgs<ExtArgs> = {}>(args?: Subset<T, SkillMaster$applicantSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skillDemands<T extends SkillMaster$skillDemandsArgs<ExtArgs> = {}>(args?: Subset<T, SkillMaster$skillDemandsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillMaster model
   */
  interface SkillMasterFieldRefs {
    readonly id: FieldRef<"SkillMaster", 'Int'>
    readonly name: FieldRef<"SkillMaster", 'String'>
    readonly category: FieldRef<"SkillMaster", 'String'>
    readonly description: FieldRef<"SkillMaster", 'String'>
    readonly isActive: FieldRef<"SkillMaster", 'Boolean'>
    readonly createdAt: FieldRef<"SkillMaster", 'DateTime'>
    readonly updatedAt: FieldRef<"SkillMaster", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkillMaster findUnique
   */
  export type SkillMasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * Filter, which SkillMaster to fetch.
     */
    where: SkillMasterWhereUniqueInput
  }

  /**
   * SkillMaster findUniqueOrThrow
   */
  export type SkillMasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * Filter, which SkillMaster to fetch.
     */
    where: SkillMasterWhereUniqueInput
  }

  /**
   * SkillMaster findFirst
   */
  export type SkillMasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * Filter, which SkillMaster to fetch.
     */
    where?: SkillMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMasters to fetch.
     */
    orderBy?: SkillMasterOrderByWithRelationInput | SkillMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillMasters.
     */
    cursor?: SkillMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillMasters.
     */
    distinct?: SkillMasterScalarFieldEnum | SkillMasterScalarFieldEnum[]
  }

  /**
   * SkillMaster findFirstOrThrow
   */
  export type SkillMasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * Filter, which SkillMaster to fetch.
     */
    where?: SkillMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMasters to fetch.
     */
    orderBy?: SkillMasterOrderByWithRelationInput | SkillMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillMasters.
     */
    cursor?: SkillMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillMasters.
     */
    distinct?: SkillMasterScalarFieldEnum | SkillMasterScalarFieldEnum[]
  }

  /**
   * SkillMaster findMany
   */
  export type SkillMasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * Filter, which SkillMasters to fetch.
     */
    where?: SkillMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillMasters to fetch.
     */
    orderBy?: SkillMasterOrderByWithRelationInput | SkillMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillMasters.
     */
    cursor?: SkillMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillMasters.
     */
    skip?: number
    distinct?: SkillMasterScalarFieldEnum | SkillMasterScalarFieldEnum[]
  }

  /**
   * SkillMaster create
   */
  export type SkillMasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillMaster.
     */
    data: XOR<SkillMasterCreateInput, SkillMasterUncheckedCreateInput>
  }

  /**
   * SkillMaster createMany
   */
  export type SkillMasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillMasters.
     */
    data: SkillMasterCreateManyInput | SkillMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkillMaster update
   */
  export type SkillMasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillMaster.
     */
    data: XOR<SkillMasterUpdateInput, SkillMasterUncheckedUpdateInput>
    /**
     * Choose, which SkillMaster to update.
     */
    where: SkillMasterWhereUniqueInput
  }

  /**
   * SkillMaster updateMany
   */
  export type SkillMasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillMasters.
     */
    data: XOR<SkillMasterUpdateManyMutationInput, SkillMasterUncheckedUpdateManyInput>
    /**
     * Filter which SkillMasters to update
     */
    where?: SkillMasterWhereInput
    /**
     * Limit how many SkillMasters to update.
     */
    limit?: number
  }

  /**
   * SkillMaster upsert
   */
  export type SkillMasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillMaster to update in case it exists.
     */
    where: SkillMasterWhereUniqueInput
    /**
     * In case the SkillMaster found by the `where` argument doesn't exist, create a new SkillMaster with this data.
     */
    create: XOR<SkillMasterCreateInput, SkillMasterUncheckedCreateInput>
    /**
     * In case the SkillMaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillMasterUpdateInput, SkillMasterUncheckedUpdateInput>
  }

  /**
   * SkillMaster delete
   */
  export type SkillMasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
    /**
     * Filter which SkillMaster to delete.
     */
    where: SkillMasterWhereUniqueInput
  }

  /**
   * SkillMaster deleteMany
   */
  export type SkillMasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillMasters to delete
     */
    where?: SkillMasterWhereInput
    /**
     * Limit how many SkillMasters to delete.
     */
    limit?: number
  }

  /**
   * SkillMaster.jobRequirements
   */
  export type SkillMaster$jobRequirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    where?: JobRequirementWhereInput
    orderBy?: JobRequirementOrderByWithRelationInput | JobRequirementOrderByWithRelationInput[]
    cursor?: JobRequirementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobRequirementScalarFieldEnum | JobRequirementScalarFieldEnum[]
  }

  /**
   * SkillMaster.applicantSkills
   */
  export type SkillMaster$applicantSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    where?: ApplicantSkillWhereInput
    orderBy?: ApplicantSkillOrderByWithRelationInput | ApplicantSkillOrderByWithRelationInput[]
    cursor?: ApplicantSkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicantSkillScalarFieldEnum | ApplicantSkillScalarFieldEnum[]
  }

  /**
   * SkillMaster.skillDemands
   */
  export type SkillMaster$skillDemandsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    where?: SkillDemandWhereInput
    orderBy?: SkillDemandOrderByWithRelationInput | SkillDemandOrderByWithRelationInput[]
    cursor?: SkillDemandWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SkillDemandScalarFieldEnum | SkillDemandScalarFieldEnum[]
  }

  /**
   * SkillMaster without action
   */
  export type SkillMasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillMaster
     */
    select?: SkillMasterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillMaster
     */
    omit?: SkillMasterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillMasterInclude<ExtArgs> | null
  }


  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    id: number | null
  }

  export type CountrySumAggregateOutputType = {
    id: number | null
  }

  export type CountryMinAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CountryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    code: string | null
    isActive: boolean | null
    createdAt: Date | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    name: number
    code: number
    isActive: number
    createdAt: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    id?: true
  }

  export type CountrySumAggregateInputType = {
    id?: true
  }

  export type CountryMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    isActive?: true
    createdAt?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    isActive?: true
    createdAt?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    isActive?: true
    createdAt?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: number
    name: string
    code: string
    isActive: boolean
    createdAt: Date
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    isActive?: boolean
    createdAt?: boolean
    qualifications?: boolean | Country$qualificationsArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>



  export type CountrySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    isActive?: boolean
    createdAt?: boolean
  }

  export type CountryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "isActive" | "createdAt", ExtArgs["result"]["country"]>
  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    qualifications?: boolean | Country$qualificationsArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      qualifications: Prisma.$AcademicQualificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      code: string
      isActive: boolean
      createdAt: Date
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    qualifications<T extends Country$qualificationsArgs<ExtArgs> = {}>(args?: Subset<T, Country$qualificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'Int'>
    readonly name: FieldRef<"Country", 'String'>
    readonly code: FieldRef<"Country", 'String'>
    readonly isActive: FieldRef<"Country", 'Boolean'>
    readonly createdAt: FieldRef<"Country", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to delete.
     */
    limit?: number
  }

  /**
   * Country.qualifications
   */
  export type Country$qualificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    where?: AcademicQualificationWhereInput
    orderBy?: AcademicQualificationOrderByWithRelationInput | AcademicQualificationOrderByWithRelationInput[]
    cursor?: AcademicQualificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicQualificationScalarFieldEnum | AcademicQualificationScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    isActive: boolean | null
    lastLogin: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    isActive: number
    lastLogin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    lastLogin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    role: $Enums.Role
    isActive: boolean
    lastLogin: Date | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicant?: boolean | User$applicantArgs<ExtArgs>
    employer?: boolean | User$employerArgs<ExtArgs>
    chatRooms?: boolean | User$chatRoomsArgs<ExtArgs>
    agentChats?: boolean | User$agentChatsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    consents?: boolean | User$consentsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    lastLogin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "role" | "isActive" | "lastLogin" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | User$applicantArgs<ExtArgs>
    employer?: boolean | User$employerArgs<ExtArgs>
    chatRooms?: boolean | User$chatRoomsArgs<ExtArgs>
    agentChats?: boolean | User$agentChatsArgs<ExtArgs>
    chatMessages?: boolean | User$chatMessagesArgs<ExtArgs>
    consents?: boolean | User$consentsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs> | null
      employer: Prisma.$EmployerPayload<ExtArgs> | null
      chatRooms: Prisma.$ChatRoomPayload<ExtArgs>[]
      agentChats: Prisma.$ChatRoomPayload<ExtArgs>[]
      chatMessages: Prisma.$ChatMessagePayload<ExtArgs>[]
      consents: Prisma.$UserConsentPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      role: $Enums.Role
      isActive: boolean
      lastLogin: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends User$applicantArgs<ExtArgs> = {}>(args?: Subset<T, User$applicantArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    employer<T extends User$employerArgs<ExtArgs> = {}>(args?: Subset<T, User$employerArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    chatRooms<T extends User$chatRoomsArgs<ExtArgs> = {}>(args?: Subset<T, User$chatRoomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    agentChats<T extends User$agentChatsArgs<ExtArgs> = {}>(args?: Subset<T, User$agentChatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    chatMessages<T extends User$chatMessagesArgs<ExtArgs> = {}>(args?: Subset<T, User$chatMessagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    consents<T extends User$consentsArgs<ExtArgs> = {}>(args?: Subset<T, User$consentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly lastLogin: FieldRef<"User", 'DateTime'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.applicant
   */
  export type User$applicantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    where?: ApplicantWhereInput
  }

  /**
   * User.employer
   */
  export type User$employerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    where?: EmployerWhereInput
  }

  /**
   * User.chatRooms
   */
  export type User$chatRoomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    cursor?: ChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * User.agentChats
   */
  export type User$agentChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    cursor?: ChatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * User.chatMessages
   */
  export type User$chatMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * User.consents
   */
  export type User$consentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    where?: UserConsentWhereInput
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    cursor?: UserConsentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Applicant
   */

  export type AggregateApplicant = {
    _count: ApplicantCountAggregateOutputType | null
    _avg: ApplicantAvgAggregateOutputType | null
    _sum: ApplicantSumAggregateOutputType | null
    _min: ApplicantMinAggregateOutputType | null
    _max: ApplicantMaxAggregateOutputType | null
  }

  export type ApplicantAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ApplicantSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ApplicantMinAggregateOutputType = {
    id: number | null
    fullName: string | null
    nida: string | null
    phone: string | null
    address: string | null
    dateOfBirth: Date | null
    gender: string | null
    userId: number | null
    profileCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicantMaxAggregateOutputType = {
    id: number | null
    fullName: string | null
    nida: string | null
    phone: string | null
    address: string | null
    dateOfBirth: Date | null
    gender: string | null
    userId: number | null
    profileCompleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicantCountAggregateOutputType = {
    id: number
    fullName: number
    nida: number
    phone: number
    address: number
    dateOfBirth: number
    gender: number
    userId: number
    profileCompleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApplicantAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ApplicantSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ApplicantMinAggregateInputType = {
    id?: true
    fullName?: true
    nida?: true
    phone?: true
    address?: true
    dateOfBirth?: true
    gender?: true
    userId?: true
    profileCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicantMaxAggregateInputType = {
    id?: true
    fullName?: true
    nida?: true
    phone?: true
    address?: true
    dateOfBirth?: true
    gender?: true
    userId?: true
    profileCompleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicantCountAggregateInputType = {
    id?: true
    fullName?: true
    nida?: true
    phone?: true
    address?: true
    dateOfBirth?: true
    gender?: true
    userId?: true
    profileCompleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApplicantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applicant to aggregate.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applicants
    **/
    _count?: true | ApplicantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicantMaxAggregateInputType
  }

  export type GetApplicantAggregateType<T extends ApplicantAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicant[P]>
      : GetScalarType<T[P], AggregateApplicant[P]>
  }




  export type ApplicantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantWhereInput
    orderBy?: ApplicantOrderByWithAggregationInput | ApplicantOrderByWithAggregationInput[]
    by: ApplicantScalarFieldEnum[] | ApplicantScalarFieldEnum
    having?: ApplicantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicantCountAggregateInputType | true
    _avg?: ApplicantAvgAggregateInputType
    _sum?: ApplicantSumAggregateInputType
    _min?: ApplicantMinAggregateInputType
    _max?: ApplicantMaxAggregateInputType
  }

  export type ApplicantGroupByOutputType = {
    id: number
    fullName: string
    nida: string
    phone: string | null
    address: string | null
    dateOfBirth: Date | null
    gender: string | null
    userId: number
    profileCompleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: ApplicantCountAggregateOutputType | null
    _avg: ApplicantAvgAggregateOutputType | null
    _sum: ApplicantSumAggregateOutputType | null
    _min: ApplicantMinAggregateOutputType | null
    _max: ApplicantMaxAggregateOutputType | null
  }

  type GetApplicantGroupByPayload<T extends ApplicantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicantGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicantGroupByOutputType[P]>
        }
      >
    >


  export type ApplicantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    nida?: boolean
    phone?: boolean
    address?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    userId?: boolean
    profileCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    applications?: boolean | Applicant$applicationsArgs<ExtArgs>
    qualifications?: boolean | Applicant$qualificationsArgs<ExtArgs>
    experiences?: boolean | Applicant$experiencesArgs<ExtArgs>
    languages?: boolean | Applicant$languagesArgs<ExtArgs>
    computerSkills?: boolean | Applicant$computerSkillsArgs<ExtArgs>
    skills?: boolean | Applicant$skillsArgs<ExtArgs>
    generalSkills?: boolean | Applicant$generalSkillsArgs<ExtArgs>
    notifications?: boolean | Applicant$notificationsArgs<ExtArgs>
    categories?: boolean | Applicant$categoriesArgs<ExtArgs>
    notificationSettings?: boolean | Applicant$notificationSettingsArgs<ExtArgs>
    _count?: boolean | ApplicantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicant"]>



  export type ApplicantSelectScalar = {
    id?: boolean
    fullName?: boolean
    nida?: boolean
    phone?: boolean
    address?: boolean
    dateOfBirth?: boolean
    gender?: boolean
    userId?: boolean
    profileCompleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApplicantOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fullName" | "nida" | "phone" | "address" | "dateOfBirth" | "gender" | "userId" | "profileCompleted" | "createdAt" | "updatedAt", ExtArgs["result"]["applicant"]>
  export type ApplicantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    applications?: boolean | Applicant$applicationsArgs<ExtArgs>
    qualifications?: boolean | Applicant$qualificationsArgs<ExtArgs>
    experiences?: boolean | Applicant$experiencesArgs<ExtArgs>
    languages?: boolean | Applicant$languagesArgs<ExtArgs>
    computerSkills?: boolean | Applicant$computerSkillsArgs<ExtArgs>
    skills?: boolean | Applicant$skillsArgs<ExtArgs>
    generalSkills?: boolean | Applicant$generalSkillsArgs<ExtArgs>
    notifications?: boolean | Applicant$notificationsArgs<ExtArgs>
    categories?: boolean | Applicant$categoriesArgs<ExtArgs>
    notificationSettings?: boolean | Applicant$notificationSettingsArgs<ExtArgs>
    _count?: boolean | ApplicantCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ApplicantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Applicant"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      qualifications: Prisma.$AcademicQualificationPayload<ExtArgs>[]
      experiences: Prisma.$WorkExperiencePayload<ExtArgs>[]
      languages: Prisma.$LanguageProficiencyPayload<ExtArgs>[]
      computerSkills: Prisma.$ComputerSkillPayload<ExtArgs>[]
      skills: Prisma.$ApplicantSkillPayload<ExtArgs>[]
      generalSkills: Prisma.$GeneralSkillPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      categories: Prisma.$JobCategoryPayload<ExtArgs>[]
      notificationSettings: Prisma.$NotificationSettingsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fullName: string
      nida: string
      phone: string | null
      address: string | null
      dateOfBirth: Date | null
      gender: string | null
      userId: number
      profileCompleted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["applicant"]>
    composites: {}
  }

  type ApplicantGetPayload<S extends boolean | null | undefined | ApplicantDefaultArgs> = $Result.GetResult<Prisma.$ApplicantPayload, S>

  type ApplicantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicantFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicantCountAggregateInputType | true
    }

  export interface ApplicantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Applicant'], meta: { name: 'Applicant' } }
    /**
     * Find zero or one Applicant that matches the filter.
     * @param {ApplicantFindUniqueArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicantFindUniqueArgs>(args: SelectSubset<T, ApplicantFindUniqueArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Applicant that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicantFindUniqueOrThrowArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicantFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Applicant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantFindFirstArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicantFindFirstArgs>(args?: SelectSubset<T, ApplicantFindFirstArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Applicant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantFindFirstOrThrowArgs} args - Arguments to find a Applicant
     * @example
     * // Get one Applicant
     * const applicant = await prisma.applicant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicantFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicantFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Applicants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applicants
     * const applicants = await prisma.applicant.findMany()
     * 
     * // Get first 10 Applicants
     * const applicants = await prisma.applicant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicantWithIdOnly = await prisma.applicant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicantFindManyArgs>(args?: SelectSubset<T, ApplicantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Applicant.
     * @param {ApplicantCreateArgs} args - Arguments to create a Applicant.
     * @example
     * // Create one Applicant
     * const Applicant = await prisma.applicant.create({
     *   data: {
     *     // ... data to create a Applicant
     *   }
     * })
     * 
     */
    create<T extends ApplicantCreateArgs>(args: SelectSubset<T, ApplicantCreateArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Applicants.
     * @param {ApplicantCreateManyArgs} args - Arguments to create many Applicants.
     * @example
     * // Create many Applicants
     * const applicant = await prisma.applicant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicantCreateManyArgs>(args?: SelectSubset<T, ApplicantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Applicant.
     * @param {ApplicantDeleteArgs} args - Arguments to delete one Applicant.
     * @example
     * // Delete one Applicant
     * const Applicant = await prisma.applicant.delete({
     *   where: {
     *     // ... filter to delete one Applicant
     *   }
     * })
     * 
     */
    delete<T extends ApplicantDeleteArgs>(args: SelectSubset<T, ApplicantDeleteArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Applicant.
     * @param {ApplicantUpdateArgs} args - Arguments to update one Applicant.
     * @example
     * // Update one Applicant
     * const applicant = await prisma.applicant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicantUpdateArgs>(args: SelectSubset<T, ApplicantUpdateArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Applicants.
     * @param {ApplicantDeleteManyArgs} args - Arguments to filter Applicants to delete.
     * @example
     * // Delete a few Applicants
     * const { count } = await prisma.applicant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicantDeleteManyArgs>(args?: SelectSubset<T, ApplicantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applicants
     * const applicant = await prisma.applicant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicantUpdateManyArgs>(args: SelectSubset<T, ApplicantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Applicant.
     * @param {ApplicantUpsertArgs} args - Arguments to update or create a Applicant.
     * @example
     * // Update or create a Applicant
     * const applicant = await prisma.applicant.upsert({
     *   create: {
     *     // ... data to create a Applicant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Applicant we want to update
     *   }
     * })
     */
    upsert<T extends ApplicantUpsertArgs>(args: SelectSubset<T, ApplicantUpsertArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Applicants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantCountArgs} args - Arguments to filter Applicants to count.
     * @example
     * // Count the number of Applicants
     * const count = await prisma.applicant.count({
     *   where: {
     *     // ... the filter for the Applicants we want to count
     *   }
     * })
    **/
    count<T extends ApplicantCountArgs>(
      args?: Subset<T, ApplicantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Applicant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicantAggregateArgs>(args: Subset<T, ApplicantAggregateArgs>): Prisma.PrismaPromise<GetApplicantAggregateType<T>>

    /**
     * Group by Applicant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicantGroupByArgs['orderBy'] }
        : { orderBy?: ApplicantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Applicant model
   */
  readonly fields: ApplicantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Applicant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    applications<T extends Applicant$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    qualifications<T extends Applicant$qualificationsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$qualificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    experiences<T extends Applicant$experiencesArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$experiencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    languages<T extends Applicant$languagesArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$languagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    computerSkills<T extends Applicant$computerSkillsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$computerSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    skills<T extends Applicant$skillsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$skillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    generalSkills<T extends Applicant$generalSkillsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$generalSkillsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends Applicant$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Applicant$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notificationSettings<T extends Applicant$notificationSettingsArgs<ExtArgs> = {}>(args?: Subset<T, Applicant$notificationSettingsArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Applicant model
   */
  interface ApplicantFieldRefs {
    readonly id: FieldRef<"Applicant", 'Int'>
    readonly fullName: FieldRef<"Applicant", 'String'>
    readonly nida: FieldRef<"Applicant", 'String'>
    readonly phone: FieldRef<"Applicant", 'String'>
    readonly address: FieldRef<"Applicant", 'String'>
    readonly dateOfBirth: FieldRef<"Applicant", 'DateTime'>
    readonly gender: FieldRef<"Applicant", 'String'>
    readonly userId: FieldRef<"Applicant", 'Int'>
    readonly profileCompleted: FieldRef<"Applicant", 'Boolean'>
    readonly createdAt: FieldRef<"Applicant", 'DateTime'>
    readonly updatedAt: FieldRef<"Applicant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Applicant findUnique
   */
  export type ApplicantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant findUniqueOrThrow
   */
  export type ApplicantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant findFirst
   */
  export type ApplicantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applicants.
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applicants.
     */
    distinct?: ApplicantScalarFieldEnum | ApplicantScalarFieldEnum[]
  }

  /**
   * Applicant findFirstOrThrow
   */
  export type ApplicantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicant to fetch.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applicants.
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applicants.
     */
    distinct?: ApplicantScalarFieldEnum | ApplicantScalarFieldEnum[]
  }

  /**
   * Applicant findMany
   */
  export type ApplicantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter, which Applicants to fetch.
     */
    where?: ApplicantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applicants to fetch.
     */
    orderBy?: ApplicantOrderByWithRelationInput | ApplicantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applicants.
     */
    cursor?: ApplicantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applicants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applicants.
     */
    skip?: number
    distinct?: ApplicantScalarFieldEnum | ApplicantScalarFieldEnum[]
  }

  /**
   * Applicant create
   */
  export type ApplicantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * The data needed to create a Applicant.
     */
    data: XOR<ApplicantCreateInput, ApplicantUncheckedCreateInput>
  }

  /**
   * Applicant createMany
   */
  export type ApplicantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applicants.
     */
    data: ApplicantCreateManyInput | ApplicantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Applicant update
   */
  export type ApplicantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * The data needed to update a Applicant.
     */
    data: XOR<ApplicantUpdateInput, ApplicantUncheckedUpdateInput>
    /**
     * Choose, which Applicant to update.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant updateMany
   */
  export type ApplicantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applicants.
     */
    data: XOR<ApplicantUpdateManyMutationInput, ApplicantUncheckedUpdateManyInput>
    /**
     * Filter which Applicants to update
     */
    where?: ApplicantWhereInput
    /**
     * Limit how many Applicants to update.
     */
    limit?: number
  }

  /**
   * Applicant upsert
   */
  export type ApplicantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * The filter to search for the Applicant to update in case it exists.
     */
    where: ApplicantWhereUniqueInput
    /**
     * In case the Applicant found by the `where` argument doesn't exist, create a new Applicant with this data.
     */
    create: XOR<ApplicantCreateInput, ApplicantUncheckedCreateInput>
    /**
     * In case the Applicant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicantUpdateInput, ApplicantUncheckedUpdateInput>
  }

  /**
   * Applicant delete
   */
  export type ApplicantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    /**
     * Filter which Applicant to delete.
     */
    where: ApplicantWhereUniqueInput
  }

  /**
   * Applicant deleteMany
   */
  export type ApplicantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applicants to delete
     */
    where?: ApplicantWhereInput
    /**
     * Limit how many Applicants to delete.
     */
    limit?: number
  }

  /**
   * Applicant.applications
   */
  export type Applicant$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Applicant.qualifications
   */
  export type Applicant$qualificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    where?: AcademicQualificationWhereInput
    orderBy?: AcademicQualificationOrderByWithRelationInput | AcademicQualificationOrderByWithRelationInput[]
    cursor?: AcademicQualificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicQualificationScalarFieldEnum | AcademicQualificationScalarFieldEnum[]
  }

  /**
   * Applicant.experiences
   */
  export type Applicant$experiencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    where?: WorkExperienceWhereInput
    orderBy?: WorkExperienceOrderByWithRelationInput | WorkExperienceOrderByWithRelationInput[]
    cursor?: WorkExperienceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }

  /**
   * Applicant.languages
   */
  export type Applicant$languagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    where?: LanguageProficiencyWhereInput
    orderBy?: LanguageProficiencyOrderByWithRelationInput | LanguageProficiencyOrderByWithRelationInput[]
    cursor?: LanguageProficiencyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LanguageProficiencyScalarFieldEnum | LanguageProficiencyScalarFieldEnum[]
  }

  /**
   * Applicant.computerSkills
   */
  export type Applicant$computerSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    where?: ComputerSkillWhereInput
    orderBy?: ComputerSkillOrderByWithRelationInput | ComputerSkillOrderByWithRelationInput[]
    cursor?: ComputerSkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComputerSkillScalarFieldEnum | ComputerSkillScalarFieldEnum[]
  }

  /**
   * Applicant.skills
   */
  export type Applicant$skillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    where?: ApplicantSkillWhereInput
    orderBy?: ApplicantSkillOrderByWithRelationInput | ApplicantSkillOrderByWithRelationInput[]
    cursor?: ApplicantSkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicantSkillScalarFieldEnum | ApplicantSkillScalarFieldEnum[]
  }

  /**
   * Applicant.generalSkills
   */
  export type Applicant$generalSkillsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    where?: GeneralSkillWhereInput
    orderBy?: GeneralSkillOrderByWithRelationInput | GeneralSkillOrderByWithRelationInput[]
    cursor?: GeneralSkillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GeneralSkillScalarFieldEnum | GeneralSkillScalarFieldEnum[]
  }

  /**
   * Applicant.notifications
   */
  export type Applicant$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Applicant.categories
   */
  export type Applicant$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    where?: JobCategoryWhereInput
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    cursor?: JobCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * Applicant.notificationSettings
   */
  export type Applicant$notificationSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    where?: NotificationSettingsWhereInput
  }

  /**
   * Applicant without action
   */
  export type ApplicantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
  }


  /**
   * Model Employer
   */

  export type AggregateEmployer = {
    _count: EmployerCountAggregateOutputType | null
    _avg: EmployerAvgAggregateOutputType | null
    _sum: EmployerSumAggregateOutputType | null
    _min: EmployerMinAggregateOutputType | null
    _max: EmployerMaxAggregateOutputType | null
  }

  export type EmployerAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type EmployerSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type EmployerMinAggregateOutputType = {
    id: number | null
    companyName: string | null
    industry: string | null
    companySize: string | null
    website: string | null
    address: string | null
    phone: string | null
    description: string | null
    userId: number | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployerMaxAggregateOutputType = {
    id: number | null
    companyName: string | null
    industry: string | null
    companySize: string | null
    website: string | null
    address: string | null
    phone: string | null
    description: string | null
    userId: number | null
    isVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmployerCountAggregateOutputType = {
    id: number
    companyName: number
    industry: number
    companySize: number
    website: number
    address: number
    phone: number
    description: number
    userId: number
    isVerified: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmployerAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type EmployerSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type EmployerMinAggregateInputType = {
    id?: true
    companyName?: true
    industry?: true
    companySize?: true
    website?: true
    address?: true
    phone?: true
    description?: true
    userId?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployerMaxAggregateInputType = {
    id?: true
    companyName?: true
    industry?: true
    companySize?: true
    website?: true
    address?: true
    phone?: true
    description?: true
    userId?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmployerCountAggregateInputType = {
    id?: true
    companyName?: true
    industry?: true
    companySize?: true
    website?: true
    address?: true
    phone?: true
    description?: true
    userId?: true
    isVerified?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmployerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employer to aggregate.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Employers
    **/
    _count?: true | EmployerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmployerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmployerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmployerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmployerMaxAggregateInputType
  }

  export type GetEmployerAggregateType<T extends EmployerAggregateArgs> = {
        [P in keyof T & keyof AggregateEmployer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmployer[P]>
      : GetScalarType<T[P], AggregateEmployer[P]>
  }




  export type EmployerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmployerWhereInput
    orderBy?: EmployerOrderByWithAggregationInput | EmployerOrderByWithAggregationInput[]
    by: EmployerScalarFieldEnum[] | EmployerScalarFieldEnum
    having?: EmployerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmployerCountAggregateInputType | true
    _avg?: EmployerAvgAggregateInputType
    _sum?: EmployerSumAggregateInputType
    _min?: EmployerMinAggregateInputType
    _max?: EmployerMaxAggregateInputType
  }

  export type EmployerGroupByOutputType = {
    id: number
    companyName: string
    industry: string | null
    companySize: string | null
    website: string | null
    address: string
    phone: string | null
    description: string | null
    userId: number
    isVerified: boolean
    createdAt: Date
    updatedAt: Date
    _count: EmployerCountAggregateOutputType | null
    _avg: EmployerAvgAggregateOutputType | null
    _sum: EmployerSumAggregateOutputType | null
    _min: EmployerMinAggregateOutputType | null
    _max: EmployerMaxAggregateOutputType | null
  }

  type GetEmployerGroupByPayload<T extends EmployerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmployerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmployerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmployerGroupByOutputType[P]>
            : GetScalarType<T[P], EmployerGroupByOutputType[P]>
        }
      >
    >


  export type EmployerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    website?: boolean
    address?: boolean
    phone?: boolean
    description?: boolean
    userId?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobs?: boolean | Employer$jobsArgs<ExtArgs>
    notifications?: boolean | Employer$notificationsArgs<ExtArgs>
    _count?: boolean | EmployerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["employer"]>



  export type EmployerSelectScalar = {
    id?: boolean
    companyName?: boolean
    industry?: boolean
    companySize?: boolean
    website?: boolean
    address?: boolean
    phone?: boolean
    description?: boolean
    userId?: boolean
    isVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmployerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyName" | "industry" | "companySize" | "website" | "address" | "phone" | "description" | "userId" | "isVerified" | "createdAt" | "updatedAt", ExtArgs["result"]["employer"]>
  export type EmployerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    jobs?: boolean | Employer$jobsArgs<ExtArgs>
    notifications?: boolean | Employer$notificationsArgs<ExtArgs>
    _count?: boolean | EmployerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EmployerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Employer"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      jobs: Prisma.$JobPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyName: string
      industry: string | null
      companySize: string | null
      website: string | null
      address: string
      phone: string | null
      description: string | null
      userId: number
      isVerified: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["employer"]>
    composites: {}
  }

  type EmployerGetPayload<S extends boolean | null | undefined | EmployerDefaultArgs> = $Result.GetResult<Prisma.$EmployerPayload, S>

  type EmployerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmployerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmployerCountAggregateInputType | true
    }

  export interface EmployerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Employer'], meta: { name: 'Employer' } }
    /**
     * Find zero or one Employer that matches the filter.
     * @param {EmployerFindUniqueArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmployerFindUniqueArgs>(args: SelectSubset<T, EmployerFindUniqueArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Employer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmployerFindUniqueOrThrowArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmployerFindUniqueOrThrowArgs>(args: SelectSubset<T, EmployerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerFindFirstArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmployerFindFirstArgs>(args?: SelectSubset<T, EmployerFindFirstArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Employer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerFindFirstOrThrowArgs} args - Arguments to find a Employer
     * @example
     * // Get one Employer
     * const employer = await prisma.employer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmployerFindFirstOrThrowArgs>(args?: SelectSubset<T, EmployerFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Employers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Employers
     * const employers = await prisma.employer.findMany()
     * 
     * // Get first 10 Employers
     * const employers = await prisma.employer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const employerWithIdOnly = await prisma.employer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmployerFindManyArgs>(args?: SelectSubset<T, EmployerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Employer.
     * @param {EmployerCreateArgs} args - Arguments to create a Employer.
     * @example
     * // Create one Employer
     * const Employer = await prisma.employer.create({
     *   data: {
     *     // ... data to create a Employer
     *   }
     * })
     * 
     */
    create<T extends EmployerCreateArgs>(args: SelectSubset<T, EmployerCreateArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Employers.
     * @param {EmployerCreateManyArgs} args - Arguments to create many Employers.
     * @example
     * // Create many Employers
     * const employer = await prisma.employer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmployerCreateManyArgs>(args?: SelectSubset<T, EmployerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Employer.
     * @param {EmployerDeleteArgs} args - Arguments to delete one Employer.
     * @example
     * // Delete one Employer
     * const Employer = await prisma.employer.delete({
     *   where: {
     *     // ... filter to delete one Employer
     *   }
     * })
     * 
     */
    delete<T extends EmployerDeleteArgs>(args: SelectSubset<T, EmployerDeleteArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Employer.
     * @param {EmployerUpdateArgs} args - Arguments to update one Employer.
     * @example
     * // Update one Employer
     * const employer = await prisma.employer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmployerUpdateArgs>(args: SelectSubset<T, EmployerUpdateArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Employers.
     * @param {EmployerDeleteManyArgs} args - Arguments to filter Employers to delete.
     * @example
     * // Delete a few Employers
     * const { count } = await prisma.employer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmployerDeleteManyArgs>(args?: SelectSubset<T, EmployerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Employers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Employers
     * const employer = await prisma.employer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmployerUpdateManyArgs>(args: SelectSubset<T, EmployerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Employer.
     * @param {EmployerUpsertArgs} args - Arguments to update or create a Employer.
     * @example
     * // Update or create a Employer
     * const employer = await prisma.employer.upsert({
     *   create: {
     *     // ... data to create a Employer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Employer we want to update
     *   }
     * })
     */
    upsert<T extends EmployerUpsertArgs>(args: SelectSubset<T, EmployerUpsertArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Employers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerCountArgs} args - Arguments to filter Employers to count.
     * @example
     * // Count the number of Employers
     * const count = await prisma.employer.count({
     *   where: {
     *     // ... the filter for the Employers we want to count
     *   }
     * })
    **/
    count<T extends EmployerCountArgs>(
      args?: Subset<T, EmployerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmployerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Employer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmployerAggregateArgs>(args: Subset<T, EmployerAggregateArgs>): Prisma.PrismaPromise<GetEmployerAggregateType<T>>

    /**
     * Group by Employer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmployerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmployerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmployerGroupByArgs['orderBy'] }
        : { orderBy?: EmployerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmployerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmployerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Employer model
   */
  readonly fields: EmployerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Employer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmployerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    jobs<T extends Employer$jobsArgs<ExtArgs> = {}>(args?: Subset<T, Employer$jobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends Employer$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Employer$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Employer model
   */
  interface EmployerFieldRefs {
    readonly id: FieldRef<"Employer", 'Int'>
    readonly companyName: FieldRef<"Employer", 'String'>
    readonly industry: FieldRef<"Employer", 'String'>
    readonly companySize: FieldRef<"Employer", 'String'>
    readonly website: FieldRef<"Employer", 'String'>
    readonly address: FieldRef<"Employer", 'String'>
    readonly phone: FieldRef<"Employer", 'String'>
    readonly description: FieldRef<"Employer", 'String'>
    readonly userId: FieldRef<"Employer", 'Int'>
    readonly isVerified: FieldRef<"Employer", 'Boolean'>
    readonly createdAt: FieldRef<"Employer", 'DateTime'>
    readonly updatedAt: FieldRef<"Employer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Employer findUnique
   */
  export type EmployerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer findUniqueOrThrow
   */
  export type EmployerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer findFirst
   */
  export type EmployerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employers.
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employers.
     */
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * Employer findFirstOrThrow
   */
  export type EmployerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employer to fetch.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Employers.
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Employers.
     */
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * Employer findMany
   */
  export type EmployerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter, which Employers to fetch.
     */
    where?: EmployerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Employers to fetch.
     */
    orderBy?: EmployerOrderByWithRelationInput | EmployerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Employers.
     */
    cursor?: EmployerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Employers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Employers.
     */
    skip?: number
    distinct?: EmployerScalarFieldEnum | EmployerScalarFieldEnum[]
  }

  /**
   * Employer create
   */
  export type EmployerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * The data needed to create a Employer.
     */
    data: XOR<EmployerCreateInput, EmployerUncheckedCreateInput>
  }

  /**
   * Employer createMany
   */
  export type EmployerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Employers.
     */
    data: EmployerCreateManyInput | EmployerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Employer update
   */
  export type EmployerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * The data needed to update a Employer.
     */
    data: XOR<EmployerUpdateInput, EmployerUncheckedUpdateInput>
    /**
     * Choose, which Employer to update.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer updateMany
   */
  export type EmployerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Employers.
     */
    data: XOR<EmployerUpdateManyMutationInput, EmployerUncheckedUpdateManyInput>
    /**
     * Filter which Employers to update
     */
    where?: EmployerWhereInput
    /**
     * Limit how many Employers to update.
     */
    limit?: number
  }

  /**
   * Employer upsert
   */
  export type EmployerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * The filter to search for the Employer to update in case it exists.
     */
    where: EmployerWhereUniqueInput
    /**
     * In case the Employer found by the `where` argument doesn't exist, create a new Employer with this data.
     */
    create: XOR<EmployerCreateInput, EmployerUncheckedCreateInput>
    /**
     * In case the Employer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmployerUpdateInput, EmployerUncheckedUpdateInput>
  }

  /**
   * Employer delete
   */
  export type EmployerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    /**
     * Filter which Employer to delete.
     */
    where: EmployerWhereUniqueInput
  }

  /**
   * Employer deleteMany
   */
  export type EmployerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Employers to delete
     */
    where?: EmployerWhereInput
    /**
     * Limit how many Employers to delete.
     */
    limit?: number
  }

  /**
   * Employer.jobs
   */
  export type Employer$jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Employer.notifications
   */
  export type Employer$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Employer without action
   */
  export type EmployerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
    salaryMin: Decimal | null
    salaryMax: Decimal | null
    applicationCount: number | null
    viewCount: number | null
    employerId: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
    salaryMin: Decimal | null
    salaryMax: Decimal | null
    applicationCount: number | null
    viewCount: number | null
    employerId: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    location: string | null
    salaryMin: Decimal | null
    salaryMax: Decimal | null
    currency: string | null
    employmentType: string | null
    experienceLevel: string | null
    status: $Enums.JobStatus | null
    applicationCount: number | null
    viewCount: number | null
    employerId: number | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    title: string | null
    description: string | null
    location: string | null
    salaryMin: Decimal | null
    salaryMax: Decimal | null
    currency: string | null
    employmentType: string | null
    experienceLevel: string | null
    status: $Enums.JobStatus | null
    applicationCount: number | null
    viewCount: number | null
    employerId: number | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    title: number
    description: number
    location: number
    salaryMin: number
    salaryMax: number
    currency: number
    employmentType: number
    experienceLevel: number
    status: number
    applicationCount: number
    viewCount: number
    employerId: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    salaryMin?: true
    salaryMax?: true
    applicationCount?: true
    viewCount?: true
    employerId?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    salaryMin?: true
    salaryMax?: true
    applicationCount?: true
    viewCount?: true
    employerId?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    employmentType?: true
    experienceLevel?: true
    status?: true
    applicationCount?: true
    viewCount?: true
    employerId?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    employmentType?: true
    experienceLevel?: true
    status?: true
    applicationCount?: true
    viewCount?: true
    employerId?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    location?: true
    salaryMin?: true
    salaryMax?: true
    currency?: true
    employmentType?: true
    experienceLevel?: true
    status?: true
    applicationCount?: true
    viewCount?: true
    employerId?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: number
    title: string
    description: string
    location: string | null
    salaryMin: Decimal | null
    salaryMax: Decimal | null
    currency: string | null
    employmentType: string | null
    experienceLevel: string | null
    status: $Enums.JobStatus
    applicationCount: number
    viewCount: number
    employerId: number
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    employmentType?: boolean
    experienceLevel?: boolean
    status?: boolean
    applicationCount?: boolean
    viewCount?: boolean
    employerId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    employer?: boolean | EmployerDefaultArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    categories?: boolean | Job$categoriesArgs<ExtArgs>
    requirements?: boolean | Job$requirementsArgs<ExtArgs>
    interviews?: boolean | Job$interviewsArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>



  export type JobSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    location?: boolean
    salaryMin?: boolean
    salaryMax?: boolean
    currency?: boolean
    employmentType?: boolean
    experienceLevel?: boolean
    status?: boolean
    applicationCount?: boolean
    viewCount?: boolean
    employerId?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "location" | "salaryMin" | "salaryMax" | "currency" | "employmentType" | "experienceLevel" | "status" | "applicationCount" | "viewCount" | "employerId" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["job"]>
  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    employer?: boolean | EmployerDefaultArgs<ExtArgs>
    applications?: boolean | Job$applicationsArgs<ExtArgs>
    categories?: boolean | Job$categoriesArgs<ExtArgs>
    requirements?: boolean | Job$requirementsArgs<ExtArgs>
    interviews?: boolean | Job$interviewsArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      employer: Prisma.$EmployerPayload<ExtArgs>
      applications: Prisma.$ApplicationPayload<ExtArgs>[]
      categories: Prisma.$JobCategoryPayload<ExtArgs>[]
      requirements: Prisma.$JobRequirementPayload<ExtArgs>[]
      interviews: Prisma.$InterviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      description: string
      location: string | null
      salaryMin: Prisma.Decimal | null
      salaryMax: Prisma.Decimal | null
      currency: string | null
      employmentType: string | null
      experienceLevel: string | null
      status: $Enums.JobStatus
      applicationCount: number
      viewCount: number
      employerId: number
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    employer<T extends EmployerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmployerDefaultArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    applications<T extends Job$applicationsArgs<ExtArgs> = {}>(args?: Subset<T, Job$applicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    categories<T extends Job$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Job$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requirements<T extends Job$requirementsArgs<ExtArgs> = {}>(args?: Subset<T, Job$requirementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interviews<T extends Job$interviewsArgs<ExtArgs> = {}>(args?: Subset<T, Job$interviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'Int'>
    readonly title: FieldRef<"Job", 'String'>
    readonly description: FieldRef<"Job", 'String'>
    readonly location: FieldRef<"Job", 'String'>
    readonly salaryMin: FieldRef<"Job", 'Decimal'>
    readonly salaryMax: FieldRef<"Job", 'Decimal'>
    readonly currency: FieldRef<"Job", 'String'>
    readonly employmentType: FieldRef<"Job", 'String'>
    readonly experienceLevel: FieldRef<"Job", 'String'>
    readonly status: FieldRef<"Job", 'JobStatus'>
    readonly applicationCount: FieldRef<"Job", 'Int'>
    readonly viewCount: FieldRef<"Job", 'Int'>
    readonly employerId: FieldRef<"Job", 'Int'>
    readonly expiresAt: FieldRef<"Job", 'DateTime'>
    readonly createdAt: FieldRef<"Job", 'DateTime'>
    readonly updatedAt: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to update.
     */
    limit?: number
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
    /**
     * Limit how many Jobs to delete.
     */
    limit?: number
  }

  /**
   * Job.applications
   */
  export type Job$applicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    cursor?: ApplicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Job.categories
   */
  export type Job$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCategory
     */
    select?: JobCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobCategory
     */
    omit?: JobCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobCategoryInclude<ExtArgs> | null
    where?: JobCategoryWhereInput
    orderBy?: JobCategoryOrderByWithRelationInput | JobCategoryOrderByWithRelationInput[]
    cursor?: JobCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobCategoryScalarFieldEnum | JobCategoryScalarFieldEnum[]
  }

  /**
   * Job.requirements
   */
  export type Job$requirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    where?: JobRequirementWhereInput
    orderBy?: JobRequirementOrderByWithRelationInput | JobRequirementOrderByWithRelationInput[]
    cursor?: JobRequirementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobRequirementScalarFieldEnum | JobRequirementScalarFieldEnum[]
  }

  /**
   * Job.interviews
   */
  export type Job$interviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model JobRequirement
   */

  export type AggregateJobRequirement = {
    _count: JobRequirementCountAggregateOutputType | null
    _avg: JobRequirementAvgAggregateOutputType | null
    _sum: JobRequirementSumAggregateOutputType | null
    _min: JobRequirementMinAggregateOutputType | null
    _max: JobRequirementMaxAggregateOutputType | null
  }

  export type JobRequirementAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
    skillMasterId: number | null
    yearsRequired: number | null
  }

  export type JobRequirementSumAggregateOutputType = {
    id: number | null
    jobId: number | null
    skillMasterId: number | null
    yearsRequired: number | null
  }

  export type JobRequirementMinAggregateOutputType = {
    id: number | null
    jobId: number | null
    skillMasterId: number | null
    importance: $Enums.ImportanceLevel | null
    proficiencyLevel: $Enums.ProficiencyLevel | null
    yearsRequired: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobRequirementMaxAggregateOutputType = {
    id: number | null
    jobId: number | null
    skillMasterId: number | null
    importance: $Enums.ImportanceLevel | null
    proficiencyLevel: $Enums.ProficiencyLevel | null
    yearsRequired: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JobRequirementCountAggregateOutputType = {
    id: number
    jobId: number
    skillMasterId: number
    importance: number
    proficiencyLevel: number
    yearsRequired: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JobRequirementAvgAggregateInputType = {
    id?: true
    jobId?: true
    skillMasterId?: true
    yearsRequired?: true
  }

  export type JobRequirementSumAggregateInputType = {
    id?: true
    jobId?: true
    skillMasterId?: true
    yearsRequired?: true
  }

  export type JobRequirementMinAggregateInputType = {
    id?: true
    jobId?: true
    skillMasterId?: true
    importance?: true
    proficiencyLevel?: true
    yearsRequired?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobRequirementMaxAggregateInputType = {
    id?: true
    jobId?: true
    skillMasterId?: true
    importance?: true
    proficiencyLevel?: true
    yearsRequired?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JobRequirementCountAggregateInputType = {
    id?: true
    jobId?: true
    skillMasterId?: true
    importance?: true
    proficiencyLevel?: true
    yearsRequired?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JobRequirementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobRequirement to aggregate.
     */
    where?: JobRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobRequirements to fetch.
     */
    orderBy?: JobRequirementOrderByWithRelationInput | JobRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JobRequirements
    **/
    _count?: true | JobRequirementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobRequirementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobRequirementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobRequirementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobRequirementMaxAggregateInputType
  }

  export type GetJobRequirementAggregateType<T extends JobRequirementAggregateArgs> = {
        [P in keyof T & keyof AggregateJobRequirement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobRequirement[P]>
      : GetScalarType<T[P], AggregateJobRequirement[P]>
  }




  export type JobRequirementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobRequirementWhereInput
    orderBy?: JobRequirementOrderByWithAggregationInput | JobRequirementOrderByWithAggregationInput[]
    by: JobRequirementScalarFieldEnum[] | JobRequirementScalarFieldEnum
    having?: JobRequirementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobRequirementCountAggregateInputType | true
    _avg?: JobRequirementAvgAggregateInputType
    _sum?: JobRequirementSumAggregateInputType
    _min?: JobRequirementMinAggregateInputType
    _max?: JobRequirementMaxAggregateInputType
  }

  export type JobRequirementGroupByOutputType = {
    id: number
    jobId: number
    skillMasterId: number
    importance: $Enums.ImportanceLevel
    proficiencyLevel: $Enums.ProficiencyLevel
    yearsRequired: number | null
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: JobRequirementCountAggregateOutputType | null
    _avg: JobRequirementAvgAggregateOutputType | null
    _sum: JobRequirementSumAggregateOutputType | null
    _min: JobRequirementMinAggregateOutputType | null
    _max: JobRequirementMaxAggregateOutputType | null
  }

  type GetJobRequirementGroupByPayload<T extends JobRequirementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobRequirementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobRequirementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobRequirementGroupByOutputType[P]>
            : GetScalarType<T[P], JobRequirementGroupByOutputType[P]>
        }
      >
    >


  export type JobRequirementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    skillMasterId?: boolean
    importance?: boolean
    proficiencyLevel?: boolean
    yearsRequired?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    skillMaster?: boolean | SkillMasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["jobRequirement"]>



  export type JobRequirementSelectScalar = {
    id?: boolean
    jobId?: boolean
    skillMasterId?: boolean
    importance?: boolean
    proficiencyLevel?: boolean
    yearsRequired?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JobRequirementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "jobId" | "skillMasterId" | "importance" | "proficiencyLevel" | "yearsRequired" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["jobRequirement"]>
  export type JobRequirementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    skillMaster?: boolean | SkillMasterDefaultArgs<ExtArgs>
  }

  export type $JobRequirementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JobRequirement"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      skillMaster: Prisma.$SkillMasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jobId: number
      skillMasterId: number
      importance: $Enums.ImportanceLevel
      proficiencyLevel: $Enums.ProficiencyLevel
      yearsRequired: number | null
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jobRequirement"]>
    composites: {}
  }

  type JobRequirementGetPayload<S extends boolean | null | undefined | JobRequirementDefaultArgs> = $Result.GetResult<Prisma.$JobRequirementPayload, S>

  type JobRequirementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JobRequirementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JobRequirementCountAggregateInputType | true
    }

  export interface JobRequirementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JobRequirement'], meta: { name: 'JobRequirement' } }
    /**
     * Find zero or one JobRequirement that matches the filter.
     * @param {JobRequirementFindUniqueArgs} args - Arguments to find a JobRequirement
     * @example
     * // Get one JobRequirement
     * const jobRequirement = await prisma.jobRequirement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobRequirementFindUniqueArgs>(args: SelectSubset<T, JobRequirementFindUniqueArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JobRequirement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JobRequirementFindUniqueOrThrowArgs} args - Arguments to find a JobRequirement
     * @example
     * // Get one JobRequirement
     * const jobRequirement = await prisma.jobRequirement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobRequirementFindUniqueOrThrowArgs>(args: SelectSubset<T, JobRequirementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobRequirement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobRequirementFindFirstArgs} args - Arguments to find a JobRequirement
     * @example
     * // Get one JobRequirement
     * const jobRequirement = await prisma.jobRequirement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobRequirementFindFirstArgs>(args?: SelectSubset<T, JobRequirementFindFirstArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JobRequirement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobRequirementFindFirstOrThrowArgs} args - Arguments to find a JobRequirement
     * @example
     * // Get one JobRequirement
     * const jobRequirement = await prisma.jobRequirement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobRequirementFindFirstOrThrowArgs>(args?: SelectSubset<T, JobRequirementFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JobRequirements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobRequirementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JobRequirements
     * const jobRequirements = await prisma.jobRequirement.findMany()
     * 
     * // Get first 10 JobRequirements
     * const jobRequirements = await prisma.jobRequirement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobRequirementWithIdOnly = await prisma.jobRequirement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobRequirementFindManyArgs>(args?: SelectSubset<T, JobRequirementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JobRequirement.
     * @param {JobRequirementCreateArgs} args - Arguments to create a JobRequirement.
     * @example
     * // Create one JobRequirement
     * const JobRequirement = await prisma.jobRequirement.create({
     *   data: {
     *     // ... data to create a JobRequirement
     *   }
     * })
     * 
     */
    create<T extends JobRequirementCreateArgs>(args: SelectSubset<T, JobRequirementCreateArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JobRequirements.
     * @param {JobRequirementCreateManyArgs} args - Arguments to create many JobRequirements.
     * @example
     * // Create many JobRequirements
     * const jobRequirement = await prisma.jobRequirement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobRequirementCreateManyArgs>(args?: SelectSubset<T, JobRequirementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a JobRequirement.
     * @param {JobRequirementDeleteArgs} args - Arguments to delete one JobRequirement.
     * @example
     * // Delete one JobRequirement
     * const JobRequirement = await prisma.jobRequirement.delete({
     *   where: {
     *     // ... filter to delete one JobRequirement
     *   }
     * })
     * 
     */
    delete<T extends JobRequirementDeleteArgs>(args: SelectSubset<T, JobRequirementDeleteArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JobRequirement.
     * @param {JobRequirementUpdateArgs} args - Arguments to update one JobRequirement.
     * @example
     * // Update one JobRequirement
     * const jobRequirement = await prisma.jobRequirement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobRequirementUpdateArgs>(args: SelectSubset<T, JobRequirementUpdateArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JobRequirements.
     * @param {JobRequirementDeleteManyArgs} args - Arguments to filter JobRequirements to delete.
     * @example
     * // Delete a few JobRequirements
     * const { count } = await prisma.jobRequirement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobRequirementDeleteManyArgs>(args?: SelectSubset<T, JobRequirementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JobRequirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobRequirementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JobRequirements
     * const jobRequirement = await prisma.jobRequirement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobRequirementUpdateManyArgs>(args: SelectSubset<T, JobRequirementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one JobRequirement.
     * @param {JobRequirementUpsertArgs} args - Arguments to update or create a JobRequirement.
     * @example
     * // Update or create a JobRequirement
     * const jobRequirement = await prisma.jobRequirement.upsert({
     *   create: {
     *     // ... data to create a JobRequirement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JobRequirement we want to update
     *   }
     * })
     */
    upsert<T extends JobRequirementUpsertArgs>(args: SelectSubset<T, JobRequirementUpsertArgs<ExtArgs>>): Prisma__JobRequirementClient<$Result.GetResult<Prisma.$JobRequirementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JobRequirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobRequirementCountArgs} args - Arguments to filter JobRequirements to count.
     * @example
     * // Count the number of JobRequirements
     * const count = await prisma.jobRequirement.count({
     *   where: {
     *     // ... the filter for the JobRequirements we want to count
     *   }
     * })
    **/
    count<T extends JobRequirementCountArgs>(
      args?: Subset<T, JobRequirementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobRequirementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JobRequirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobRequirementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobRequirementAggregateArgs>(args: Subset<T, JobRequirementAggregateArgs>): Prisma.PrismaPromise<GetJobRequirementAggregateType<T>>

    /**
     * Group by JobRequirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobRequirementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobRequirementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobRequirementGroupByArgs['orderBy'] }
        : { orderBy?: JobRequirementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobRequirementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobRequirementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JobRequirement model
   */
  readonly fields: JobRequirementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JobRequirement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobRequirementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skillMaster<T extends SkillMasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillMasterDefaultArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JobRequirement model
   */
  interface JobRequirementFieldRefs {
    readonly id: FieldRef<"JobRequirement", 'Int'>
    readonly jobId: FieldRef<"JobRequirement", 'Int'>
    readonly skillMasterId: FieldRef<"JobRequirement", 'Int'>
    readonly importance: FieldRef<"JobRequirement", 'ImportanceLevel'>
    readonly proficiencyLevel: FieldRef<"JobRequirement", 'ProficiencyLevel'>
    readonly yearsRequired: FieldRef<"JobRequirement", 'Int'>
    readonly description: FieldRef<"JobRequirement", 'String'>
    readonly createdAt: FieldRef<"JobRequirement", 'DateTime'>
    readonly updatedAt: FieldRef<"JobRequirement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * JobRequirement findUnique
   */
  export type JobRequirementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * Filter, which JobRequirement to fetch.
     */
    where: JobRequirementWhereUniqueInput
  }

  /**
   * JobRequirement findUniqueOrThrow
   */
  export type JobRequirementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * Filter, which JobRequirement to fetch.
     */
    where: JobRequirementWhereUniqueInput
  }

  /**
   * JobRequirement findFirst
   */
  export type JobRequirementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * Filter, which JobRequirement to fetch.
     */
    where?: JobRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobRequirements to fetch.
     */
    orderBy?: JobRequirementOrderByWithRelationInput | JobRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobRequirements.
     */
    cursor?: JobRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobRequirements.
     */
    distinct?: JobRequirementScalarFieldEnum | JobRequirementScalarFieldEnum[]
  }

  /**
   * JobRequirement findFirstOrThrow
   */
  export type JobRequirementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * Filter, which JobRequirement to fetch.
     */
    where?: JobRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobRequirements to fetch.
     */
    orderBy?: JobRequirementOrderByWithRelationInput | JobRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JobRequirements.
     */
    cursor?: JobRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JobRequirements.
     */
    distinct?: JobRequirementScalarFieldEnum | JobRequirementScalarFieldEnum[]
  }

  /**
   * JobRequirement findMany
   */
  export type JobRequirementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * Filter, which JobRequirements to fetch.
     */
    where?: JobRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JobRequirements to fetch.
     */
    orderBy?: JobRequirementOrderByWithRelationInput | JobRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JobRequirements.
     */
    cursor?: JobRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JobRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JobRequirements.
     */
    skip?: number
    distinct?: JobRequirementScalarFieldEnum | JobRequirementScalarFieldEnum[]
  }

  /**
   * JobRequirement create
   */
  export type JobRequirementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * The data needed to create a JobRequirement.
     */
    data: XOR<JobRequirementCreateInput, JobRequirementUncheckedCreateInput>
  }

  /**
   * JobRequirement createMany
   */
  export type JobRequirementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JobRequirements.
     */
    data: JobRequirementCreateManyInput | JobRequirementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * JobRequirement update
   */
  export type JobRequirementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * The data needed to update a JobRequirement.
     */
    data: XOR<JobRequirementUpdateInput, JobRequirementUncheckedUpdateInput>
    /**
     * Choose, which JobRequirement to update.
     */
    where: JobRequirementWhereUniqueInput
  }

  /**
   * JobRequirement updateMany
   */
  export type JobRequirementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JobRequirements.
     */
    data: XOR<JobRequirementUpdateManyMutationInput, JobRequirementUncheckedUpdateManyInput>
    /**
     * Filter which JobRequirements to update
     */
    where?: JobRequirementWhereInput
    /**
     * Limit how many JobRequirements to update.
     */
    limit?: number
  }

  /**
   * JobRequirement upsert
   */
  export type JobRequirementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * The filter to search for the JobRequirement to update in case it exists.
     */
    where: JobRequirementWhereUniqueInput
    /**
     * In case the JobRequirement found by the `where` argument doesn't exist, create a new JobRequirement with this data.
     */
    create: XOR<JobRequirementCreateInput, JobRequirementUncheckedCreateInput>
    /**
     * In case the JobRequirement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobRequirementUpdateInput, JobRequirementUncheckedUpdateInput>
  }

  /**
   * JobRequirement delete
   */
  export type JobRequirementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
    /**
     * Filter which JobRequirement to delete.
     */
    where: JobRequirementWhereUniqueInput
  }

  /**
   * JobRequirement deleteMany
   */
  export type JobRequirementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JobRequirements to delete
     */
    where?: JobRequirementWhereInput
    /**
     * Limit how many JobRequirements to delete.
     */
    limit?: number
  }

  /**
   * JobRequirement without action
   */
  export type JobRequirementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobRequirement
     */
    select?: JobRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JobRequirement
     */
    omit?: JobRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobRequirementInclude<ExtArgs> | null
  }


  /**
   * Model ApplicantSkill
   */

  export type AggregateApplicantSkill = {
    _count: ApplicantSkillCountAggregateOutputType | null
    _avg: ApplicantSkillAvgAggregateOutputType | null
    _sum: ApplicantSkillSumAggregateOutputType | null
    _min: ApplicantSkillMinAggregateOutputType | null
    _max: ApplicantSkillMaxAggregateOutputType | null
  }

  export type ApplicantSkillAvgAggregateOutputType = {
    id: number | null
    applicantId: number | null
    skillMasterId: number | null
    yearsExperience: number | null
  }

  export type ApplicantSkillSumAggregateOutputType = {
    id: number | null
    applicantId: number | null
    skillMasterId: number | null
    yearsExperience: number | null
  }

  export type ApplicantSkillMinAggregateOutputType = {
    id: number | null
    applicantId: number | null
    skillMasterId: number | null
    proficiency: $Enums.ProficiencyLevel | null
    yearsExperience: number | null
    lastUsed: Date | null
    isCertified: boolean | null
    certificationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicantSkillMaxAggregateOutputType = {
    id: number | null
    applicantId: number | null
    skillMasterId: number | null
    proficiency: $Enums.ProficiencyLevel | null
    yearsExperience: number | null
    lastUsed: Date | null
    isCertified: boolean | null
    certificationName: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicantSkillCountAggregateOutputType = {
    id: number
    applicantId: number
    skillMasterId: number
    proficiency: number
    yearsExperience: number
    lastUsed: number
    isCertified: number
    certificationName: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApplicantSkillAvgAggregateInputType = {
    id?: true
    applicantId?: true
    skillMasterId?: true
    yearsExperience?: true
  }

  export type ApplicantSkillSumAggregateInputType = {
    id?: true
    applicantId?: true
    skillMasterId?: true
    yearsExperience?: true
  }

  export type ApplicantSkillMinAggregateInputType = {
    id?: true
    applicantId?: true
    skillMasterId?: true
    proficiency?: true
    yearsExperience?: true
    lastUsed?: true
    isCertified?: true
    certificationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicantSkillMaxAggregateInputType = {
    id?: true
    applicantId?: true
    skillMasterId?: true
    proficiency?: true
    yearsExperience?: true
    lastUsed?: true
    isCertified?: true
    certificationName?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicantSkillCountAggregateInputType = {
    id?: true
    applicantId?: true
    skillMasterId?: true
    proficiency?: true
    yearsExperience?: true
    lastUsed?: true
    isCertified?: true
    certificationName?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApplicantSkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicantSkill to aggregate.
     */
    where?: ApplicantSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantSkills to fetch.
     */
    orderBy?: ApplicantSkillOrderByWithRelationInput | ApplicantSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicantSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApplicantSkills
    **/
    _count?: true | ApplicantSkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicantSkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicantSkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicantSkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicantSkillMaxAggregateInputType
  }

  export type GetApplicantSkillAggregateType<T extends ApplicantSkillAggregateArgs> = {
        [P in keyof T & keyof AggregateApplicantSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplicantSkill[P]>
      : GetScalarType<T[P], AggregateApplicantSkill[P]>
  }




  export type ApplicantSkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicantSkillWhereInput
    orderBy?: ApplicantSkillOrderByWithAggregationInput | ApplicantSkillOrderByWithAggregationInput[]
    by: ApplicantSkillScalarFieldEnum[] | ApplicantSkillScalarFieldEnum
    having?: ApplicantSkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicantSkillCountAggregateInputType | true
    _avg?: ApplicantSkillAvgAggregateInputType
    _sum?: ApplicantSkillSumAggregateInputType
    _min?: ApplicantSkillMinAggregateInputType
    _max?: ApplicantSkillMaxAggregateInputType
  }

  export type ApplicantSkillGroupByOutputType = {
    id: number
    applicantId: number
    skillMasterId: number
    proficiency: $Enums.ProficiencyLevel
    yearsExperience: number | null
    lastUsed: Date | null
    isCertified: boolean
    certificationName: string | null
    createdAt: Date
    updatedAt: Date
    _count: ApplicantSkillCountAggregateOutputType | null
    _avg: ApplicantSkillAvgAggregateOutputType | null
    _sum: ApplicantSkillSumAggregateOutputType | null
    _min: ApplicantSkillMinAggregateOutputType | null
    _max: ApplicantSkillMaxAggregateOutputType | null
  }

  type GetApplicantSkillGroupByPayload<T extends ApplicantSkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicantSkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicantSkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicantSkillGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicantSkillGroupByOutputType[P]>
        }
      >
    >


  export type ApplicantSkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicantId?: boolean
    skillMasterId?: boolean
    proficiency?: boolean
    yearsExperience?: boolean
    lastUsed?: boolean
    isCertified?: boolean
    certificationName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
    skillMaster?: boolean | SkillMasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["applicantSkill"]>



  export type ApplicantSkillSelectScalar = {
    id?: boolean
    applicantId?: boolean
    skillMasterId?: boolean
    proficiency?: boolean
    yearsExperience?: boolean
    lastUsed?: boolean
    isCertified?: boolean
    certificationName?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApplicantSkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicantId" | "skillMasterId" | "proficiency" | "yearsExperience" | "lastUsed" | "isCertified" | "certificationName" | "createdAt" | "updatedAt", ExtArgs["result"]["applicantSkill"]>
  export type ApplicantSkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
    skillMaster?: boolean | SkillMasterDefaultArgs<ExtArgs>
  }

  export type $ApplicantSkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApplicantSkill"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
      skillMaster: Prisma.$SkillMasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      applicantId: number
      skillMasterId: number
      proficiency: $Enums.ProficiencyLevel
      yearsExperience: number | null
      lastUsed: Date | null
      isCertified: boolean
      certificationName: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["applicantSkill"]>
    composites: {}
  }

  type ApplicantSkillGetPayload<S extends boolean | null | undefined | ApplicantSkillDefaultArgs> = $Result.GetResult<Prisma.$ApplicantSkillPayload, S>

  type ApplicantSkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicantSkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicantSkillCountAggregateInputType | true
    }

  export interface ApplicantSkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApplicantSkill'], meta: { name: 'ApplicantSkill' } }
    /**
     * Find zero or one ApplicantSkill that matches the filter.
     * @param {ApplicantSkillFindUniqueArgs} args - Arguments to find a ApplicantSkill
     * @example
     * // Get one ApplicantSkill
     * const applicantSkill = await prisma.applicantSkill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicantSkillFindUniqueArgs>(args: SelectSubset<T, ApplicantSkillFindUniqueArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApplicantSkill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicantSkillFindUniqueOrThrowArgs} args - Arguments to find a ApplicantSkill
     * @example
     * // Get one ApplicantSkill
     * const applicantSkill = await prisma.applicantSkill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicantSkillFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicantSkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicantSkill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantSkillFindFirstArgs} args - Arguments to find a ApplicantSkill
     * @example
     * // Get one ApplicantSkill
     * const applicantSkill = await prisma.applicantSkill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicantSkillFindFirstArgs>(args?: SelectSubset<T, ApplicantSkillFindFirstArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApplicantSkill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantSkillFindFirstOrThrowArgs} args - Arguments to find a ApplicantSkill
     * @example
     * // Get one ApplicantSkill
     * const applicantSkill = await prisma.applicantSkill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicantSkillFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicantSkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApplicantSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantSkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApplicantSkills
     * const applicantSkills = await prisma.applicantSkill.findMany()
     * 
     * // Get first 10 ApplicantSkills
     * const applicantSkills = await prisma.applicantSkill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicantSkillWithIdOnly = await prisma.applicantSkill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicantSkillFindManyArgs>(args?: SelectSubset<T, ApplicantSkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApplicantSkill.
     * @param {ApplicantSkillCreateArgs} args - Arguments to create a ApplicantSkill.
     * @example
     * // Create one ApplicantSkill
     * const ApplicantSkill = await prisma.applicantSkill.create({
     *   data: {
     *     // ... data to create a ApplicantSkill
     *   }
     * })
     * 
     */
    create<T extends ApplicantSkillCreateArgs>(args: SelectSubset<T, ApplicantSkillCreateArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApplicantSkills.
     * @param {ApplicantSkillCreateManyArgs} args - Arguments to create many ApplicantSkills.
     * @example
     * // Create many ApplicantSkills
     * const applicantSkill = await prisma.applicantSkill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicantSkillCreateManyArgs>(args?: SelectSubset<T, ApplicantSkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ApplicantSkill.
     * @param {ApplicantSkillDeleteArgs} args - Arguments to delete one ApplicantSkill.
     * @example
     * // Delete one ApplicantSkill
     * const ApplicantSkill = await prisma.applicantSkill.delete({
     *   where: {
     *     // ... filter to delete one ApplicantSkill
     *   }
     * })
     * 
     */
    delete<T extends ApplicantSkillDeleteArgs>(args: SelectSubset<T, ApplicantSkillDeleteArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApplicantSkill.
     * @param {ApplicantSkillUpdateArgs} args - Arguments to update one ApplicantSkill.
     * @example
     * // Update one ApplicantSkill
     * const applicantSkill = await prisma.applicantSkill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicantSkillUpdateArgs>(args: SelectSubset<T, ApplicantSkillUpdateArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApplicantSkills.
     * @param {ApplicantSkillDeleteManyArgs} args - Arguments to filter ApplicantSkills to delete.
     * @example
     * // Delete a few ApplicantSkills
     * const { count } = await prisma.applicantSkill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicantSkillDeleteManyArgs>(args?: SelectSubset<T, ApplicantSkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApplicantSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantSkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApplicantSkills
     * const applicantSkill = await prisma.applicantSkill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicantSkillUpdateManyArgs>(args: SelectSubset<T, ApplicantSkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApplicantSkill.
     * @param {ApplicantSkillUpsertArgs} args - Arguments to update or create a ApplicantSkill.
     * @example
     * // Update or create a ApplicantSkill
     * const applicantSkill = await prisma.applicantSkill.upsert({
     *   create: {
     *     // ... data to create a ApplicantSkill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApplicantSkill we want to update
     *   }
     * })
     */
    upsert<T extends ApplicantSkillUpsertArgs>(args: SelectSubset<T, ApplicantSkillUpsertArgs<ExtArgs>>): Prisma__ApplicantSkillClient<$Result.GetResult<Prisma.$ApplicantSkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApplicantSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantSkillCountArgs} args - Arguments to filter ApplicantSkills to count.
     * @example
     * // Count the number of ApplicantSkills
     * const count = await prisma.applicantSkill.count({
     *   where: {
     *     // ... the filter for the ApplicantSkills we want to count
     *   }
     * })
    **/
    count<T extends ApplicantSkillCountArgs>(
      args?: Subset<T, ApplicantSkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicantSkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApplicantSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantSkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicantSkillAggregateArgs>(args: Subset<T, ApplicantSkillAggregateArgs>): Prisma.PrismaPromise<GetApplicantSkillAggregateType<T>>

    /**
     * Group by ApplicantSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicantSkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicantSkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicantSkillGroupByArgs['orderBy'] }
        : { orderBy?: ApplicantSkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicantSkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicantSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApplicantSkill model
   */
  readonly fields: ApplicantSkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApplicantSkill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicantSkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    skillMaster<T extends SkillMasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillMasterDefaultArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApplicantSkill model
   */
  interface ApplicantSkillFieldRefs {
    readonly id: FieldRef<"ApplicantSkill", 'Int'>
    readonly applicantId: FieldRef<"ApplicantSkill", 'Int'>
    readonly skillMasterId: FieldRef<"ApplicantSkill", 'Int'>
    readonly proficiency: FieldRef<"ApplicantSkill", 'ProficiencyLevel'>
    readonly yearsExperience: FieldRef<"ApplicantSkill", 'Int'>
    readonly lastUsed: FieldRef<"ApplicantSkill", 'DateTime'>
    readonly isCertified: FieldRef<"ApplicantSkill", 'Boolean'>
    readonly certificationName: FieldRef<"ApplicantSkill", 'String'>
    readonly createdAt: FieldRef<"ApplicantSkill", 'DateTime'>
    readonly updatedAt: FieldRef<"ApplicantSkill", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApplicantSkill findUnique
   */
  export type ApplicantSkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantSkill to fetch.
     */
    where: ApplicantSkillWhereUniqueInput
  }

  /**
   * ApplicantSkill findUniqueOrThrow
   */
  export type ApplicantSkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantSkill to fetch.
     */
    where: ApplicantSkillWhereUniqueInput
  }

  /**
   * ApplicantSkill findFirst
   */
  export type ApplicantSkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantSkill to fetch.
     */
    where?: ApplicantSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantSkills to fetch.
     */
    orderBy?: ApplicantSkillOrderByWithRelationInput | ApplicantSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicantSkills.
     */
    cursor?: ApplicantSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicantSkills.
     */
    distinct?: ApplicantSkillScalarFieldEnum | ApplicantSkillScalarFieldEnum[]
  }

  /**
   * ApplicantSkill findFirstOrThrow
   */
  export type ApplicantSkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantSkill to fetch.
     */
    where?: ApplicantSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantSkills to fetch.
     */
    orderBy?: ApplicantSkillOrderByWithRelationInput | ApplicantSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApplicantSkills.
     */
    cursor?: ApplicantSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApplicantSkills.
     */
    distinct?: ApplicantSkillScalarFieldEnum | ApplicantSkillScalarFieldEnum[]
  }

  /**
   * ApplicantSkill findMany
   */
  export type ApplicantSkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * Filter, which ApplicantSkills to fetch.
     */
    where?: ApplicantSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApplicantSkills to fetch.
     */
    orderBy?: ApplicantSkillOrderByWithRelationInput | ApplicantSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApplicantSkills.
     */
    cursor?: ApplicantSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApplicantSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApplicantSkills.
     */
    skip?: number
    distinct?: ApplicantSkillScalarFieldEnum | ApplicantSkillScalarFieldEnum[]
  }

  /**
   * ApplicantSkill create
   */
  export type ApplicantSkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * The data needed to create a ApplicantSkill.
     */
    data: XOR<ApplicantSkillCreateInput, ApplicantSkillUncheckedCreateInput>
  }

  /**
   * ApplicantSkill createMany
   */
  export type ApplicantSkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApplicantSkills.
     */
    data: ApplicantSkillCreateManyInput | ApplicantSkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApplicantSkill update
   */
  export type ApplicantSkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * The data needed to update a ApplicantSkill.
     */
    data: XOR<ApplicantSkillUpdateInput, ApplicantSkillUncheckedUpdateInput>
    /**
     * Choose, which ApplicantSkill to update.
     */
    where: ApplicantSkillWhereUniqueInput
  }

  /**
   * ApplicantSkill updateMany
   */
  export type ApplicantSkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApplicantSkills.
     */
    data: XOR<ApplicantSkillUpdateManyMutationInput, ApplicantSkillUncheckedUpdateManyInput>
    /**
     * Filter which ApplicantSkills to update
     */
    where?: ApplicantSkillWhereInput
    /**
     * Limit how many ApplicantSkills to update.
     */
    limit?: number
  }

  /**
   * ApplicantSkill upsert
   */
  export type ApplicantSkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * The filter to search for the ApplicantSkill to update in case it exists.
     */
    where: ApplicantSkillWhereUniqueInput
    /**
     * In case the ApplicantSkill found by the `where` argument doesn't exist, create a new ApplicantSkill with this data.
     */
    create: XOR<ApplicantSkillCreateInput, ApplicantSkillUncheckedCreateInput>
    /**
     * In case the ApplicantSkill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicantSkillUpdateInput, ApplicantSkillUncheckedUpdateInput>
  }

  /**
   * ApplicantSkill delete
   */
  export type ApplicantSkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
    /**
     * Filter which ApplicantSkill to delete.
     */
    where: ApplicantSkillWhereUniqueInput
  }

  /**
   * ApplicantSkill deleteMany
   */
  export type ApplicantSkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApplicantSkills to delete
     */
    where?: ApplicantSkillWhereInput
    /**
     * Limit how many ApplicantSkills to delete.
     */
    limit?: number
  }

  /**
   * ApplicantSkill without action
   */
  export type ApplicantSkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApplicantSkill
     */
    select?: ApplicantSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApplicantSkill
     */
    omit?: ApplicantSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantSkillInclude<ExtArgs> | null
  }


  /**
   * Model Application
   */

  export type AggregateApplication = {
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  export type ApplicationAvgAggregateOutputType = {
    id: number | null
    jobId: number | null
    applicantId: number | null
    reviewedBy: number | null
  }

  export type ApplicationSumAggregateOutputType = {
    id: number | null
    jobId: number | null
    applicantId: number | null
    reviewedBy: number | null
  }

  export type ApplicationMinAggregateOutputType = {
    id: number | null
    status: $Enums.ApplicationStatus | null
    jobId: number | null
    applicantId: number | null
    coverLetter: string | null
    appliedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: number | null
    rejectionReason: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationMaxAggregateOutputType = {
    id: number | null
    status: $Enums.ApplicationStatus | null
    jobId: number | null
    applicantId: number | null
    coverLetter: string | null
    appliedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: number | null
    rejectionReason: string | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApplicationCountAggregateOutputType = {
    id: number
    status: number
    jobId: number
    applicantId: number
    coverLetter: number
    appliedAt: number
    reviewedAt: number
    reviewedBy: number
    rejectionReason: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApplicationAvgAggregateInputType = {
    id?: true
    jobId?: true
    applicantId?: true
    reviewedBy?: true
  }

  export type ApplicationSumAggregateInputType = {
    id?: true
    jobId?: true
    applicantId?: true
    reviewedBy?: true
  }

  export type ApplicationMinAggregateInputType = {
    id?: true
    status?: true
    jobId?: true
    applicantId?: true
    coverLetter?: true
    appliedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    rejectionReason?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationMaxAggregateInputType = {
    id?: true
    status?: true
    jobId?: true
    applicantId?: true
    coverLetter?: true
    appliedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    rejectionReason?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApplicationCountAggregateInputType = {
    id?: true
    status?: true
    jobId?: true
    applicantId?: true
    coverLetter?: true
    appliedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    rejectionReason?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApplicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Application to aggregate.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Applications
    **/
    _count?: true | ApplicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApplicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApplicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApplicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApplicationMaxAggregateInputType
  }

  export type GetApplicationAggregateType<T extends ApplicationAggregateArgs> = {
        [P in keyof T & keyof AggregateApplication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApplication[P]>
      : GetScalarType<T[P], AggregateApplication[P]>
  }




  export type ApplicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApplicationWhereInput
    orderBy?: ApplicationOrderByWithAggregationInput | ApplicationOrderByWithAggregationInput[]
    by: ApplicationScalarFieldEnum[] | ApplicationScalarFieldEnum
    having?: ApplicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApplicationCountAggregateInputType | true
    _avg?: ApplicationAvgAggregateInputType
    _sum?: ApplicationSumAggregateInputType
    _min?: ApplicationMinAggregateInputType
    _max?: ApplicationMaxAggregateInputType
  }

  export type ApplicationGroupByOutputType = {
    id: number
    status: $Enums.ApplicationStatus
    jobId: number
    applicantId: number
    coverLetter: string | null
    appliedAt: Date
    reviewedAt: Date | null
    reviewedBy: number | null
    rejectionReason: string | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ApplicationCountAggregateOutputType | null
    _avg: ApplicationAvgAggregateOutputType | null
    _sum: ApplicationSumAggregateOutputType | null
    _min: ApplicationMinAggregateOutputType | null
    _max: ApplicationMaxAggregateOutputType | null
  }

  type GetApplicationGroupByPayload<T extends ApplicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApplicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApplicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
            : GetScalarType<T[P], ApplicationGroupByOutputType[P]>
        }
      >
    >


  export type ApplicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    jobId?: boolean
    applicantId?: boolean
    coverLetter?: boolean
    appliedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    rejectionReason?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
    notifications?: boolean | Application$notificationsArgs<ExtArgs>
    interviews?: boolean | Application$interviewsArgs<ExtArgs>
    emailLogs?: boolean | Application$emailLogsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["application"]>



  export type ApplicationSelectScalar = {
    id?: boolean
    status?: boolean
    jobId?: boolean
    applicantId?: boolean
    coverLetter?: boolean
    appliedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    rejectionReason?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApplicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "status" | "jobId" | "applicantId" | "coverLetter" | "appliedAt" | "reviewedAt" | "reviewedBy" | "rejectionReason" | "notes" | "createdAt" | "updatedAt", ExtArgs["result"]["application"]>
  export type ApplicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
    notifications?: boolean | Application$notificationsArgs<ExtArgs>
    interviews?: boolean | Application$interviewsArgs<ExtArgs>
    emailLogs?: boolean | Application$emailLogsArgs<ExtArgs>
    _count?: boolean | ApplicationCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ApplicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Application"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
      applicant: Prisma.$ApplicantPayload<ExtArgs>
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      interviews: Prisma.$InterviewPayload<ExtArgs>[]
      emailLogs: Prisma.$EmailLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      status: $Enums.ApplicationStatus
      jobId: number
      applicantId: number
      coverLetter: string | null
      appliedAt: Date
      reviewedAt: Date | null
      reviewedBy: number | null
      rejectionReason: string | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["application"]>
    composites: {}
  }

  type ApplicationGetPayload<S extends boolean | null | undefined | ApplicationDefaultArgs> = $Result.GetResult<Prisma.$ApplicationPayload, S>

  type ApplicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApplicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApplicationCountAggregateInputType | true
    }

  export interface ApplicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Application'], meta: { name: 'Application' } }
    /**
     * Find zero or one Application that matches the filter.
     * @param {ApplicationFindUniqueArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApplicationFindUniqueArgs>(args: SelectSubset<T, ApplicationFindUniqueArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Application that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApplicationFindUniqueOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApplicationFindUniqueOrThrowArgs>(args: SelectSubset<T, ApplicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApplicationFindFirstArgs>(args?: SelectSubset<T, ApplicationFindFirstArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Application that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindFirstOrThrowArgs} args - Arguments to find a Application
     * @example
     * // Get one Application
     * const application = await prisma.application.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApplicationFindFirstOrThrowArgs>(args?: SelectSubset<T, ApplicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Applications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Applications
     * const applications = await prisma.application.findMany()
     * 
     * // Get first 10 Applications
     * const applications = await prisma.application.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const applicationWithIdOnly = await prisma.application.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApplicationFindManyArgs>(args?: SelectSubset<T, ApplicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Application.
     * @param {ApplicationCreateArgs} args - Arguments to create a Application.
     * @example
     * // Create one Application
     * const Application = await prisma.application.create({
     *   data: {
     *     // ... data to create a Application
     *   }
     * })
     * 
     */
    create<T extends ApplicationCreateArgs>(args: SelectSubset<T, ApplicationCreateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Applications.
     * @param {ApplicationCreateManyArgs} args - Arguments to create many Applications.
     * @example
     * // Create many Applications
     * const application = await prisma.application.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApplicationCreateManyArgs>(args?: SelectSubset<T, ApplicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Application.
     * @param {ApplicationDeleteArgs} args - Arguments to delete one Application.
     * @example
     * // Delete one Application
     * const Application = await prisma.application.delete({
     *   where: {
     *     // ... filter to delete one Application
     *   }
     * })
     * 
     */
    delete<T extends ApplicationDeleteArgs>(args: SelectSubset<T, ApplicationDeleteArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Application.
     * @param {ApplicationUpdateArgs} args - Arguments to update one Application.
     * @example
     * // Update one Application
     * const application = await prisma.application.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApplicationUpdateArgs>(args: SelectSubset<T, ApplicationUpdateArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Applications.
     * @param {ApplicationDeleteManyArgs} args - Arguments to filter Applications to delete.
     * @example
     * // Delete a few Applications
     * const { count } = await prisma.application.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApplicationDeleteManyArgs>(args?: SelectSubset<T, ApplicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Applications
     * const application = await prisma.application.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApplicationUpdateManyArgs>(args: SelectSubset<T, ApplicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Application.
     * @param {ApplicationUpsertArgs} args - Arguments to update or create a Application.
     * @example
     * // Update or create a Application
     * const application = await prisma.application.upsert({
     *   create: {
     *     // ... data to create a Application
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Application we want to update
     *   }
     * })
     */
    upsert<T extends ApplicationUpsertArgs>(args: SelectSubset<T, ApplicationUpsertArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Applications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationCountArgs} args - Arguments to filter Applications to count.
     * @example
     * // Count the number of Applications
     * const count = await prisma.application.count({
     *   where: {
     *     // ... the filter for the Applications we want to count
     *   }
     * })
    **/
    count<T extends ApplicationCountArgs>(
      args?: Subset<T, ApplicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApplicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApplicationAggregateArgs>(args: Subset<T, ApplicationAggregateArgs>): Prisma.PrismaPromise<GetApplicationAggregateType<T>>

    /**
     * Group by Application.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApplicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApplicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApplicationGroupByArgs['orderBy'] }
        : { orderBy?: ApplicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApplicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApplicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Application model
   */
  readonly fields: ApplicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Application.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApplicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notifications<T extends Application$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Application$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    interviews<T extends Application$interviewsArgs<ExtArgs> = {}>(args?: Subset<T, Application$interviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    emailLogs<T extends Application$emailLogsArgs<ExtArgs> = {}>(args?: Subset<T, Application$emailLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Application model
   */
  interface ApplicationFieldRefs {
    readonly id: FieldRef<"Application", 'Int'>
    readonly status: FieldRef<"Application", 'ApplicationStatus'>
    readonly jobId: FieldRef<"Application", 'Int'>
    readonly applicantId: FieldRef<"Application", 'Int'>
    readonly coverLetter: FieldRef<"Application", 'String'>
    readonly appliedAt: FieldRef<"Application", 'DateTime'>
    readonly reviewedAt: FieldRef<"Application", 'DateTime'>
    readonly reviewedBy: FieldRef<"Application", 'Int'>
    readonly rejectionReason: FieldRef<"Application", 'String'>
    readonly notes: FieldRef<"Application", 'String'>
    readonly createdAt: FieldRef<"Application", 'DateTime'>
    readonly updatedAt: FieldRef<"Application", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Application findUnique
   */
  export type ApplicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findUniqueOrThrow
   */
  export type ApplicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application findFirst
   */
  export type ApplicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findFirstOrThrow
   */
  export type ApplicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Application to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Applications.
     */
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application findMany
   */
  export type ApplicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter, which Applications to fetch.
     */
    where?: ApplicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Applications to fetch.
     */
    orderBy?: ApplicationOrderByWithRelationInput | ApplicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Applications.
     */
    cursor?: ApplicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Applications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Applications.
     */
    skip?: number
    distinct?: ApplicationScalarFieldEnum | ApplicationScalarFieldEnum[]
  }

  /**
   * Application create
   */
  export type ApplicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Application.
     */
    data: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
  }

  /**
   * Application createMany
   */
  export type ApplicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Applications.
     */
    data: ApplicationCreateManyInput | ApplicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Application update
   */
  export type ApplicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Application.
     */
    data: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
    /**
     * Choose, which Application to update.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application updateMany
   */
  export type ApplicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Applications.
     */
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyInput>
    /**
     * Filter which Applications to update
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to update.
     */
    limit?: number
  }

  /**
   * Application upsert
   */
  export type ApplicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Application to update in case it exists.
     */
    where: ApplicationWhereUniqueInput
    /**
     * In case the Application found by the `where` argument doesn't exist, create a new Application with this data.
     */
    create: XOR<ApplicationCreateInput, ApplicationUncheckedCreateInput>
    /**
     * In case the Application was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApplicationUpdateInput, ApplicationUncheckedUpdateInput>
  }

  /**
   * Application delete
   */
  export type ApplicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    /**
     * Filter which Application to delete.
     */
    where: ApplicationWhereUniqueInput
  }

  /**
   * Application deleteMany
   */
  export type ApplicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Applications to delete
     */
    where?: ApplicationWhereInput
    /**
     * Limit how many Applications to delete.
     */
    limit?: number
  }

  /**
   * Application.notifications
   */
  export type Application$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Application.interviews
   */
  export type Application$interviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    cursor?: InterviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Application.emailLogs
   */
  export type Application$emailLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    cursor?: EmailLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * Application without action
   */
  export type ApplicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    applicantId: number | null
    employerId: number | null
    applicationId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    applicantId: number | null
    employerId: number | null
    applicationId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
    readAt: Date | null
    expiresAt: Date | null
    applicantId: number | null
    employerId: number | null
    applicationId: number | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
    readAt: Date | null
    expiresAt: Date | null
    applicantId: number | null
    employerId: number | null
    applicationId: number | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    type: number
    title: number
    message: number
    isRead: number
    createdAt: number
    readAt: number
    expiresAt: number
    applicantId: number
    employerId: number
    applicationId: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    applicantId?: true
    employerId?: true
    applicationId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    applicantId?: true
    employerId?: true
    applicationId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
    readAt?: true
    expiresAt?: true
    applicantId?: true
    employerId?: true
    applicationId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
    readAt?: true
    expiresAt?: true
    applicantId?: true
    employerId?: true
    applicationId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    createdAt?: true
    readAt?: true
    expiresAt?: true
    applicantId?: true
    employerId?: true
    applicationId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead: boolean
    createdAt: Date
    readAt: Date | null
    expiresAt: Date | null
    applicantId: number | null
    employerId: number | null
    applicationId: number | null
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    readAt?: boolean
    expiresAt?: boolean
    applicantId?: boolean
    employerId?: boolean
    applicationId?: boolean
    applicant?: boolean | Notification$applicantArgs<ExtArgs>
    employer?: boolean | Notification$employerArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>



  export type NotificationSelectScalar = {
    id?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    isRead?: boolean
    createdAt?: boolean
    readAt?: boolean
    expiresAt?: boolean
    applicantId?: boolean
    employerId?: boolean
    applicationId?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "title" | "message" | "isRead" | "createdAt" | "readAt" | "expiresAt" | "applicantId" | "employerId" | "applicationId", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | Notification$applicantArgs<ExtArgs>
    employer?: boolean | Notification$employerArgs<ExtArgs>
    application?: boolean | Notification$applicationArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs> | null
      employer: Prisma.$EmployerPayload<ExtArgs> | null
      application: Prisma.$ApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: $Enums.NotificationType
      title: string
      message: string
      isRead: boolean
      createdAt: Date
      readAt: Date | null
      expiresAt: Date | null
      applicantId: number | null
      employerId: number | null
      applicationId: number | null
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends Notification$applicantArgs<ExtArgs> = {}>(args?: Subset<T, Notification$applicantArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    employer<T extends Notification$employerArgs<ExtArgs> = {}>(args?: Subset<T, Notification$employerArgs<ExtArgs>>): Prisma__EmployerClient<$Result.GetResult<Prisma.$EmployerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    application<T extends Notification$applicationArgs<ExtArgs> = {}>(args?: Subset<T, Notification$applicationArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly readAt: FieldRef<"Notification", 'DateTime'>
    readonly expiresAt: FieldRef<"Notification", 'DateTime'>
    readonly applicantId: FieldRef<"Notification", 'Int'>
    readonly employerId: FieldRef<"Notification", 'Int'>
    readonly applicationId: FieldRef<"Notification", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification.applicant
   */
  export type Notification$applicantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Applicant
     */
    select?: ApplicantSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Applicant
     */
    omit?: ApplicantOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicantInclude<ExtArgs> | null
    where?: ApplicantWhereInput
  }

  /**
   * Notification.employer
   */
  export type Notification$employerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Employer
     */
    select?: EmployerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Employer
     */
    omit?: EmployerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmployerInclude<ExtArgs> | null
    where?: EmployerWhereInput
  }

  /**
   * Notification.application
   */
  export type Notification$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AcademicQualification
   */

  export type AggregateAcademicQualification = {
    _count: AcademicQualificationCountAggregateOutputType | null
    _avg: AcademicQualificationAvgAggregateOutputType | null
    _sum: AcademicQualificationSumAggregateOutputType | null
    _min: AcademicQualificationMinAggregateOutputType | null
    _max: AcademicQualificationMaxAggregateOutputType | null
  }

  export type AcademicQualificationAvgAggregateOutputType = {
    id: number | null
    countryId: number | null
    applicantId: number | null
  }

  export type AcademicQualificationSumAggregateOutputType = {
    id: number | null
    countryId: number | null
    applicantId: number | null
  }

  export type AcademicQualificationMinAggregateOutputType = {
    id: number | null
    level: string | null
    countryId: number | null
    institution: string | null
    fieldOfStudy: string | null
    grade: string | null
    startDate: Date | null
    endDate: Date | null
    isCompleted: boolean | null
    certificateUrl: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicQualificationMaxAggregateOutputType = {
    id: number | null
    level: string | null
    countryId: number | null
    institution: string | null
    fieldOfStudy: string | null
    grade: string | null
    startDate: Date | null
    endDate: Date | null
    isCompleted: boolean | null
    certificateUrl: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AcademicQualificationCountAggregateOutputType = {
    id: number
    level: number
    countryId: number
    institution: number
    fieldOfStudy: number
    grade: number
    startDate: number
    endDate: number
    isCompleted: number
    certificateUrl: number
    applicantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AcademicQualificationAvgAggregateInputType = {
    id?: true
    countryId?: true
    applicantId?: true
  }

  export type AcademicQualificationSumAggregateInputType = {
    id?: true
    countryId?: true
    applicantId?: true
  }

  export type AcademicQualificationMinAggregateInputType = {
    id?: true
    level?: true
    countryId?: true
    institution?: true
    fieldOfStudy?: true
    grade?: true
    startDate?: true
    endDate?: true
    isCompleted?: true
    certificateUrl?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicQualificationMaxAggregateInputType = {
    id?: true
    level?: true
    countryId?: true
    institution?: true
    fieldOfStudy?: true
    grade?: true
    startDate?: true
    endDate?: true
    isCompleted?: true
    certificateUrl?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AcademicQualificationCountAggregateInputType = {
    id?: true
    level?: true
    countryId?: true
    institution?: true
    fieldOfStudy?: true
    grade?: true
    startDate?: true
    endDate?: true
    isCompleted?: true
    certificateUrl?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AcademicQualificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicQualification to aggregate.
     */
    where?: AcademicQualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicQualifications to fetch.
     */
    orderBy?: AcademicQualificationOrderByWithRelationInput | AcademicQualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicQualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicQualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicQualifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicQualifications
    **/
    _count?: true | AcademicQualificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicQualificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicQualificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicQualificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicQualificationMaxAggregateInputType
  }

  export type GetAcademicQualificationAggregateType<T extends AcademicQualificationAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicQualification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicQualification[P]>
      : GetScalarType<T[P], AggregateAcademicQualification[P]>
  }




  export type AcademicQualificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicQualificationWhereInput
    orderBy?: AcademicQualificationOrderByWithAggregationInput | AcademicQualificationOrderByWithAggregationInput[]
    by: AcademicQualificationScalarFieldEnum[] | AcademicQualificationScalarFieldEnum
    having?: AcademicQualificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicQualificationCountAggregateInputType | true
    _avg?: AcademicQualificationAvgAggregateInputType
    _sum?: AcademicQualificationSumAggregateInputType
    _min?: AcademicQualificationMinAggregateInputType
    _max?: AcademicQualificationMaxAggregateInputType
  }

  export type AcademicQualificationGroupByOutputType = {
    id: number
    level: string
    countryId: number
    institution: string
    fieldOfStudy: string
    grade: string | null
    startDate: Date
    endDate: Date | null
    isCompleted: boolean
    certificateUrl: string | null
    applicantId: number
    createdAt: Date
    updatedAt: Date
    _count: AcademicQualificationCountAggregateOutputType | null
    _avg: AcademicQualificationAvgAggregateOutputType | null
    _sum: AcademicQualificationSumAggregateOutputType | null
    _min: AcademicQualificationMinAggregateOutputType | null
    _max: AcademicQualificationMaxAggregateOutputType | null
  }

  type GetAcademicQualificationGroupByPayload<T extends AcademicQualificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicQualificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicQualificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicQualificationGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicQualificationGroupByOutputType[P]>
        }
      >
    >


  export type AcademicQualificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    countryId?: boolean
    institution?: boolean
    fieldOfStudy?: boolean
    grade?: boolean
    startDate?: boolean
    endDate?: boolean
    isCompleted?: boolean
    certificateUrl?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicQualification"]>



  export type AcademicQualificationSelectScalar = {
    id?: boolean
    level?: boolean
    countryId?: boolean
    institution?: boolean
    fieldOfStudy?: boolean
    grade?: boolean
    startDate?: boolean
    endDate?: boolean
    isCompleted?: boolean
    certificateUrl?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AcademicQualificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "level" | "countryId" | "institution" | "fieldOfStudy" | "grade" | "startDate" | "endDate" | "isCompleted" | "certificateUrl" | "applicantId" | "createdAt" | "updatedAt", ExtArgs["result"]["academicQualification"]>
  export type AcademicQualificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $AcademicQualificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicQualification"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
      country: Prisma.$CountryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      level: string
      countryId: number
      institution: string
      fieldOfStudy: string
      grade: string | null
      startDate: Date
      endDate: Date | null
      isCompleted: boolean
      certificateUrl: string | null
      applicantId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["academicQualification"]>
    composites: {}
  }

  type AcademicQualificationGetPayload<S extends boolean | null | undefined | AcademicQualificationDefaultArgs> = $Result.GetResult<Prisma.$AcademicQualificationPayload, S>

  type AcademicQualificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AcademicQualificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AcademicQualificationCountAggregateInputType | true
    }

  export interface AcademicQualificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicQualification'], meta: { name: 'AcademicQualification' } }
    /**
     * Find zero or one AcademicQualification that matches the filter.
     * @param {AcademicQualificationFindUniqueArgs} args - Arguments to find a AcademicQualification
     * @example
     * // Get one AcademicQualification
     * const academicQualification = await prisma.academicQualification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AcademicQualificationFindUniqueArgs>(args: SelectSubset<T, AcademicQualificationFindUniqueArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AcademicQualification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AcademicQualificationFindUniqueOrThrowArgs} args - Arguments to find a AcademicQualification
     * @example
     * // Get one AcademicQualification
     * const academicQualification = await prisma.academicQualification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AcademicQualificationFindUniqueOrThrowArgs>(args: SelectSubset<T, AcademicQualificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicQualification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicQualificationFindFirstArgs} args - Arguments to find a AcademicQualification
     * @example
     * // Get one AcademicQualification
     * const academicQualification = await prisma.academicQualification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AcademicQualificationFindFirstArgs>(args?: SelectSubset<T, AcademicQualificationFindFirstArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AcademicQualification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicQualificationFindFirstOrThrowArgs} args - Arguments to find a AcademicQualification
     * @example
     * // Get one AcademicQualification
     * const academicQualification = await prisma.academicQualification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AcademicQualificationFindFirstOrThrowArgs>(args?: SelectSubset<T, AcademicQualificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AcademicQualifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicQualificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicQualifications
     * const academicQualifications = await prisma.academicQualification.findMany()
     * 
     * // Get first 10 AcademicQualifications
     * const academicQualifications = await prisma.academicQualification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const academicQualificationWithIdOnly = await prisma.academicQualification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AcademicQualificationFindManyArgs>(args?: SelectSubset<T, AcademicQualificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AcademicQualification.
     * @param {AcademicQualificationCreateArgs} args - Arguments to create a AcademicQualification.
     * @example
     * // Create one AcademicQualification
     * const AcademicQualification = await prisma.academicQualification.create({
     *   data: {
     *     // ... data to create a AcademicQualification
     *   }
     * })
     * 
     */
    create<T extends AcademicQualificationCreateArgs>(args: SelectSubset<T, AcademicQualificationCreateArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AcademicQualifications.
     * @param {AcademicQualificationCreateManyArgs} args - Arguments to create many AcademicQualifications.
     * @example
     * // Create many AcademicQualifications
     * const academicQualification = await prisma.academicQualification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AcademicQualificationCreateManyArgs>(args?: SelectSubset<T, AcademicQualificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AcademicQualification.
     * @param {AcademicQualificationDeleteArgs} args - Arguments to delete one AcademicQualification.
     * @example
     * // Delete one AcademicQualification
     * const AcademicQualification = await prisma.academicQualification.delete({
     *   where: {
     *     // ... filter to delete one AcademicQualification
     *   }
     * })
     * 
     */
    delete<T extends AcademicQualificationDeleteArgs>(args: SelectSubset<T, AcademicQualificationDeleteArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AcademicQualification.
     * @param {AcademicQualificationUpdateArgs} args - Arguments to update one AcademicQualification.
     * @example
     * // Update one AcademicQualification
     * const academicQualification = await prisma.academicQualification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AcademicQualificationUpdateArgs>(args: SelectSubset<T, AcademicQualificationUpdateArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AcademicQualifications.
     * @param {AcademicQualificationDeleteManyArgs} args - Arguments to filter AcademicQualifications to delete.
     * @example
     * // Delete a few AcademicQualifications
     * const { count } = await prisma.academicQualification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AcademicQualificationDeleteManyArgs>(args?: SelectSubset<T, AcademicQualificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicQualifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicQualificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicQualifications
     * const academicQualification = await prisma.academicQualification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AcademicQualificationUpdateManyArgs>(args: SelectSubset<T, AcademicQualificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AcademicQualification.
     * @param {AcademicQualificationUpsertArgs} args - Arguments to update or create a AcademicQualification.
     * @example
     * // Update or create a AcademicQualification
     * const academicQualification = await prisma.academicQualification.upsert({
     *   create: {
     *     // ... data to create a AcademicQualification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicQualification we want to update
     *   }
     * })
     */
    upsert<T extends AcademicQualificationUpsertArgs>(args: SelectSubset<T, AcademicQualificationUpsertArgs<ExtArgs>>): Prisma__AcademicQualificationClient<$Result.GetResult<Prisma.$AcademicQualificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AcademicQualifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicQualificationCountArgs} args - Arguments to filter AcademicQualifications to count.
     * @example
     * // Count the number of AcademicQualifications
     * const count = await prisma.academicQualification.count({
     *   where: {
     *     // ... the filter for the AcademicQualifications we want to count
     *   }
     * })
    **/
    count<T extends AcademicQualificationCountArgs>(
      args?: Subset<T, AcademicQualificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicQualificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicQualification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicQualificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicQualificationAggregateArgs>(args: Subset<T, AcademicQualificationAggregateArgs>): Prisma.PrismaPromise<GetAcademicQualificationAggregateType<T>>

    /**
     * Group by AcademicQualification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicQualificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicQualificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicQualificationGroupByArgs['orderBy'] }
        : { orderBy?: AcademicQualificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicQualificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicQualificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicQualification model
   */
  readonly fields: AcademicQualificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicQualification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicQualificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AcademicQualification model
   */
  interface AcademicQualificationFieldRefs {
    readonly id: FieldRef<"AcademicQualification", 'Int'>
    readonly level: FieldRef<"AcademicQualification", 'String'>
    readonly countryId: FieldRef<"AcademicQualification", 'Int'>
    readonly institution: FieldRef<"AcademicQualification", 'String'>
    readonly fieldOfStudy: FieldRef<"AcademicQualification", 'String'>
    readonly grade: FieldRef<"AcademicQualification", 'String'>
    readonly startDate: FieldRef<"AcademicQualification", 'DateTime'>
    readonly endDate: FieldRef<"AcademicQualification", 'DateTime'>
    readonly isCompleted: FieldRef<"AcademicQualification", 'Boolean'>
    readonly certificateUrl: FieldRef<"AcademicQualification", 'String'>
    readonly applicantId: FieldRef<"AcademicQualification", 'Int'>
    readonly createdAt: FieldRef<"AcademicQualification", 'DateTime'>
    readonly updatedAt: FieldRef<"AcademicQualification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AcademicQualification findUnique
   */
  export type AcademicQualificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * Filter, which AcademicQualification to fetch.
     */
    where: AcademicQualificationWhereUniqueInput
  }

  /**
   * AcademicQualification findUniqueOrThrow
   */
  export type AcademicQualificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * Filter, which AcademicQualification to fetch.
     */
    where: AcademicQualificationWhereUniqueInput
  }

  /**
   * AcademicQualification findFirst
   */
  export type AcademicQualificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * Filter, which AcademicQualification to fetch.
     */
    where?: AcademicQualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicQualifications to fetch.
     */
    orderBy?: AcademicQualificationOrderByWithRelationInput | AcademicQualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicQualifications.
     */
    cursor?: AcademicQualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicQualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicQualifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicQualifications.
     */
    distinct?: AcademicQualificationScalarFieldEnum | AcademicQualificationScalarFieldEnum[]
  }

  /**
   * AcademicQualification findFirstOrThrow
   */
  export type AcademicQualificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * Filter, which AcademicQualification to fetch.
     */
    where?: AcademicQualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicQualifications to fetch.
     */
    orderBy?: AcademicQualificationOrderByWithRelationInput | AcademicQualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicQualifications.
     */
    cursor?: AcademicQualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicQualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicQualifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicQualifications.
     */
    distinct?: AcademicQualificationScalarFieldEnum | AcademicQualificationScalarFieldEnum[]
  }

  /**
   * AcademicQualification findMany
   */
  export type AcademicQualificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * Filter, which AcademicQualifications to fetch.
     */
    where?: AcademicQualificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicQualifications to fetch.
     */
    orderBy?: AcademicQualificationOrderByWithRelationInput | AcademicQualificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicQualifications.
     */
    cursor?: AcademicQualificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicQualifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicQualifications.
     */
    skip?: number
    distinct?: AcademicQualificationScalarFieldEnum | AcademicQualificationScalarFieldEnum[]
  }

  /**
   * AcademicQualification create
   */
  export type AcademicQualificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicQualification.
     */
    data: XOR<AcademicQualificationCreateInput, AcademicQualificationUncheckedCreateInput>
  }

  /**
   * AcademicQualification createMany
   */
  export type AcademicQualificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicQualifications.
     */
    data: AcademicQualificationCreateManyInput | AcademicQualificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AcademicQualification update
   */
  export type AcademicQualificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicQualification.
     */
    data: XOR<AcademicQualificationUpdateInput, AcademicQualificationUncheckedUpdateInput>
    /**
     * Choose, which AcademicQualification to update.
     */
    where: AcademicQualificationWhereUniqueInput
  }

  /**
   * AcademicQualification updateMany
   */
  export type AcademicQualificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicQualifications.
     */
    data: XOR<AcademicQualificationUpdateManyMutationInput, AcademicQualificationUncheckedUpdateManyInput>
    /**
     * Filter which AcademicQualifications to update
     */
    where?: AcademicQualificationWhereInput
    /**
     * Limit how many AcademicQualifications to update.
     */
    limit?: number
  }

  /**
   * AcademicQualification upsert
   */
  export type AcademicQualificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicQualification to update in case it exists.
     */
    where: AcademicQualificationWhereUniqueInput
    /**
     * In case the AcademicQualification found by the `where` argument doesn't exist, create a new AcademicQualification with this data.
     */
    create: XOR<AcademicQualificationCreateInput, AcademicQualificationUncheckedCreateInput>
    /**
     * In case the AcademicQualification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicQualificationUpdateInput, AcademicQualificationUncheckedUpdateInput>
  }

  /**
   * AcademicQualification delete
   */
  export type AcademicQualificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
    /**
     * Filter which AcademicQualification to delete.
     */
    where: AcademicQualificationWhereUniqueInput
  }

  /**
   * AcademicQualification deleteMany
   */
  export type AcademicQualificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicQualifications to delete
     */
    where?: AcademicQualificationWhereInput
    /**
     * Limit how many AcademicQualifications to delete.
     */
    limit?: number
  }

  /**
   * AcademicQualification without action
   */
  export type AcademicQualificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicQualification
     */
    select?: AcademicQualificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicQualification
     */
    omit?: AcademicQualificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicQualificationInclude<ExtArgs> | null
  }


  /**
   * Model WorkExperience
   */

  export type AggregateWorkExperience = {
    _count: WorkExperienceCountAggregateOutputType | null
    _avg: WorkExperienceAvgAggregateOutputType | null
    _sum: WorkExperienceSumAggregateOutputType | null
    _min: WorkExperienceMinAggregateOutputType | null
    _max: WorkExperienceMaxAggregateOutputType | null
  }

  export type WorkExperienceAvgAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type WorkExperienceSumAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type WorkExperienceMinAggregateOutputType = {
    id: number | null
    companyName: string | null
    jobTitle: string | null
    industry: string | null
    location: string | null
    employmentType: string | null
    startDate: Date | null
    endDate: Date | null
    isCurrent: boolean | null
    responsibilities: string | null
    achievements: string | null
    supervisorName: string | null
    supervisorContact: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkExperienceMaxAggregateOutputType = {
    id: number | null
    companyName: string | null
    jobTitle: string | null
    industry: string | null
    location: string | null
    employmentType: string | null
    startDate: Date | null
    endDate: Date | null
    isCurrent: boolean | null
    responsibilities: string | null
    achievements: string | null
    supervisorName: string | null
    supervisorContact: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WorkExperienceCountAggregateOutputType = {
    id: number
    companyName: number
    jobTitle: number
    industry: number
    location: number
    employmentType: number
    startDate: number
    endDate: number
    isCurrent: number
    responsibilities: number
    achievements: number
    supervisorName: number
    supervisorContact: number
    applicantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WorkExperienceAvgAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type WorkExperienceSumAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type WorkExperienceMinAggregateInputType = {
    id?: true
    companyName?: true
    jobTitle?: true
    industry?: true
    location?: true
    employmentType?: true
    startDate?: true
    endDate?: true
    isCurrent?: true
    responsibilities?: true
    achievements?: true
    supervisorName?: true
    supervisorContact?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkExperienceMaxAggregateInputType = {
    id?: true
    companyName?: true
    jobTitle?: true
    industry?: true
    location?: true
    employmentType?: true
    startDate?: true
    endDate?: true
    isCurrent?: true
    responsibilities?: true
    achievements?: true
    supervisorName?: true
    supervisorContact?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WorkExperienceCountAggregateInputType = {
    id?: true
    companyName?: true
    jobTitle?: true
    industry?: true
    location?: true
    employmentType?: true
    startDate?: true
    endDate?: true
    isCurrent?: true
    responsibilities?: true
    achievements?: true
    supervisorName?: true
    supervisorContact?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WorkExperienceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkExperience to aggregate.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationInput | WorkExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkExperiences
    **/
    _count?: true | WorkExperienceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WorkExperienceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WorkExperienceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkExperienceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkExperienceMaxAggregateInputType
  }

  export type GetWorkExperienceAggregateType<T extends WorkExperienceAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkExperience]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkExperience[P]>
      : GetScalarType<T[P], AggregateWorkExperience[P]>
  }




  export type WorkExperienceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkExperienceWhereInput
    orderBy?: WorkExperienceOrderByWithAggregationInput | WorkExperienceOrderByWithAggregationInput[]
    by: WorkExperienceScalarFieldEnum[] | WorkExperienceScalarFieldEnum
    having?: WorkExperienceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkExperienceCountAggregateInputType | true
    _avg?: WorkExperienceAvgAggregateInputType
    _sum?: WorkExperienceSumAggregateInputType
    _min?: WorkExperienceMinAggregateInputType
    _max?: WorkExperienceMaxAggregateInputType
  }

  export type WorkExperienceGroupByOutputType = {
    id: number
    companyName: string
    jobTitle: string
    industry: string | null
    location: string | null
    employmentType: string | null
    startDate: Date
    endDate: Date | null
    isCurrent: boolean
    responsibilities: string | null
    achievements: string | null
    supervisorName: string | null
    supervisorContact: string | null
    applicantId: number
    createdAt: Date
    updatedAt: Date
    _count: WorkExperienceCountAggregateOutputType | null
    _avg: WorkExperienceAvgAggregateOutputType | null
    _sum: WorkExperienceSumAggregateOutputType | null
    _min: WorkExperienceMinAggregateOutputType | null
    _max: WorkExperienceMaxAggregateOutputType | null
  }

  type GetWorkExperienceGroupByPayload<T extends WorkExperienceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkExperienceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkExperienceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkExperienceGroupByOutputType[P]>
            : GetScalarType<T[P], WorkExperienceGroupByOutputType[P]>
        }
      >
    >


  export type WorkExperienceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    companyName?: boolean
    jobTitle?: boolean
    industry?: boolean
    location?: boolean
    employmentType?: boolean
    startDate?: boolean
    endDate?: boolean
    isCurrent?: boolean
    responsibilities?: boolean
    achievements?: boolean
    supervisorName?: boolean
    supervisorContact?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["workExperience"]>



  export type WorkExperienceSelectScalar = {
    id?: boolean
    companyName?: boolean
    jobTitle?: boolean
    industry?: boolean
    location?: boolean
    employmentType?: boolean
    startDate?: boolean
    endDate?: boolean
    isCurrent?: boolean
    responsibilities?: boolean
    achievements?: boolean
    supervisorName?: boolean
    supervisorContact?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WorkExperienceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "companyName" | "jobTitle" | "industry" | "location" | "employmentType" | "startDate" | "endDate" | "isCurrent" | "responsibilities" | "achievements" | "supervisorName" | "supervisorContact" | "applicantId" | "createdAt" | "updatedAt", ExtArgs["result"]["workExperience"]>
  export type WorkExperienceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $WorkExperiencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkExperience"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      companyName: string
      jobTitle: string
      industry: string | null
      location: string | null
      employmentType: string | null
      startDate: Date
      endDate: Date | null
      isCurrent: boolean
      responsibilities: string | null
      achievements: string | null
      supervisorName: string | null
      supervisorContact: string | null
      applicantId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["workExperience"]>
    composites: {}
  }

  type WorkExperienceGetPayload<S extends boolean | null | undefined | WorkExperienceDefaultArgs> = $Result.GetResult<Prisma.$WorkExperiencePayload, S>

  type WorkExperienceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WorkExperienceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WorkExperienceCountAggregateInputType | true
    }

  export interface WorkExperienceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkExperience'], meta: { name: 'WorkExperience' } }
    /**
     * Find zero or one WorkExperience that matches the filter.
     * @param {WorkExperienceFindUniqueArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkExperienceFindUniqueArgs>(args: SelectSubset<T, WorkExperienceFindUniqueArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WorkExperience that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WorkExperienceFindUniqueOrThrowArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkExperienceFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkExperienceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkExperience that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceFindFirstArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkExperienceFindFirstArgs>(args?: SelectSubset<T, WorkExperienceFindFirstArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WorkExperience that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceFindFirstOrThrowArgs} args - Arguments to find a WorkExperience
     * @example
     * // Get one WorkExperience
     * const workExperience = await prisma.workExperience.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkExperienceFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkExperienceFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WorkExperiences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkExperiences
     * const workExperiences = await prisma.workExperience.findMany()
     * 
     * // Get first 10 WorkExperiences
     * const workExperiences = await prisma.workExperience.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workExperienceWithIdOnly = await prisma.workExperience.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkExperienceFindManyArgs>(args?: SelectSubset<T, WorkExperienceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WorkExperience.
     * @param {WorkExperienceCreateArgs} args - Arguments to create a WorkExperience.
     * @example
     * // Create one WorkExperience
     * const WorkExperience = await prisma.workExperience.create({
     *   data: {
     *     // ... data to create a WorkExperience
     *   }
     * })
     * 
     */
    create<T extends WorkExperienceCreateArgs>(args: SelectSubset<T, WorkExperienceCreateArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WorkExperiences.
     * @param {WorkExperienceCreateManyArgs} args - Arguments to create many WorkExperiences.
     * @example
     * // Create many WorkExperiences
     * const workExperience = await prisma.workExperience.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkExperienceCreateManyArgs>(args?: SelectSubset<T, WorkExperienceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a WorkExperience.
     * @param {WorkExperienceDeleteArgs} args - Arguments to delete one WorkExperience.
     * @example
     * // Delete one WorkExperience
     * const WorkExperience = await prisma.workExperience.delete({
     *   where: {
     *     // ... filter to delete one WorkExperience
     *   }
     * })
     * 
     */
    delete<T extends WorkExperienceDeleteArgs>(args: SelectSubset<T, WorkExperienceDeleteArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WorkExperience.
     * @param {WorkExperienceUpdateArgs} args - Arguments to update one WorkExperience.
     * @example
     * // Update one WorkExperience
     * const workExperience = await prisma.workExperience.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkExperienceUpdateArgs>(args: SelectSubset<T, WorkExperienceUpdateArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WorkExperiences.
     * @param {WorkExperienceDeleteManyArgs} args - Arguments to filter WorkExperiences to delete.
     * @example
     * // Delete a few WorkExperiences
     * const { count } = await prisma.workExperience.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkExperienceDeleteManyArgs>(args?: SelectSubset<T, WorkExperienceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkExperiences
     * const workExperience = await prisma.workExperience.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkExperienceUpdateManyArgs>(args: SelectSubset<T, WorkExperienceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkExperience.
     * @param {WorkExperienceUpsertArgs} args - Arguments to update or create a WorkExperience.
     * @example
     * // Update or create a WorkExperience
     * const workExperience = await prisma.workExperience.upsert({
     *   create: {
     *     // ... data to create a WorkExperience
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkExperience we want to update
     *   }
     * })
     */
    upsert<T extends WorkExperienceUpsertArgs>(args: SelectSubset<T, WorkExperienceUpsertArgs<ExtArgs>>): Prisma__WorkExperienceClient<$Result.GetResult<Prisma.$WorkExperiencePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WorkExperiences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceCountArgs} args - Arguments to filter WorkExperiences to count.
     * @example
     * // Count the number of WorkExperiences
     * const count = await prisma.workExperience.count({
     *   where: {
     *     // ... the filter for the WorkExperiences we want to count
     *   }
     * })
    **/
    count<T extends WorkExperienceCountArgs>(
      args?: Subset<T, WorkExperienceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkExperienceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkExperience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkExperienceAggregateArgs>(args: Subset<T, WorkExperienceAggregateArgs>): Prisma.PrismaPromise<GetWorkExperienceAggregateType<T>>

    /**
     * Group by WorkExperience.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkExperienceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkExperienceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkExperienceGroupByArgs['orderBy'] }
        : { orderBy?: WorkExperienceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkExperienceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkExperienceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkExperience model
   */
  readonly fields: WorkExperienceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkExperience.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkExperienceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkExperience model
   */
  interface WorkExperienceFieldRefs {
    readonly id: FieldRef<"WorkExperience", 'Int'>
    readonly companyName: FieldRef<"WorkExperience", 'String'>
    readonly jobTitle: FieldRef<"WorkExperience", 'String'>
    readonly industry: FieldRef<"WorkExperience", 'String'>
    readonly location: FieldRef<"WorkExperience", 'String'>
    readonly employmentType: FieldRef<"WorkExperience", 'String'>
    readonly startDate: FieldRef<"WorkExperience", 'DateTime'>
    readonly endDate: FieldRef<"WorkExperience", 'DateTime'>
    readonly isCurrent: FieldRef<"WorkExperience", 'Boolean'>
    readonly responsibilities: FieldRef<"WorkExperience", 'String'>
    readonly achievements: FieldRef<"WorkExperience", 'String'>
    readonly supervisorName: FieldRef<"WorkExperience", 'String'>
    readonly supervisorContact: FieldRef<"WorkExperience", 'String'>
    readonly applicantId: FieldRef<"WorkExperience", 'Int'>
    readonly createdAt: FieldRef<"WorkExperience", 'DateTime'>
    readonly updatedAt: FieldRef<"WorkExperience", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * WorkExperience findUnique
   */
  export type WorkExperienceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where: WorkExperienceWhereUniqueInput
  }

  /**
   * WorkExperience findUniqueOrThrow
   */
  export type WorkExperienceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where: WorkExperienceWhereUniqueInput
  }

  /**
   * WorkExperience findFirst
   */
  export type WorkExperienceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationInput | WorkExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkExperiences.
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkExperiences.
     */
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }

  /**
   * WorkExperience findFirstOrThrow
   */
  export type WorkExperienceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperience to fetch.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationInput | WorkExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkExperiences.
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkExperiences.
     */
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }

  /**
   * WorkExperience findMany
   */
  export type WorkExperienceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter, which WorkExperiences to fetch.
     */
    where?: WorkExperienceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkExperiences to fetch.
     */
    orderBy?: WorkExperienceOrderByWithRelationInput | WorkExperienceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkExperiences.
     */
    cursor?: WorkExperienceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkExperiences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkExperiences.
     */
    skip?: number
    distinct?: WorkExperienceScalarFieldEnum | WorkExperienceScalarFieldEnum[]
  }

  /**
   * WorkExperience create
   */
  export type WorkExperienceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkExperience.
     */
    data: XOR<WorkExperienceCreateInput, WorkExperienceUncheckedCreateInput>
  }

  /**
   * WorkExperience createMany
   */
  export type WorkExperienceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkExperiences.
     */
    data: WorkExperienceCreateManyInput | WorkExperienceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkExperience update
   */
  export type WorkExperienceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkExperience.
     */
    data: XOR<WorkExperienceUpdateInput, WorkExperienceUncheckedUpdateInput>
    /**
     * Choose, which WorkExperience to update.
     */
    where: WorkExperienceWhereUniqueInput
  }

  /**
   * WorkExperience updateMany
   */
  export type WorkExperienceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkExperiences.
     */
    data: XOR<WorkExperienceUpdateManyMutationInput, WorkExperienceUncheckedUpdateManyInput>
    /**
     * Filter which WorkExperiences to update
     */
    where?: WorkExperienceWhereInput
    /**
     * Limit how many WorkExperiences to update.
     */
    limit?: number
  }

  /**
   * WorkExperience upsert
   */
  export type WorkExperienceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkExperience to update in case it exists.
     */
    where: WorkExperienceWhereUniqueInput
    /**
     * In case the WorkExperience found by the `where` argument doesn't exist, create a new WorkExperience with this data.
     */
    create: XOR<WorkExperienceCreateInput, WorkExperienceUncheckedCreateInput>
    /**
     * In case the WorkExperience was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkExperienceUpdateInput, WorkExperienceUncheckedUpdateInput>
  }

  /**
   * WorkExperience delete
   */
  export type WorkExperienceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
    /**
     * Filter which WorkExperience to delete.
     */
    where: WorkExperienceWhereUniqueInput
  }

  /**
   * WorkExperience deleteMany
   */
  export type WorkExperienceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkExperiences to delete
     */
    where?: WorkExperienceWhereInput
    /**
     * Limit how many WorkExperiences to delete.
     */
    limit?: number
  }

  /**
   * WorkExperience without action
   */
  export type WorkExperienceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkExperience
     */
    select?: WorkExperienceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WorkExperience
     */
    omit?: WorkExperienceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkExperienceInclude<ExtArgs> | null
  }


  /**
   * Model LanguageProficiency
   */

  export type AggregateLanguageProficiency = {
    _count: LanguageProficiencyCountAggregateOutputType | null
    _avg: LanguageProficiencyAvgAggregateOutputType | null
    _sum: LanguageProficiencySumAggregateOutputType | null
    _min: LanguageProficiencyMinAggregateOutputType | null
    _max: LanguageProficiencyMaxAggregateOutputType | null
  }

  export type LanguageProficiencyAvgAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type LanguageProficiencySumAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type LanguageProficiencyMinAggregateOutputType = {
    id: number | null
    language: string | null
    speakLevel: string | null
    readLevel: string | null
    writeLevel: string | null
    isCertified: boolean | null
    certificationName: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguageProficiencyMaxAggregateOutputType = {
    id: number | null
    language: string | null
    speakLevel: string | null
    readLevel: string | null
    writeLevel: string | null
    isCertified: boolean | null
    certificationName: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LanguageProficiencyCountAggregateOutputType = {
    id: number
    language: number
    speakLevel: number
    readLevel: number
    writeLevel: number
    isCertified: number
    certificationName: number
    applicantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LanguageProficiencyAvgAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type LanguageProficiencySumAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type LanguageProficiencyMinAggregateInputType = {
    id?: true
    language?: true
    speakLevel?: true
    readLevel?: true
    writeLevel?: true
    isCertified?: true
    certificationName?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguageProficiencyMaxAggregateInputType = {
    id?: true
    language?: true
    speakLevel?: true
    readLevel?: true
    writeLevel?: true
    isCertified?: true
    certificationName?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LanguageProficiencyCountAggregateInputType = {
    id?: true
    language?: true
    speakLevel?: true
    readLevel?: true
    writeLevel?: true
    isCertified?: true
    certificationName?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LanguageProficiencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageProficiency to aggregate.
     */
    where?: LanguageProficiencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageProficiencies to fetch.
     */
    orderBy?: LanguageProficiencyOrderByWithRelationInput | LanguageProficiencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LanguageProficiencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageProficiencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageProficiencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LanguageProficiencies
    **/
    _count?: true | LanguageProficiencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguageProficiencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguageProficiencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageProficiencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageProficiencyMaxAggregateInputType
  }

  export type GetLanguageProficiencyAggregateType<T extends LanguageProficiencyAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguageProficiency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguageProficiency[P]>
      : GetScalarType<T[P], AggregateLanguageProficiency[P]>
  }




  export type LanguageProficiencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LanguageProficiencyWhereInput
    orderBy?: LanguageProficiencyOrderByWithAggregationInput | LanguageProficiencyOrderByWithAggregationInput[]
    by: LanguageProficiencyScalarFieldEnum[] | LanguageProficiencyScalarFieldEnum
    having?: LanguageProficiencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageProficiencyCountAggregateInputType | true
    _avg?: LanguageProficiencyAvgAggregateInputType
    _sum?: LanguageProficiencySumAggregateInputType
    _min?: LanguageProficiencyMinAggregateInputType
    _max?: LanguageProficiencyMaxAggregateInputType
  }

  export type LanguageProficiencyGroupByOutputType = {
    id: number
    language: string
    speakLevel: string
    readLevel: string
    writeLevel: string
    isCertified: boolean
    certificationName: string | null
    applicantId: number
    createdAt: Date
    updatedAt: Date
    _count: LanguageProficiencyCountAggregateOutputType | null
    _avg: LanguageProficiencyAvgAggregateOutputType | null
    _sum: LanguageProficiencySumAggregateOutputType | null
    _min: LanguageProficiencyMinAggregateOutputType | null
    _max: LanguageProficiencyMaxAggregateOutputType | null
  }

  type GetLanguageProficiencyGroupByPayload<T extends LanguageProficiencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageProficiencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageProficiencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageProficiencyGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageProficiencyGroupByOutputType[P]>
        }
      >
    >


  export type LanguageProficiencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    language?: boolean
    speakLevel?: boolean
    readLevel?: boolean
    writeLevel?: boolean
    isCertified?: boolean
    certificationName?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["languageProficiency"]>



  export type LanguageProficiencySelectScalar = {
    id?: boolean
    language?: boolean
    speakLevel?: boolean
    readLevel?: boolean
    writeLevel?: boolean
    isCertified?: boolean
    certificationName?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LanguageProficiencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "language" | "speakLevel" | "readLevel" | "writeLevel" | "isCertified" | "certificationName" | "applicantId" | "createdAt" | "updatedAt", ExtArgs["result"]["languageProficiency"]>
  export type LanguageProficiencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $LanguageProficiencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LanguageProficiency"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      language: string
      speakLevel: string
      readLevel: string
      writeLevel: string
      isCertified: boolean
      certificationName: string | null
      applicantId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["languageProficiency"]>
    composites: {}
  }

  type LanguageProficiencyGetPayload<S extends boolean | null | undefined | LanguageProficiencyDefaultArgs> = $Result.GetResult<Prisma.$LanguageProficiencyPayload, S>

  type LanguageProficiencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LanguageProficiencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageProficiencyCountAggregateInputType | true
    }

  export interface LanguageProficiencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LanguageProficiency'], meta: { name: 'LanguageProficiency' } }
    /**
     * Find zero or one LanguageProficiency that matches the filter.
     * @param {LanguageProficiencyFindUniqueArgs} args - Arguments to find a LanguageProficiency
     * @example
     * // Get one LanguageProficiency
     * const languageProficiency = await prisma.languageProficiency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LanguageProficiencyFindUniqueArgs>(args: SelectSubset<T, LanguageProficiencyFindUniqueArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one LanguageProficiency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LanguageProficiencyFindUniqueOrThrowArgs} args - Arguments to find a LanguageProficiency
     * @example
     * // Get one LanguageProficiency
     * const languageProficiency = await prisma.languageProficiency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LanguageProficiencyFindUniqueOrThrowArgs>(args: SelectSubset<T, LanguageProficiencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageProficiency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageProficiencyFindFirstArgs} args - Arguments to find a LanguageProficiency
     * @example
     * // Get one LanguageProficiency
     * const languageProficiency = await prisma.languageProficiency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LanguageProficiencyFindFirstArgs>(args?: SelectSubset<T, LanguageProficiencyFindFirstArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first LanguageProficiency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageProficiencyFindFirstOrThrowArgs} args - Arguments to find a LanguageProficiency
     * @example
     * // Get one LanguageProficiency
     * const languageProficiency = await prisma.languageProficiency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LanguageProficiencyFindFirstOrThrowArgs>(args?: SelectSubset<T, LanguageProficiencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more LanguageProficiencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageProficiencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LanguageProficiencies
     * const languageProficiencies = await prisma.languageProficiency.findMany()
     * 
     * // Get first 10 LanguageProficiencies
     * const languageProficiencies = await prisma.languageProficiency.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const languageProficiencyWithIdOnly = await prisma.languageProficiency.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LanguageProficiencyFindManyArgs>(args?: SelectSubset<T, LanguageProficiencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a LanguageProficiency.
     * @param {LanguageProficiencyCreateArgs} args - Arguments to create a LanguageProficiency.
     * @example
     * // Create one LanguageProficiency
     * const LanguageProficiency = await prisma.languageProficiency.create({
     *   data: {
     *     // ... data to create a LanguageProficiency
     *   }
     * })
     * 
     */
    create<T extends LanguageProficiencyCreateArgs>(args: SelectSubset<T, LanguageProficiencyCreateArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many LanguageProficiencies.
     * @param {LanguageProficiencyCreateManyArgs} args - Arguments to create many LanguageProficiencies.
     * @example
     * // Create many LanguageProficiencies
     * const languageProficiency = await prisma.languageProficiency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LanguageProficiencyCreateManyArgs>(args?: SelectSubset<T, LanguageProficiencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LanguageProficiency.
     * @param {LanguageProficiencyDeleteArgs} args - Arguments to delete one LanguageProficiency.
     * @example
     * // Delete one LanguageProficiency
     * const LanguageProficiency = await prisma.languageProficiency.delete({
     *   where: {
     *     // ... filter to delete one LanguageProficiency
     *   }
     * })
     * 
     */
    delete<T extends LanguageProficiencyDeleteArgs>(args: SelectSubset<T, LanguageProficiencyDeleteArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one LanguageProficiency.
     * @param {LanguageProficiencyUpdateArgs} args - Arguments to update one LanguageProficiency.
     * @example
     * // Update one LanguageProficiency
     * const languageProficiency = await prisma.languageProficiency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LanguageProficiencyUpdateArgs>(args: SelectSubset<T, LanguageProficiencyUpdateArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more LanguageProficiencies.
     * @param {LanguageProficiencyDeleteManyArgs} args - Arguments to filter LanguageProficiencies to delete.
     * @example
     * // Delete a few LanguageProficiencies
     * const { count } = await prisma.languageProficiency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LanguageProficiencyDeleteManyArgs>(args?: SelectSubset<T, LanguageProficiencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LanguageProficiencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageProficiencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LanguageProficiencies
     * const languageProficiency = await prisma.languageProficiency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LanguageProficiencyUpdateManyArgs>(args: SelectSubset<T, LanguageProficiencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LanguageProficiency.
     * @param {LanguageProficiencyUpsertArgs} args - Arguments to update or create a LanguageProficiency.
     * @example
     * // Update or create a LanguageProficiency
     * const languageProficiency = await prisma.languageProficiency.upsert({
     *   create: {
     *     // ... data to create a LanguageProficiency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LanguageProficiency we want to update
     *   }
     * })
     */
    upsert<T extends LanguageProficiencyUpsertArgs>(args: SelectSubset<T, LanguageProficiencyUpsertArgs<ExtArgs>>): Prisma__LanguageProficiencyClient<$Result.GetResult<Prisma.$LanguageProficiencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of LanguageProficiencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageProficiencyCountArgs} args - Arguments to filter LanguageProficiencies to count.
     * @example
     * // Count the number of LanguageProficiencies
     * const count = await prisma.languageProficiency.count({
     *   where: {
     *     // ... the filter for the LanguageProficiencies we want to count
     *   }
     * })
    **/
    count<T extends LanguageProficiencyCountArgs>(
      args?: Subset<T, LanguageProficiencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageProficiencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LanguageProficiency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageProficiencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageProficiencyAggregateArgs>(args: Subset<T, LanguageProficiencyAggregateArgs>): Prisma.PrismaPromise<GetLanguageProficiencyAggregateType<T>>

    /**
     * Group by LanguageProficiency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageProficiencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LanguageProficiencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LanguageProficiencyGroupByArgs['orderBy'] }
        : { orderBy?: LanguageProficiencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LanguageProficiencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageProficiencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LanguageProficiency model
   */
  readonly fields: LanguageProficiencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LanguageProficiency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LanguageProficiencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LanguageProficiency model
   */
  interface LanguageProficiencyFieldRefs {
    readonly id: FieldRef<"LanguageProficiency", 'Int'>
    readonly language: FieldRef<"LanguageProficiency", 'String'>
    readonly speakLevel: FieldRef<"LanguageProficiency", 'String'>
    readonly readLevel: FieldRef<"LanguageProficiency", 'String'>
    readonly writeLevel: FieldRef<"LanguageProficiency", 'String'>
    readonly isCertified: FieldRef<"LanguageProficiency", 'Boolean'>
    readonly certificationName: FieldRef<"LanguageProficiency", 'String'>
    readonly applicantId: FieldRef<"LanguageProficiency", 'Int'>
    readonly createdAt: FieldRef<"LanguageProficiency", 'DateTime'>
    readonly updatedAt: FieldRef<"LanguageProficiency", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * LanguageProficiency findUnique
   */
  export type LanguageProficiencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * Filter, which LanguageProficiency to fetch.
     */
    where: LanguageProficiencyWhereUniqueInput
  }

  /**
   * LanguageProficiency findUniqueOrThrow
   */
  export type LanguageProficiencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * Filter, which LanguageProficiency to fetch.
     */
    where: LanguageProficiencyWhereUniqueInput
  }

  /**
   * LanguageProficiency findFirst
   */
  export type LanguageProficiencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * Filter, which LanguageProficiency to fetch.
     */
    where?: LanguageProficiencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageProficiencies to fetch.
     */
    orderBy?: LanguageProficiencyOrderByWithRelationInput | LanguageProficiencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageProficiencies.
     */
    cursor?: LanguageProficiencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageProficiencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageProficiencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageProficiencies.
     */
    distinct?: LanguageProficiencyScalarFieldEnum | LanguageProficiencyScalarFieldEnum[]
  }

  /**
   * LanguageProficiency findFirstOrThrow
   */
  export type LanguageProficiencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * Filter, which LanguageProficiency to fetch.
     */
    where?: LanguageProficiencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageProficiencies to fetch.
     */
    orderBy?: LanguageProficiencyOrderByWithRelationInput | LanguageProficiencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LanguageProficiencies.
     */
    cursor?: LanguageProficiencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageProficiencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageProficiencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LanguageProficiencies.
     */
    distinct?: LanguageProficiencyScalarFieldEnum | LanguageProficiencyScalarFieldEnum[]
  }

  /**
   * LanguageProficiency findMany
   */
  export type LanguageProficiencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * Filter, which LanguageProficiencies to fetch.
     */
    where?: LanguageProficiencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LanguageProficiencies to fetch.
     */
    orderBy?: LanguageProficiencyOrderByWithRelationInput | LanguageProficiencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LanguageProficiencies.
     */
    cursor?: LanguageProficiencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LanguageProficiencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LanguageProficiencies.
     */
    skip?: number
    distinct?: LanguageProficiencyScalarFieldEnum | LanguageProficiencyScalarFieldEnum[]
  }

  /**
   * LanguageProficiency create
   */
  export type LanguageProficiencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * The data needed to create a LanguageProficiency.
     */
    data: XOR<LanguageProficiencyCreateInput, LanguageProficiencyUncheckedCreateInput>
  }

  /**
   * LanguageProficiency createMany
   */
  export type LanguageProficiencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LanguageProficiencies.
     */
    data: LanguageProficiencyCreateManyInput | LanguageProficiencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LanguageProficiency update
   */
  export type LanguageProficiencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * The data needed to update a LanguageProficiency.
     */
    data: XOR<LanguageProficiencyUpdateInput, LanguageProficiencyUncheckedUpdateInput>
    /**
     * Choose, which LanguageProficiency to update.
     */
    where: LanguageProficiencyWhereUniqueInput
  }

  /**
   * LanguageProficiency updateMany
   */
  export type LanguageProficiencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LanguageProficiencies.
     */
    data: XOR<LanguageProficiencyUpdateManyMutationInput, LanguageProficiencyUncheckedUpdateManyInput>
    /**
     * Filter which LanguageProficiencies to update
     */
    where?: LanguageProficiencyWhereInput
    /**
     * Limit how many LanguageProficiencies to update.
     */
    limit?: number
  }

  /**
   * LanguageProficiency upsert
   */
  export type LanguageProficiencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * The filter to search for the LanguageProficiency to update in case it exists.
     */
    where: LanguageProficiencyWhereUniqueInput
    /**
     * In case the LanguageProficiency found by the `where` argument doesn't exist, create a new LanguageProficiency with this data.
     */
    create: XOR<LanguageProficiencyCreateInput, LanguageProficiencyUncheckedCreateInput>
    /**
     * In case the LanguageProficiency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LanguageProficiencyUpdateInput, LanguageProficiencyUncheckedUpdateInput>
  }

  /**
   * LanguageProficiency delete
   */
  export type LanguageProficiencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
    /**
     * Filter which LanguageProficiency to delete.
     */
    where: LanguageProficiencyWhereUniqueInput
  }

  /**
   * LanguageProficiency deleteMany
   */
  export type LanguageProficiencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LanguageProficiencies to delete
     */
    where?: LanguageProficiencyWhereInput
    /**
     * Limit how many LanguageProficiencies to delete.
     */
    limit?: number
  }

  /**
   * LanguageProficiency without action
   */
  export type LanguageProficiencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageProficiency
     */
    select?: LanguageProficiencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the LanguageProficiency
     */
    omit?: LanguageProficiencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LanguageProficiencyInclude<ExtArgs> | null
  }


  /**
   * Model ComputerSkill
   */

  export type AggregateComputerSkill = {
    _count: ComputerSkillCountAggregateOutputType | null
    _avg: ComputerSkillAvgAggregateOutputType | null
    _sum: ComputerSkillSumAggregateOutputType | null
    _min: ComputerSkillMinAggregateOutputType | null
    _max: ComputerSkillMaxAggregateOutputType | null
  }

  export type ComputerSkillAvgAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type ComputerSkillSumAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type ComputerSkillMinAggregateOutputType = {
    id: number | null
    skill: string | null
    proficiency: string | null
    applicantId: number | null
    createdAt: Date | null
  }

  export type ComputerSkillMaxAggregateOutputType = {
    id: number | null
    skill: string | null
    proficiency: string | null
    applicantId: number | null
    createdAt: Date | null
  }

  export type ComputerSkillCountAggregateOutputType = {
    id: number
    skill: number
    proficiency: number
    applicantId: number
    createdAt: number
    _all: number
  }


  export type ComputerSkillAvgAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type ComputerSkillSumAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type ComputerSkillMinAggregateInputType = {
    id?: true
    skill?: true
    proficiency?: true
    applicantId?: true
    createdAt?: true
  }

  export type ComputerSkillMaxAggregateInputType = {
    id?: true
    skill?: true
    proficiency?: true
    applicantId?: true
    createdAt?: true
  }

  export type ComputerSkillCountAggregateInputType = {
    id?: true
    skill?: true
    proficiency?: true
    applicantId?: true
    createdAt?: true
    _all?: true
  }

  export type ComputerSkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComputerSkill to aggregate.
     */
    where?: ComputerSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComputerSkills to fetch.
     */
    orderBy?: ComputerSkillOrderByWithRelationInput | ComputerSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComputerSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComputerSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComputerSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComputerSkills
    **/
    _count?: true | ComputerSkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComputerSkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComputerSkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComputerSkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComputerSkillMaxAggregateInputType
  }

  export type GetComputerSkillAggregateType<T extends ComputerSkillAggregateArgs> = {
        [P in keyof T & keyof AggregateComputerSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComputerSkill[P]>
      : GetScalarType<T[P], AggregateComputerSkill[P]>
  }




  export type ComputerSkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComputerSkillWhereInput
    orderBy?: ComputerSkillOrderByWithAggregationInput | ComputerSkillOrderByWithAggregationInput[]
    by: ComputerSkillScalarFieldEnum[] | ComputerSkillScalarFieldEnum
    having?: ComputerSkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComputerSkillCountAggregateInputType | true
    _avg?: ComputerSkillAvgAggregateInputType
    _sum?: ComputerSkillSumAggregateInputType
    _min?: ComputerSkillMinAggregateInputType
    _max?: ComputerSkillMaxAggregateInputType
  }

  export type ComputerSkillGroupByOutputType = {
    id: number
    skill: string
    proficiency: string
    applicantId: number
    createdAt: Date
    _count: ComputerSkillCountAggregateOutputType | null
    _avg: ComputerSkillAvgAggregateOutputType | null
    _sum: ComputerSkillSumAggregateOutputType | null
    _min: ComputerSkillMinAggregateOutputType | null
    _max: ComputerSkillMaxAggregateOutputType | null
  }

  type GetComputerSkillGroupByPayload<T extends ComputerSkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComputerSkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComputerSkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComputerSkillGroupByOutputType[P]>
            : GetScalarType<T[P], ComputerSkillGroupByOutputType[P]>
        }
      >
    >


  export type ComputerSkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skill?: boolean
    proficiency?: boolean
    applicantId?: boolean
    createdAt?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["computerSkill"]>



  export type ComputerSkillSelectScalar = {
    id?: boolean
    skill?: boolean
    proficiency?: boolean
    applicantId?: boolean
    createdAt?: boolean
  }

  export type ComputerSkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skill" | "proficiency" | "applicantId" | "createdAt", ExtArgs["result"]["computerSkill"]>
  export type ComputerSkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $ComputerSkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComputerSkill"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      skill: string
      proficiency: string
      applicantId: number
      createdAt: Date
    }, ExtArgs["result"]["computerSkill"]>
    composites: {}
  }

  type ComputerSkillGetPayload<S extends boolean | null | undefined | ComputerSkillDefaultArgs> = $Result.GetResult<Prisma.$ComputerSkillPayload, S>

  type ComputerSkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComputerSkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComputerSkillCountAggregateInputType | true
    }

  export interface ComputerSkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComputerSkill'], meta: { name: 'ComputerSkill' } }
    /**
     * Find zero or one ComputerSkill that matches the filter.
     * @param {ComputerSkillFindUniqueArgs} args - Arguments to find a ComputerSkill
     * @example
     * // Get one ComputerSkill
     * const computerSkill = await prisma.computerSkill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComputerSkillFindUniqueArgs>(args: SelectSubset<T, ComputerSkillFindUniqueArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ComputerSkill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComputerSkillFindUniqueOrThrowArgs} args - Arguments to find a ComputerSkill
     * @example
     * // Get one ComputerSkill
     * const computerSkill = await prisma.computerSkill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComputerSkillFindUniqueOrThrowArgs>(args: SelectSubset<T, ComputerSkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComputerSkill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputerSkillFindFirstArgs} args - Arguments to find a ComputerSkill
     * @example
     * // Get one ComputerSkill
     * const computerSkill = await prisma.computerSkill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComputerSkillFindFirstArgs>(args?: SelectSubset<T, ComputerSkillFindFirstArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComputerSkill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputerSkillFindFirstOrThrowArgs} args - Arguments to find a ComputerSkill
     * @example
     * // Get one ComputerSkill
     * const computerSkill = await prisma.computerSkill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComputerSkillFindFirstOrThrowArgs>(args?: SelectSubset<T, ComputerSkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComputerSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputerSkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComputerSkills
     * const computerSkills = await prisma.computerSkill.findMany()
     * 
     * // Get first 10 ComputerSkills
     * const computerSkills = await prisma.computerSkill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const computerSkillWithIdOnly = await prisma.computerSkill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComputerSkillFindManyArgs>(args?: SelectSubset<T, ComputerSkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ComputerSkill.
     * @param {ComputerSkillCreateArgs} args - Arguments to create a ComputerSkill.
     * @example
     * // Create one ComputerSkill
     * const ComputerSkill = await prisma.computerSkill.create({
     *   data: {
     *     // ... data to create a ComputerSkill
     *   }
     * })
     * 
     */
    create<T extends ComputerSkillCreateArgs>(args: SelectSubset<T, ComputerSkillCreateArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ComputerSkills.
     * @param {ComputerSkillCreateManyArgs} args - Arguments to create many ComputerSkills.
     * @example
     * // Create many ComputerSkills
     * const computerSkill = await prisma.computerSkill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComputerSkillCreateManyArgs>(args?: SelectSubset<T, ComputerSkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ComputerSkill.
     * @param {ComputerSkillDeleteArgs} args - Arguments to delete one ComputerSkill.
     * @example
     * // Delete one ComputerSkill
     * const ComputerSkill = await prisma.computerSkill.delete({
     *   where: {
     *     // ... filter to delete one ComputerSkill
     *   }
     * })
     * 
     */
    delete<T extends ComputerSkillDeleteArgs>(args: SelectSubset<T, ComputerSkillDeleteArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ComputerSkill.
     * @param {ComputerSkillUpdateArgs} args - Arguments to update one ComputerSkill.
     * @example
     * // Update one ComputerSkill
     * const computerSkill = await prisma.computerSkill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComputerSkillUpdateArgs>(args: SelectSubset<T, ComputerSkillUpdateArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ComputerSkills.
     * @param {ComputerSkillDeleteManyArgs} args - Arguments to filter ComputerSkills to delete.
     * @example
     * // Delete a few ComputerSkills
     * const { count } = await prisma.computerSkill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComputerSkillDeleteManyArgs>(args?: SelectSubset<T, ComputerSkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComputerSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputerSkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComputerSkills
     * const computerSkill = await prisma.computerSkill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComputerSkillUpdateManyArgs>(args: SelectSubset<T, ComputerSkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComputerSkill.
     * @param {ComputerSkillUpsertArgs} args - Arguments to update or create a ComputerSkill.
     * @example
     * // Update or create a ComputerSkill
     * const computerSkill = await prisma.computerSkill.upsert({
     *   create: {
     *     // ... data to create a ComputerSkill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComputerSkill we want to update
     *   }
     * })
     */
    upsert<T extends ComputerSkillUpsertArgs>(args: SelectSubset<T, ComputerSkillUpsertArgs<ExtArgs>>): Prisma__ComputerSkillClient<$Result.GetResult<Prisma.$ComputerSkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ComputerSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputerSkillCountArgs} args - Arguments to filter ComputerSkills to count.
     * @example
     * // Count the number of ComputerSkills
     * const count = await prisma.computerSkill.count({
     *   where: {
     *     // ... the filter for the ComputerSkills we want to count
     *   }
     * })
    **/
    count<T extends ComputerSkillCountArgs>(
      args?: Subset<T, ComputerSkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComputerSkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComputerSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputerSkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComputerSkillAggregateArgs>(args: Subset<T, ComputerSkillAggregateArgs>): Prisma.PrismaPromise<GetComputerSkillAggregateType<T>>

    /**
     * Group by ComputerSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComputerSkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComputerSkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComputerSkillGroupByArgs['orderBy'] }
        : { orderBy?: ComputerSkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComputerSkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComputerSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComputerSkill model
   */
  readonly fields: ComputerSkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComputerSkill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComputerSkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComputerSkill model
   */
  interface ComputerSkillFieldRefs {
    readonly id: FieldRef<"ComputerSkill", 'Int'>
    readonly skill: FieldRef<"ComputerSkill", 'String'>
    readonly proficiency: FieldRef<"ComputerSkill", 'String'>
    readonly applicantId: FieldRef<"ComputerSkill", 'Int'>
    readonly createdAt: FieldRef<"ComputerSkill", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ComputerSkill findUnique
   */
  export type ComputerSkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * Filter, which ComputerSkill to fetch.
     */
    where: ComputerSkillWhereUniqueInput
  }

  /**
   * ComputerSkill findUniqueOrThrow
   */
  export type ComputerSkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * Filter, which ComputerSkill to fetch.
     */
    where: ComputerSkillWhereUniqueInput
  }

  /**
   * ComputerSkill findFirst
   */
  export type ComputerSkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * Filter, which ComputerSkill to fetch.
     */
    where?: ComputerSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComputerSkills to fetch.
     */
    orderBy?: ComputerSkillOrderByWithRelationInput | ComputerSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComputerSkills.
     */
    cursor?: ComputerSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComputerSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComputerSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComputerSkills.
     */
    distinct?: ComputerSkillScalarFieldEnum | ComputerSkillScalarFieldEnum[]
  }

  /**
   * ComputerSkill findFirstOrThrow
   */
  export type ComputerSkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * Filter, which ComputerSkill to fetch.
     */
    where?: ComputerSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComputerSkills to fetch.
     */
    orderBy?: ComputerSkillOrderByWithRelationInput | ComputerSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComputerSkills.
     */
    cursor?: ComputerSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComputerSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComputerSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComputerSkills.
     */
    distinct?: ComputerSkillScalarFieldEnum | ComputerSkillScalarFieldEnum[]
  }

  /**
   * ComputerSkill findMany
   */
  export type ComputerSkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * Filter, which ComputerSkills to fetch.
     */
    where?: ComputerSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComputerSkills to fetch.
     */
    orderBy?: ComputerSkillOrderByWithRelationInput | ComputerSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComputerSkills.
     */
    cursor?: ComputerSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComputerSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComputerSkills.
     */
    skip?: number
    distinct?: ComputerSkillScalarFieldEnum | ComputerSkillScalarFieldEnum[]
  }

  /**
   * ComputerSkill create
   */
  export type ComputerSkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * The data needed to create a ComputerSkill.
     */
    data: XOR<ComputerSkillCreateInput, ComputerSkillUncheckedCreateInput>
  }

  /**
   * ComputerSkill createMany
   */
  export type ComputerSkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComputerSkills.
     */
    data: ComputerSkillCreateManyInput | ComputerSkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ComputerSkill update
   */
  export type ComputerSkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * The data needed to update a ComputerSkill.
     */
    data: XOR<ComputerSkillUpdateInput, ComputerSkillUncheckedUpdateInput>
    /**
     * Choose, which ComputerSkill to update.
     */
    where: ComputerSkillWhereUniqueInput
  }

  /**
   * ComputerSkill updateMany
   */
  export type ComputerSkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComputerSkills.
     */
    data: XOR<ComputerSkillUpdateManyMutationInput, ComputerSkillUncheckedUpdateManyInput>
    /**
     * Filter which ComputerSkills to update
     */
    where?: ComputerSkillWhereInput
    /**
     * Limit how many ComputerSkills to update.
     */
    limit?: number
  }

  /**
   * ComputerSkill upsert
   */
  export type ComputerSkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * The filter to search for the ComputerSkill to update in case it exists.
     */
    where: ComputerSkillWhereUniqueInput
    /**
     * In case the ComputerSkill found by the `where` argument doesn't exist, create a new ComputerSkill with this data.
     */
    create: XOR<ComputerSkillCreateInput, ComputerSkillUncheckedCreateInput>
    /**
     * In case the ComputerSkill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComputerSkillUpdateInput, ComputerSkillUncheckedUpdateInput>
  }

  /**
   * ComputerSkill delete
   */
  export type ComputerSkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
    /**
     * Filter which ComputerSkill to delete.
     */
    where: ComputerSkillWhereUniqueInput
  }

  /**
   * ComputerSkill deleteMany
   */
  export type ComputerSkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComputerSkills to delete
     */
    where?: ComputerSkillWhereInput
    /**
     * Limit how many ComputerSkills to delete.
     */
    limit?: number
  }

  /**
   * ComputerSkill without action
   */
  export type ComputerSkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComputerSkill
     */
    select?: ComputerSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComputerSkill
     */
    omit?: ComputerSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComputerSkillInclude<ExtArgs> | null
  }


  /**
   * Model GeneralSkill
   */

  export type AggregateGeneralSkill = {
    _count: GeneralSkillCountAggregateOutputType | null
    _avg: GeneralSkillAvgAggregateOutputType | null
    _sum: GeneralSkillSumAggregateOutputType | null
    _min: GeneralSkillMinAggregateOutputType | null
    _max: GeneralSkillMaxAggregateOutputType | null
  }

  export type GeneralSkillAvgAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type GeneralSkillSumAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type GeneralSkillMinAggregateOutputType = {
    id: number | null
    skill: string | null
    description: string | null
    proficiency: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneralSkillMaxAggregateOutputType = {
    id: number | null
    skill: string | null
    description: string | null
    proficiency: string | null
    applicantId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GeneralSkillCountAggregateOutputType = {
    id: number
    skill: number
    description: number
    proficiency: number
    applicantId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GeneralSkillAvgAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type GeneralSkillSumAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type GeneralSkillMinAggregateInputType = {
    id?: true
    skill?: true
    description?: true
    proficiency?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneralSkillMaxAggregateInputType = {
    id?: true
    skill?: true
    description?: true
    proficiency?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GeneralSkillCountAggregateInputType = {
    id?: true
    skill?: true
    description?: true
    proficiency?: true
    applicantId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GeneralSkillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralSkill to aggregate.
     */
    where?: GeneralSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSkills to fetch.
     */
    orderBy?: GeneralSkillOrderByWithRelationInput | GeneralSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneralSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GeneralSkills
    **/
    _count?: true | GeneralSkillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeneralSkillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeneralSkillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneralSkillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneralSkillMaxAggregateInputType
  }

  export type GetGeneralSkillAggregateType<T extends GeneralSkillAggregateArgs> = {
        [P in keyof T & keyof AggregateGeneralSkill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGeneralSkill[P]>
      : GetScalarType<T[P], AggregateGeneralSkill[P]>
  }




  export type GeneralSkillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneralSkillWhereInput
    orderBy?: GeneralSkillOrderByWithAggregationInput | GeneralSkillOrderByWithAggregationInput[]
    by: GeneralSkillScalarFieldEnum[] | GeneralSkillScalarFieldEnum
    having?: GeneralSkillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneralSkillCountAggregateInputType | true
    _avg?: GeneralSkillAvgAggregateInputType
    _sum?: GeneralSkillSumAggregateInputType
    _min?: GeneralSkillMinAggregateInputType
    _max?: GeneralSkillMaxAggregateInputType
  }

  export type GeneralSkillGroupByOutputType = {
    id: number
    skill: string
    description: string | null
    proficiency: string
    applicantId: number
    createdAt: Date
    updatedAt: Date
    _count: GeneralSkillCountAggregateOutputType | null
    _avg: GeneralSkillAvgAggregateOutputType | null
    _sum: GeneralSkillSumAggregateOutputType | null
    _min: GeneralSkillMinAggregateOutputType | null
    _max: GeneralSkillMaxAggregateOutputType | null
  }

  type GetGeneralSkillGroupByPayload<T extends GeneralSkillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneralSkillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneralSkillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneralSkillGroupByOutputType[P]>
            : GetScalarType<T[P], GeneralSkillGroupByOutputType[P]>
        }
      >
    >


  export type GeneralSkillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skill?: boolean
    description?: boolean
    proficiency?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["generalSkill"]>



  export type GeneralSkillSelectScalar = {
    id?: boolean
    skill?: boolean
    description?: boolean
    proficiency?: boolean
    applicantId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GeneralSkillOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skill" | "description" | "proficiency" | "applicantId" | "createdAt" | "updatedAt", ExtArgs["result"]["generalSkill"]>
  export type GeneralSkillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $GeneralSkillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GeneralSkill"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      skill: string
      description: string | null
      proficiency: string
      applicantId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["generalSkill"]>
    composites: {}
  }

  type GeneralSkillGetPayload<S extends boolean | null | undefined | GeneralSkillDefaultArgs> = $Result.GetResult<Prisma.$GeneralSkillPayload, S>

  type GeneralSkillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeneralSkillFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneralSkillCountAggregateInputType | true
    }

  export interface GeneralSkillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GeneralSkill'], meta: { name: 'GeneralSkill' } }
    /**
     * Find zero or one GeneralSkill that matches the filter.
     * @param {GeneralSkillFindUniqueArgs} args - Arguments to find a GeneralSkill
     * @example
     * // Get one GeneralSkill
     * const generalSkill = await prisma.generalSkill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneralSkillFindUniqueArgs>(args: SelectSubset<T, GeneralSkillFindUniqueArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GeneralSkill that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeneralSkillFindUniqueOrThrowArgs} args - Arguments to find a GeneralSkill
     * @example
     * // Get one GeneralSkill
     * const generalSkill = await prisma.generalSkill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneralSkillFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneralSkillFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralSkill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSkillFindFirstArgs} args - Arguments to find a GeneralSkill
     * @example
     * // Get one GeneralSkill
     * const generalSkill = await prisma.generalSkill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneralSkillFindFirstArgs>(args?: SelectSubset<T, GeneralSkillFindFirstArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GeneralSkill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSkillFindFirstOrThrowArgs} args - Arguments to find a GeneralSkill
     * @example
     * // Get one GeneralSkill
     * const generalSkill = await prisma.generalSkill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneralSkillFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneralSkillFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GeneralSkills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSkillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GeneralSkills
     * const generalSkills = await prisma.generalSkill.findMany()
     * 
     * // Get first 10 GeneralSkills
     * const generalSkills = await prisma.generalSkill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generalSkillWithIdOnly = await prisma.generalSkill.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneralSkillFindManyArgs>(args?: SelectSubset<T, GeneralSkillFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GeneralSkill.
     * @param {GeneralSkillCreateArgs} args - Arguments to create a GeneralSkill.
     * @example
     * // Create one GeneralSkill
     * const GeneralSkill = await prisma.generalSkill.create({
     *   data: {
     *     // ... data to create a GeneralSkill
     *   }
     * })
     * 
     */
    create<T extends GeneralSkillCreateArgs>(args: SelectSubset<T, GeneralSkillCreateArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GeneralSkills.
     * @param {GeneralSkillCreateManyArgs} args - Arguments to create many GeneralSkills.
     * @example
     * // Create many GeneralSkills
     * const generalSkill = await prisma.generalSkill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneralSkillCreateManyArgs>(args?: SelectSubset<T, GeneralSkillCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GeneralSkill.
     * @param {GeneralSkillDeleteArgs} args - Arguments to delete one GeneralSkill.
     * @example
     * // Delete one GeneralSkill
     * const GeneralSkill = await prisma.generalSkill.delete({
     *   where: {
     *     // ... filter to delete one GeneralSkill
     *   }
     * })
     * 
     */
    delete<T extends GeneralSkillDeleteArgs>(args: SelectSubset<T, GeneralSkillDeleteArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GeneralSkill.
     * @param {GeneralSkillUpdateArgs} args - Arguments to update one GeneralSkill.
     * @example
     * // Update one GeneralSkill
     * const generalSkill = await prisma.generalSkill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneralSkillUpdateArgs>(args: SelectSubset<T, GeneralSkillUpdateArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GeneralSkills.
     * @param {GeneralSkillDeleteManyArgs} args - Arguments to filter GeneralSkills to delete.
     * @example
     * // Delete a few GeneralSkills
     * const { count } = await prisma.generalSkill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneralSkillDeleteManyArgs>(args?: SelectSubset<T, GeneralSkillDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GeneralSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSkillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GeneralSkills
     * const generalSkill = await prisma.generalSkill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneralSkillUpdateManyArgs>(args: SelectSubset<T, GeneralSkillUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GeneralSkill.
     * @param {GeneralSkillUpsertArgs} args - Arguments to update or create a GeneralSkill.
     * @example
     * // Update or create a GeneralSkill
     * const generalSkill = await prisma.generalSkill.upsert({
     *   create: {
     *     // ... data to create a GeneralSkill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GeneralSkill we want to update
     *   }
     * })
     */
    upsert<T extends GeneralSkillUpsertArgs>(args: SelectSubset<T, GeneralSkillUpsertArgs<ExtArgs>>): Prisma__GeneralSkillClient<$Result.GetResult<Prisma.$GeneralSkillPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GeneralSkills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSkillCountArgs} args - Arguments to filter GeneralSkills to count.
     * @example
     * // Count the number of GeneralSkills
     * const count = await prisma.generalSkill.count({
     *   where: {
     *     // ... the filter for the GeneralSkills we want to count
     *   }
     * })
    **/
    count<T extends GeneralSkillCountArgs>(
      args?: Subset<T, GeneralSkillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneralSkillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GeneralSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSkillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneralSkillAggregateArgs>(args: Subset<T, GeneralSkillAggregateArgs>): Prisma.PrismaPromise<GetGeneralSkillAggregateType<T>>

    /**
     * Group by GeneralSkill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneralSkillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneralSkillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneralSkillGroupByArgs['orderBy'] }
        : { orderBy?: GeneralSkillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneralSkillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneralSkillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GeneralSkill model
   */
  readonly fields: GeneralSkillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GeneralSkill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneralSkillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GeneralSkill model
   */
  interface GeneralSkillFieldRefs {
    readonly id: FieldRef<"GeneralSkill", 'Int'>
    readonly skill: FieldRef<"GeneralSkill", 'String'>
    readonly description: FieldRef<"GeneralSkill", 'String'>
    readonly proficiency: FieldRef<"GeneralSkill", 'String'>
    readonly applicantId: FieldRef<"GeneralSkill", 'Int'>
    readonly createdAt: FieldRef<"GeneralSkill", 'DateTime'>
    readonly updatedAt: FieldRef<"GeneralSkill", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GeneralSkill findUnique
   */
  export type GeneralSkillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSkill to fetch.
     */
    where: GeneralSkillWhereUniqueInput
  }

  /**
   * GeneralSkill findUniqueOrThrow
   */
  export type GeneralSkillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSkill to fetch.
     */
    where: GeneralSkillWhereUniqueInput
  }

  /**
   * GeneralSkill findFirst
   */
  export type GeneralSkillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSkill to fetch.
     */
    where?: GeneralSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSkills to fetch.
     */
    orderBy?: GeneralSkillOrderByWithRelationInput | GeneralSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralSkills.
     */
    cursor?: GeneralSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralSkills.
     */
    distinct?: GeneralSkillScalarFieldEnum | GeneralSkillScalarFieldEnum[]
  }

  /**
   * GeneralSkill findFirstOrThrow
   */
  export type GeneralSkillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSkill to fetch.
     */
    where?: GeneralSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSkills to fetch.
     */
    orderBy?: GeneralSkillOrderByWithRelationInput | GeneralSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GeneralSkills.
     */
    cursor?: GeneralSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSkills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GeneralSkills.
     */
    distinct?: GeneralSkillScalarFieldEnum | GeneralSkillScalarFieldEnum[]
  }

  /**
   * GeneralSkill findMany
   */
  export type GeneralSkillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * Filter, which GeneralSkills to fetch.
     */
    where?: GeneralSkillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GeneralSkills to fetch.
     */
    orderBy?: GeneralSkillOrderByWithRelationInput | GeneralSkillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GeneralSkills.
     */
    cursor?: GeneralSkillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GeneralSkills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GeneralSkills.
     */
    skip?: number
    distinct?: GeneralSkillScalarFieldEnum | GeneralSkillScalarFieldEnum[]
  }

  /**
   * GeneralSkill create
   */
  export type GeneralSkillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * The data needed to create a GeneralSkill.
     */
    data: XOR<GeneralSkillCreateInput, GeneralSkillUncheckedCreateInput>
  }

  /**
   * GeneralSkill createMany
   */
  export type GeneralSkillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GeneralSkills.
     */
    data: GeneralSkillCreateManyInput | GeneralSkillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GeneralSkill update
   */
  export type GeneralSkillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * The data needed to update a GeneralSkill.
     */
    data: XOR<GeneralSkillUpdateInput, GeneralSkillUncheckedUpdateInput>
    /**
     * Choose, which GeneralSkill to update.
     */
    where: GeneralSkillWhereUniqueInput
  }

  /**
   * GeneralSkill updateMany
   */
  export type GeneralSkillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GeneralSkills.
     */
    data: XOR<GeneralSkillUpdateManyMutationInput, GeneralSkillUncheckedUpdateManyInput>
    /**
     * Filter which GeneralSkills to update
     */
    where?: GeneralSkillWhereInput
    /**
     * Limit how many GeneralSkills to update.
     */
    limit?: number
  }

  /**
   * GeneralSkill upsert
   */
  export type GeneralSkillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * The filter to search for the GeneralSkill to update in case it exists.
     */
    where: GeneralSkillWhereUniqueInput
    /**
     * In case the GeneralSkill found by the `where` argument doesn't exist, create a new GeneralSkill with this data.
     */
    create: XOR<GeneralSkillCreateInput, GeneralSkillUncheckedCreateInput>
    /**
     * In case the GeneralSkill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneralSkillUpdateInput, GeneralSkillUncheckedUpdateInput>
  }

  /**
   * GeneralSkill delete
   */
  export type GeneralSkillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
    /**
     * Filter which GeneralSkill to delete.
     */
    where: GeneralSkillWhereUniqueInput
  }

  /**
   * GeneralSkill deleteMany
   */
  export type GeneralSkillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GeneralSkills to delete
     */
    where?: GeneralSkillWhereInput
    /**
     * Limit how many GeneralSkills to delete.
     */
    limit?: number
  }

  /**
   * GeneralSkill without action
   */
  export type GeneralSkillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneralSkill
     */
    select?: GeneralSkillSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GeneralSkill
     */
    omit?: GeneralSkillOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneralSkillInclude<ExtArgs> | null
  }


  /**
   * Model SkillDemand
   */

  export type AggregateSkillDemand = {
    _count: SkillDemandCountAggregateOutputType | null
    _avg: SkillDemandAvgAggregateOutputType | null
    _sum: SkillDemandSumAggregateOutputType | null
    _min: SkillDemandMinAggregateOutputType | null
    _max: SkillDemandMaxAggregateOutputType | null
  }

  export type SkillDemandAvgAggregateOutputType = {
    id: number | null
    skillMasterId: number | null
    demandScore: number | null
    growth: number | null
  }

  export type SkillDemandSumAggregateOutputType = {
    id: number | null
    skillMasterId: number | null
    demandScore: number | null
    growth: number | null
  }

  export type SkillDemandMinAggregateOutputType = {
    id: number | null
    skillMasterId: number | null
    demandScore: number | null
    growth: number | null
    industry: string | null
    region: string | null
    period: Date | null
    source: string | null
    createdAt: Date | null
  }

  export type SkillDemandMaxAggregateOutputType = {
    id: number | null
    skillMasterId: number | null
    demandScore: number | null
    growth: number | null
    industry: string | null
    region: string | null
    period: Date | null
    source: string | null
    createdAt: Date | null
  }

  export type SkillDemandCountAggregateOutputType = {
    id: number
    skillMasterId: number
    demandScore: number
    growth: number
    industry: number
    region: number
    period: number
    source: number
    createdAt: number
    _all: number
  }


  export type SkillDemandAvgAggregateInputType = {
    id?: true
    skillMasterId?: true
    demandScore?: true
    growth?: true
  }

  export type SkillDemandSumAggregateInputType = {
    id?: true
    skillMasterId?: true
    demandScore?: true
    growth?: true
  }

  export type SkillDemandMinAggregateInputType = {
    id?: true
    skillMasterId?: true
    demandScore?: true
    growth?: true
    industry?: true
    region?: true
    period?: true
    source?: true
    createdAt?: true
  }

  export type SkillDemandMaxAggregateInputType = {
    id?: true
    skillMasterId?: true
    demandScore?: true
    growth?: true
    industry?: true
    region?: true
    period?: true
    source?: true
    createdAt?: true
  }

  export type SkillDemandCountAggregateInputType = {
    id?: true
    skillMasterId?: true
    demandScore?: true
    growth?: true
    industry?: true
    region?: true
    period?: true
    source?: true
    createdAt?: true
    _all?: true
  }

  export type SkillDemandAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillDemand to aggregate.
     */
    where?: SkillDemandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillDemands to fetch.
     */
    orderBy?: SkillDemandOrderByWithRelationInput | SkillDemandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SkillDemandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillDemands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillDemands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SkillDemands
    **/
    _count?: true | SkillDemandCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillDemandAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillDemandSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillDemandMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillDemandMaxAggregateInputType
  }

  export type GetSkillDemandAggregateType<T extends SkillDemandAggregateArgs> = {
        [P in keyof T & keyof AggregateSkillDemand]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkillDemand[P]>
      : GetScalarType<T[P], AggregateSkillDemand[P]>
  }




  export type SkillDemandGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SkillDemandWhereInput
    orderBy?: SkillDemandOrderByWithAggregationInput | SkillDemandOrderByWithAggregationInput[]
    by: SkillDemandScalarFieldEnum[] | SkillDemandScalarFieldEnum
    having?: SkillDemandScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillDemandCountAggregateInputType | true
    _avg?: SkillDemandAvgAggregateInputType
    _sum?: SkillDemandSumAggregateInputType
    _min?: SkillDemandMinAggregateInputType
    _max?: SkillDemandMaxAggregateInputType
  }

  export type SkillDemandGroupByOutputType = {
    id: number
    skillMasterId: number
    demandScore: number
    growth: number
    industry: string | null
    region: string | null
    period: Date
    source: string | null
    createdAt: Date
    _count: SkillDemandCountAggregateOutputType | null
    _avg: SkillDemandAvgAggregateOutputType | null
    _sum: SkillDemandSumAggregateOutputType | null
    _min: SkillDemandMinAggregateOutputType | null
    _max: SkillDemandMaxAggregateOutputType | null
  }

  type GetSkillDemandGroupByPayload<T extends SkillDemandGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SkillDemandGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillDemandGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillDemandGroupByOutputType[P]>
            : GetScalarType<T[P], SkillDemandGroupByOutputType[P]>
        }
      >
    >


  export type SkillDemandSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    skillMasterId?: boolean
    demandScore?: boolean
    growth?: boolean
    industry?: boolean
    region?: boolean
    period?: boolean
    source?: boolean
    createdAt?: boolean
    skillMaster?: boolean | SkillMasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["skillDemand"]>



  export type SkillDemandSelectScalar = {
    id?: boolean
    skillMasterId?: boolean
    demandScore?: boolean
    growth?: boolean
    industry?: boolean
    region?: boolean
    period?: boolean
    source?: boolean
    createdAt?: boolean
  }

  export type SkillDemandOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "skillMasterId" | "demandScore" | "growth" | "industry" | "region" | "period" | "source" | "createdAt", ExtArgs["result"]["skillDemand"]>
  export type SkillDemandInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    skillMaster?: boolean | SkillMasterDefaultArgs<ExtArgs>
  }

  export type $SkillDemandPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SkillDemand"
    objects: {
      skillMaster: Prisma.$SkillMasterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      skillMasterId: number
      demandScore: number
      growth: number
      industry: string | null
      region: string | null
      period: Date
      source: string | null
      createdAt: Date
    }, ExtArgs["result"]["skillDemand"]>
    composites: {}
  }

  type SkillDemandGetPayload<S extends boolean | null | undefined | SkillDemandDefaultArgs> = $Result.GetResult<Prisma.$SkillDemandPayload, S>

  type SkillDemandCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SkillDemandFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SkillDemandCountAggregateInputType | true
    }

  export interface SkillDemandDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SkillDemand'], meta: { name: 'SkillDemand' } }
    /**
     * Find zero or one SkillDemand that matches the filter.
     * @param {SkillDemandFindUniqueArgs} args - Arguments to find a SkillDemand
     * @example
     * // Get one SkillDemand
     * const skillDemand = await prisma.skillDemand.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SkillDemandFindUniqueArgs>(args: SelectSubset<T, SkillDemandFindUniqueArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SkillDemand that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SkillDemandFindUniqueOrThrowArgs} args - Arguments to find a SkillDemand
     * @example
     * // Get one SkillDemand
     * const skillDemand = await prisma.skillDemand.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SkillDemandFindUniqueOrThrowArgs>(args: SelectSubset<T, SkillDemandFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillDemand that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillDemandFindFirstArgs} args - Arguments to find a SkillDemand
     * @example
     * // Get one SkillDemand
     * const skillDemand = await prisma.skillDemand.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SkillDemandFindFirstArgs>(args?: SelectSubset<T, SkillDemandFindFirstArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SkillDemand that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillDemandFindFirstOrThrowArgs} args - Arguments to find a SkillDemand
     * @example
     * // Get one SkillDemand
     * const skillDemand = await prisma.skillDemand.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SkillDemandFindFirstOrThrowArgs>(args?: SelectSubset<T, SkillDemandFindFirstOrThrowArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SkillDemands that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillDemandFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SkillDemands
     * const skillDemands = await prisma.skillDemand.findMany()
     * 
     * // Get first 10 SkillDemands
     * const skillDemands = await prisma.skillDemand.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillDemandWithIdOnly = await prisma.skillDemand.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SkillDemandFindManyArgs>(args?: SelectSubset<T, SkillDemandFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SkillDemand.
     * @param {SkillDemandCreateArgs} args - Arguments to create a SkillDemand.
     * @example
     * // Create one SkillDemand
     * const SkillDemand = await prisma.skillDemand.create({
     *   data: {
     *     // ... data to create a SkillDemand
     *   }
     * })
     * 
     */
    create<T extends SkillDemandCreateArgs>(args: SelectSubset<T, SkillDemandCreateArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SkillDemands.
     * @param {SkillDemandCreateManyArgs} args - Arguments to create many SkillDemands.
     * @example
     * // Create many SkillDemands
     * const skillDemand = await prisma.skillDemand.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SkillDemandCreateManyArgs>(args?: SelectSubset<T, SkillDemandCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SkillDemand.
     * @param {SkillDemandDeleteArgs} args - Arguments to delete one SkillDemand.
     * @example
     * // Delete one SkillDemand
     * const SkillDemand = await prisma.skillDemand.delete({
     *   where: {
     *     // ... filter to delete one SkillDemand
     *   }
     * })
     * 
     */
    delete<T extends SkillDemandDeleteArgs>(args: SelectSubset<T, SkillDemandDeleteArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SkillDemand.
     * @param {SkillDemandUpdateArgs} args - Arguments to update one SkillDemand.
     * @example
     * // Update one SkillDemand
     * const skillDemand = await prisma.skillDemand.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SkillDemandUpdateArgs>(args: SelectSubset<T, SkillDemandUpdateArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SkillDemands.
     * @param {SkillDemandDeleteManyArgs} args - Arguments to filter SkillDemands to delete.
     * @example
     * // Delete a few SkillDemands
     * const { count } = await prisma.skillDemand.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SkillDemandDeleteManyArgs>(args?: SelectSubset<T, SkillDemandDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SkillDemands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillDemandUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SkillDemands
     * const skillDemand = await prisma.skillDemand.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SkillDemandUpdateManyArgs>(args: SelectSubset<T, SkillDemandUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SkillDemand.
     * @param {SkillDemandUpsertArgs} args - Arguments to update or create a SkillDemand.
     * @example
     * // Update or create a SkillDemand
     * const skillDemand = await prisma.skillDemand.upsert({
     *   create: {
     *     // ... data to create a SkillDemand
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SkillDemand we want to update
     *   }
     * })
     */
    upsert<T extends SkillDemandUpsertArgs>(args: SelectSubset<T, SkillDemandUpsertArgs<ExtArgs>>): Prisma__SkillDemandClient<$Result.GetResult<Prisma.$SkillDemandPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SkillDemands.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillDemandCountArgs} args - Arguments to filter SkillDemands to count.
     * @example
     * // Count the number of SkillDemands
     * const count = await prisma.skillDemand.count({
     *   where: {
     *     // ... the filter for the SkillDemands we want to count
     *   }
     * })
    **/
    count<T extends SkillDemandCountArgs>(
      args?: Subset<T, SkillDemandCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillDemandCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SkillDemand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillDemandAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillDemandAggregateArgs>(args: Subset<T, SkillDemandAggregateArgs>): Prisma.PrismaPromise<GetSkillDemandAggregateType<T>>

    /**
     * Group by SkillDemand.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillDemandGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillDemandGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillDemandGroupByArgs['orderBy'] }
        : { orderBy?: SkillDemandGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillDemandGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillDemandGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SkillDemand model
   */
  readonly fields: SkillDemandFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SkillDemand.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SkillDemandClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    skillMaster<T extends SkillMasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SkillMasterDefaultArgs<ExtArgs>>): Prisma__SkillMasterClient<$Result.GetResult<Prisma.$SkillMasterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SkillDemand model
   */
  interface SkillDemandFieldRefs {
    readonly id: FieldRef<"SkillDemand", 'Int'>
    readonly skillMasterId: FieldRef<"SkillDemand", 'Int'>
    readonly demandScore: FieldRef<"SkillDemand", 'Float'>
    readonly growth: FieldRef<"SkillDemand", 'Float'>
    readonly industry: FieldRef<"SkillDemand", 'String'>
    readonly region: FieldRef<"SkillDemand", 'String'>
    readonly period: FieldRef<"SkillDemand", 'DateTime'>
    readonly source: FieldRef<"SkillDemand", 'String'>
    readonly createdAt: FieldRef<"SkillDemand", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SkillDemand findUnique
   */
  export type SkillDemandFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * Filter, which SkillDemand to fetch.
     */
    where: SkillDemandWhereUniqueInput
  }

  /**
   * SkillDemand findUniqueOrThrow
   */
  export type SkillDemandFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * Filter, which SkillDemand to fetch.
     */
    where: SkillDemandWhereUniqueInput
  }

  /**
   * SkillDemand findFirst
   */
  export type SkillDemandFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * Filter, which SkillDemand to fetch.
     */
    where?: SkillDemandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillDemands to fetch.
     */
    orderBy?: SkillDemandOrderByWithRelationInput | SkillDemandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillDemands.
     */
    cursor?: SkillDemandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillDemands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillDemands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillDemands.
     */
    distinct?: SkillDemandScalarFieldEnum | SkillDemandScalarFieldEnum[]
  }

  /**
   * SkillDemand findFirstOrThrow
   */
  export type SkillDemandFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * Filter, which SkillDemand to fetch.
     */
    where?: SkillDemandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillDemands to fetch.
     */
    orderBy?: SkillDemandOrderByWithRelationInput | SkillDemandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SkillDemands.
     */
    cursor?: SkillDemandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillDemands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillDemands.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SkillDemands.
     */
    distinct?: SkillDemandScalarFieldEnum | SkillDemandScalarFieldEnum[]
  }

  /**
   * SkillDemand findMany
   */
  export type SkillDemandFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * Filter, which SkillDemands to fetch.
     */
    where?: SkillDemandWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SkillDemands to fetch.
     */
    orderBy?: SkillDemandOrderByWithRelationInput | SkillDemandOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SkillDemands.
     */
    cursor?: SkillDemandWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SkillDemands from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SkillDemands.
     */
    skip?: number
    distinct?: SkillDemandScalarFieldEnum | SkillDemandScalarFieldEnum[]
  }

  /**
   * SkillDemand create
   */
  export type SkillDemandCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * The data needed to create a SkillDemand.
     */
    data: XOR<SkillDemandCreateInput, SkillDemandUncheckedCreateInput>
  }

  /**
   * SkillDemand createMany
   */
  export type SkillDemandCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SkillDemands.
     */
    data: SkillDemandCreateManyInput | SkillDemandCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SkillDemand update
   */
  export type SkillDemandUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * The data needed to update a SkillDemand.
     */
    data: XOR<SkillDemandUpdateInput, SkillDemandUncheckedUpdateInput>
    /**
     * Choose, which SkillDemand to update.
     */
    where: SkillDemandWhereUniqueInput
  }

  /**
   * SkillDemand updateMany
   */
  export type SkillDemandUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SkillDemands.
     */
    data: XOR<SkillDemandUpdateManyMutationInput, SkillDemandUncheckedUpdateManyInput>
    /**
     * Filter which SkillDemands to update
     */
    where?: SkillDemandWhereInput
    /**
     * Limit how many SkillDemands to update.
     */
    limit?: number
  }

  /**
   * SkillDemand upsert
   */
  export type SkillDemandUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * The filter to search for the SkillDemand to update in case it exists.
     */
    where: SkillDemandWhereUniqueInput
    /**
     * In case the SkillDemand found by the `where` argument doesn't exist, create a new SkillDemand with this data.
     */
    create: XOR<SkillDemandCreateInput, SkillDemandUncheckedCreateInput>
    /**
     * In case the SkillDemand was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SkillDemandUpdateInput, SkillDemandUncheckedUpdateInput>
  }

  /**
   * SkillDemand delete
   */
  export type SkillDemandDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
    /**
     * Filter which SkillDemand to delete.
     */
    where: SkillDemandWhereUniqueInput
  }

  /**
   * SkillDemand deleteMany
   */
  export type SkillDemandDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SkillDemands to delete
     */
    where?: SkillDemandWhereInput
    /**
     * Limit how many SkillDemands to delete.
     */
    limit?: number
  }

  /**
   * SkillDemand without action
   */
  export type SkillDemandDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SkillDemand
     */
    select?: SkillDemandSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SkillDemand
     */
    omit?: SkillDemandOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SkillDemandInclude<ExtArgs> | null
  }


  /**
   * Model ChatRoom
   */

  export type AggregateChatRoom = {
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  export type ChatRoomAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    agentId: number | null
  }

  export type ChatRoomSumAggregateOutputType = {
    id: number | null
    userId: number | null
    agentId: number | null
  }

  export type ChatRoomMinAggregateOutputType = {
    id: number | null
    userId: number | null
    agentId: number | null
    topic: string | null
    status: string | null
    createdAt: Date | null
    endedAt: Date | null
  }

  export type ChatRoomMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    agentId: number | null
    topic: string | null
    status: string | null
    createdAt: Date | null
    endedAt: Date | null
  }

  export type ChatRoomCountAggregateOutputType = {
    id: number
    userId: number
    agentId: number
    topic: number
    status: number
    createdAt: number
    endedAt: number
    _all: number
  }


  export type ChatRoomAvgAggregateInputType = {
    id?: true
    userId?: true
    agentId?: true
  }

  export type ChatRoomSumAggregateInputType = {
    id?: true
    userId?: true
    agentId?: true
  }

  export type ChatRoomMinAggregateInputType = {
    id?: true
    userId?: true
    agentId?: true
    topic?: true
    status?: true
    createdAt?: true
    endedAt?: true
  }

  export type ChatRoomMaxAggregateInputType = {
    id?: true
    userId?: true
    agentId?: true
    topic?: true
    status?: true
    createdAt?: true
    endedAt?: true
  }

  export type ChatRoomCountAggregateInputType = {
    id?: true
    userId?: true
    agentId?: true
    topic?: true
    status?: true
    createdAt?: true
    endedAt?: true
    _all?: true
  }

  export type ChatRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRoom to aggregate.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatRooms
    **/
    _count?: true | ChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatRoomAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatRoomSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomMaxAggregateInputType
  }

  export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoom[P]>
      : GetScalarType<T[P], AggregateChatRoom[P]>
  }




  export type ChatRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatRoomWhereInput
    orderBy?: ChatRoomOrderByWithAggregationInput | ChatRoomOrderByWithAggregationInput[]
    by: ChatRoomScalarFieldEnum[] | ChatRoomScalarFieldEnum
    having?: ChatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomCountAggregateInputType | true
    _avg?: ChatRoomAvgAggregateInputType
    _sum?: ChatRoomSumAggregateInputType
    _min?: ChatRoomMinAggregateInputType
    _max?: ChatRoomMaxAggregateInputType
  }

  export type ChatRoomGroupByOutputType = {
    id: number
    userId: number
    agentId: number | null
    topic: string | null
    status: string
    createdAt: Date
    endedAt: Date | null
    _count: ChatRoomCountAggregateOutputType | null
    _avg: ChatRoomAvgAggregateOutputType | null
    _sum: ChatRoomSumAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  type GetChatRoomGroupByPayload<T extends ChatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type ChatRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    agentId?: boolean
    topic?: boolean
    status?: boolean
    createdAt?: boolean
    endedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    agent?: boolean | ChatRoom$agentArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>



  export type ChatRoomSelectScalar = {
    id?: boolean
    userId?: boolean
    agentId?: boolean
    topic?: boolean
    status?: boolean
    createdAt?: boolean
    endedAt?: boolean
  }

  export type ChatRoomOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "agentId" | "topic" | "status" | "createdAt" | "endedAt", ExtArgs["result"]["chatRoom"]>
  export type ChatRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    agent?: boolean | ChatRoom$agentArgs<ExtArgs>
    messages?: boolean | ChatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ChatRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatRoom"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      agent: Prisma.$UserPayload<ExtArgs> | null
      messages: Prisma.$ChatMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      agentId: number | null
      topic: string | null
      status: string
      createdAt: Date
      endedAt: Date | null
    }, ExtArgs["result"]["chatRoom"]>
    composites: {}
  }

  type ChatRoomGetPayload<S extends boolean | null | undefined | ChatRoomDefaultArgs> = $Result.GetResult<Prisma.$ChatRoomPayload, S>

  type ChatRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatRoomFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatRoomCountAggregateInputType | true
    }

  export interface ChatRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatRoom'], meta: { name: 'ChatRoom' } }
    /**
     * Find zero or one ChatRoom that matches the filter.
     * @param {ChatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatRoomFindUniqueArgs>(args: SelectSubset<T, ChatRoomFindUniqueArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatRoom that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatRoomFindFirstArgs>(args?: SelectSubset<T, ChatRoomFindFirstArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany()
     * 
     * // Get first 10 ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatRoomWithIdOnly = await prisma.chatRoom.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatRoomFindManyArgs>(args?: SelectSubset<T, ChatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatRoom.
     * @param {ChatRoomCreateArgs} args - Arguments to create a ChatRoom.
     * @example
     * // Create one ChatRoom
     * const ChatRoom = await prisma.chatRoom.create({
     *   data: {
     *     // ... data to create a ChatRoom
     *   }
     * })
     * 
     */
    create<T extends ChatRoomCreateArgs>(args: SelectSubset<T, ChatRoomCreateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatRooms.
     * @param {ChatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatRoomCreateManyArgs>(args?: SelectSubset<T, ChatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatRoom.
     * @param {ChatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
     * @example
     * // Delete one ChatRoom
     * const ChatRoom = await prisma.chatRoom.delete({
     *   where: {
     *     // ... filter to delete one ChatRoom
     *   }
     * })
     * 
     */
    delete<T extends ChatRoomDeleteArgs>(args: SelectSubset<T, ChatRoomDeleteArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatRoom.
     * @param {ChatRoomUpdateArgs} args - Arguments to update one ChatRoom.
     * @example
     * // Update one ChatRoom
     * const chatRoom = await prisma.chatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatRoomUpdateArgs>(args: SelectSubset<T, ChatRoomUpdateArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatRooms.
     * @param {ChatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
     * @example
     * // Delete a few ChatRooms
     * const { count } = await prisma.chatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatRoomDeleteManyArgs>(args?: SelectSubset<T, ChatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatRoomUpdateManyArgs>(args: SelectSubset<T, ChatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoom.
     * @param {ChatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
     * @example
     * // Update or create a ChatRoom
     * const chatRoom = await prisma.chatRoom.upsert({
     *   create: {
     *     // ... data to create a ChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoom we want to update
     *   }
     * })
     */
    upsert<T extends ChatRoomUpsertArgs>(args: SelectSubset<T, ChatRoomUpsertArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomCountArgs} args - Arguments to filter ChatRooms to count.
     * @example
     * // Count the number of ChatRooms
     * const count = await prisma.chatRoom.count({
     *   where: {
     *     // ... the filter for the ChatRooms we want to count
     *   }
     * })
    **/
    count<T extends ChatRoomCountArgs>(
      args?: Subset<T, ChatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomAggregateArgs>(args: Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

    /**
     * Group by ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatRoomGroupByArgs['orderBy'] }
        : { orderBy?: ChatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatRoom model
   */
  readonly fields: ChatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    agent<T extends ChatRoom$agentArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$agentArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    messages<T extends ChatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatRoom model
   */
  interface ChatRoomFieldRefs {
    readonly id: FieldRef<"ChatRoom", 'Int'>
    readonly userId: FieldRef<"ChatRoom", 'Int'>
    readonly agentId: FieldRef<"ChatRoom", 'Int'>
    readonly topic: FieldRef<"ChatRoom", 'String'>
    readonly status: FieldRef<"ChatRoom", 'String'>
    readonly createdAt: FieldRef<"ChatRoom", 'DateTime'>
    readonly endedAt: FieldRef<"ChatRoom", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatRoom findUnique
   */
  export type ChatRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findUniqueOrThrow
   */
  export type ChatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom findFirst
   */
  export type ChatRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findFirstOrThrow
   */
  export type ChatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRoom to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom findMany
   */
  export type ChatRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter, which ChatRooms to fetch.
     */
    where?: ChatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatRooms to fetch.
     */
    orderBy?: ChatRoomOrderByWithRelationInput | ChatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatRooms.
     */
    cursor?: ChatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatRooms.
     */
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * ChatRoom create
   */
  export type ChatRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatRoom.
     */
    data: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
  }

  /**
   * ChatRoom createMany
   */
  export type ChatRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatRooms.
     */
    data: ChatRoomCreateManyInput | ChatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatRoom update
   */
  export type ChatRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatRoom.
     */
    data: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
    /**
     * Choose, which ChatRoom to update.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom updateMany
   */
  export type ChatRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatRooms.
     */
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyInput>
    /**
     * Filter which ChatRooms to update
     */
    where?: ChatRoomWhereInput
    /**
     * Limit how many ChatRooms to update.
     */
    limit?: number
  }

  /**
   * ChatRoom upsert
   */
  export type ChatRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatRoom to update in case it exists.
     */
    where: ChatRoomWhereUniqueInput
    /**
     * In case the ChatRoom found by the `where` argument doesn't exist, create a new ChatRoom with this data.
     */
    create: XOR<ChatRoomCreateInput, ChatRoomUncheckedCreateInput>
    /**
     * In case the ChatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatRoomUpdateInput, ChatRoomUncheckedUpdateInput>
  }

  /**
   * ChatRoom delete
   */
  export type ChatRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
    /**
     * Filter which ChatRoom to delete.
     */
    where: ChatRoomWhereUniqueInput
  }

  /**
   * ChatRoom deleteMany
   */
  export type ChatRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatRooms to delete
     */
    where?: ChatRoomWhereInput
    /**
     * Limit how many ChatRooms to delete.
     */
    limit?: number
  }

  /**
   * ChatRoom.agent
   */
  export type ChatRoom$agentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChatRoom.messages
   */
  export type ChatRoom$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    cursor?: ChatMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatRoom without action
   */
  export type ChatRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoom
     */
    select?: ChatRoomSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatRoom
     */
    omit?: ChatRoomOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatRoomInclude<ExtArgs> | null
  }


  /**
   * Model ChatMessage
   */

  export type AggregateChatMessage = {
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  export type ChatMessageAvgAggregateOutputType = {
    id: number | null
    roomId: number | null
    senderId: number | null
  }

  export type ChatMessageSumAggregateOutputType = {
    id: number | null
    roomId: number | null
    senderId: number | null
  }

  export type ChatMessageMinAggregateOutputType = {
    id: number | null
    roomId: number | null
    senderId: number | null
    message: string | null
    type: string | null
    isRead: boolean | null
    readAt: Date | null
    timestamp: Date | null
  }

  export type ChatMessageMaxAggregateOutputType = {
    id: number | null
    roomId: number | null
    senderId: number | null
    message: string | null
    type: string | null
    isRead: boolean | null
    readAt: Date | null
    timestamp: Date | null
  }

  export type ChatMessageCountAggregateOutputType = {
    id: number
    roomId: number
    senderId: number
    message: number
    type: number
    isRead: number
    readAt: number
    timestamp: number
    _all: number
  }


  export type ChatMessageAvgAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
  }

  export type ChatMessageSumAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
  }

  export type ChatMessageMinAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
    message?: true
    type?: true
    isRead?: true
    readAt?: true
    timestamp?: true
  }

  export type ChatMessageMaxAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
    message?: true
    type?: true
    isRead?: true
    readAt?: true
    timestamp?: true
  }

  export type ChatMessageCountAggregateInputType = {
    id?: true
    roomId?: true
    senderId?: true
    message?: true
    type?: true
    isRead?: true
    readAt?: true
    timestamp?: true
    _all?: true
  }

  export type ChatMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessage to aggregate.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatMessages
    **/
    _count?: true | ChatMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatMessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatMessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMessageMaxAggregateInputType
  }

  export type GetChatMessageAggregateType<T extends ChatMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateChatMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatMessage[P]>
      : GetScalarType<T[P], AggregateChatMessage[P]>
  }




  export type ChatMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatMessageWhereInput
    orderBy?: ChatMessageOrderByWithAggregationInput | ChatMessageOrderByWithAggregationInput[]
    by: ChatMessageScalarFieldEnum[] | ChatMessageScalarFieldEnum
    having?: ChatMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatMessageCountAggregateInputType | true
    _avg?: ChatMessageAvgAggregateInputType
    _sum?: ChatMessageSumAggregateInputType
    _min?: ChatMessageMinAggregateInputType
    _max?: ChatMessageMaxAggregateInputType
  }

  export type ChatMessageGroupByOutputType = {
    id: number
    roomId: number
    senderId: number | null
    message: string
    type: string
    isRead: boolean
    readAt: Date | null
    timestamp: Date
    _count: ChatMessageCountAggregateOutputType | null
    _avg: ChatMessageAvgAggregateOutputType | null
    _sum: ChatMessageSumAggregateOutputType | null
    _min: ChatMessageMinAggregateOutputType | null
    _max: ChatMessageMaxAggregateOutputType | null
  }

  type GetChatMessageGroupByPayload<T extends ChatMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ChatMessageGroupByOutputType[P]>
        }
      >
    >


  export type ChatMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roomId?: boolean
    senderId?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    readAt?: boolean
    timestamp?: boolean
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    sender?: boolean | ChatMessage$senderArgs<ExtArgs>
  }, ExtArgs["result"]["chatMessage"]>



  export type ChatMessageSelectScalar = {
    id?: boolean
    roomId?: boolean
    senderId?: boolean
    message?: boolean
    type?: boolean
    isRead?: boolean
    readAt?: boolean
    timestamp?: boolean
  }

  export type ChatMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roomId" | "senderId" | "message" | "type" | "isRead" | "readAt" | "timestamp", ExtArgs["result"]["chatMessage"]>
  export type ChatMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    room?: boolean | ChatRoomDefaultArgs<ExtArgs>
    sender?: boolean | ChatMessage$senderArgs<ExtArgs>
  }

  export type $ChatMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatMessage"
    objects: {
      room: Prisma.$ChatRoomPayload<ExtArgs>
      sender: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roomId: number
      senderId: number | null
      message: string
      type: string
      isRead: boolean
      readAt: Date | null
      timestamp: Date
    }, ExtArgs["result"]["chatMessage"]>
    composites: {}
  }

  type ChatMessageGetPayload<S extends boolean | null | undefined | ChatMessageDefaultArgs> = $Result.GetResult<Prisma.$ChatMessagePayload, S>

  type ChatMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatMessageCountAggregateInputType | true
    }

  export interface ChatMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatMessage'], meta: { name: 'ChatMessage' } }
    /**
     * Find zero or one ChatMessage that matches the filter.
     * @param {ChatMessageFindUniqueArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatMessageFindUniqueArgs>(args: SelectSubset<T, ChatMessageFindUniqueArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatMessageFindUniqueOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatMessageFindFirstArgs>(args?: SelectSubset<T, ChatMessageFindFirstArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindFirstOrThrowArgs} args - Arguments to find a ChatMessage
     * @example
     * // Get one ChatMessage
     * const chatMessage = await prisma.chatMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany()
     * 
     * // Get first 10 ChatMessages
     * const chatMessages = await prisma.chatMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatMessageWithIdOnly = await prisma.chatMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatMessageFindManyArgs>(args?: SelectSubset<T, ChatMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatMessage.
     * @param {ChatMessageCreateArgs} args - Arguments to create a ChatMessage.
     * @example
     * // Create one ChatMessage
     * const ChatMessage = await prisma.chatMessage.create({
     *   data: {
     *     // ... data to create a ChatMessage
     *   }
     * })
     * 
     */
    create<T extends ChatMessageCreateArgs>(args: SelectSubset<T, ChatMessageCreateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatMessages.
     * @param {ChatMessageCreateManyArgs} args - Arguments to create many ChatMessages.
     * @example
     * // Create many ChatMessages
     * const chatMessage = await prisma.chatMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatMessageCreateManyArgs>(args?: SelectSubset<T, ChatMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatMessage.
     * @param {ChatMessageDeleteArgs} args - Arguments to delete one ChatMessage.
     * @example
     * // Delete one ChatMessage
     * const ChatMessage = await prisma.chatMessage.delete({
     *   where: {
     *     // ... filter to delete one ChatMessage
     *   }
     * })
     * 
     */
    delete<T extends ChatMessageDeleteArgs>(args: SelectSubset<T, ChatMessageDeleteArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatMessage.
     * @param {ChatMessageUpdateArgs} args - Arguments to update one ChatMessage.
     * @example
     * // Update one ChatMessage
     * const chatMessage = await prisma.chatMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatMessageUpdateArgs>(args: SelectSubset<T, ChatMessageUpdateArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatMessages.
     * @param {ChatMessageDeleteManyArgs} args - Arguments to filter ChatMessages to delete.
     * @example
     * // Delete a few ChatMessages
     * const { count } = await prisma.chatMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatMessageDeleteManyArgs>(args?: SelectSubset<T, ChatMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatMessages
     * const chatMessage = await prisma.chatMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatMessageUpdateManyArgs>(args: SelectSubset<T, ChatMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatMessage.
     * @param {ChatMessageUpsertArgs} args - Arguments to update or create a ChatMessage.
     * @example
     * // Update or create a ChatMessage
     * const chatMessage = await prisma.chatMessage.upsert({
     *   create: {
     *     // ... data to create a ChatMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatMessage we want to update
     *   }
     * })
     */
    upsert<T extends ChatMessageUpsertArgs>(args: SelectSubset<T, ChatMessageUpsertArgs<ExtArgs>>): Prisma__ChatMessageClient<$Result.GetResult<Prisma.$ChatMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageCountArgs} args - Arguments to filter ChatMessages to count.
     * @example
     * // Count the number of ChatMessages
     * const count = await prisma.chatMessage.count({
     *   where: {
     *     // ... the filter for the ChatMessages we want to count
     *   }
     * })
    **/
    count<T extends ChatMessageCountArgs>(
      args?: Subset<T, ChatMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatMessageAggregateArgs>(args: Subset<T, ChatMessageAggregateArgs>): Prisma.PrismaPromise<GetChatMessageAggregateType<T>>

    /**
     * Group by ChatMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatMessageGroupByArgs['orderBy'] }
        : { orderBy?: ChatMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatMessage model
   */
  readonly fields: ChatMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    room<T extends ChatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatRoomDefaultArgs<ExtArgs>>): Prisma__ChatRoomClient<$Result.GetResult<Prisma.$ChatRoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sender<T extends ChatMessage$senderArgs<ExtArgs> = {}>(args?: Subset<T, ChatMessage$senderArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatMessage model
   */
  interface ChatMessageFieldRefs {
    readonly id: FieldRef<"ChatMessage", 'Int'>
    readonly roomId: FieldRef<"ChatMessage", 'Int'>
    readonly senderId: FieldRef<"ChatMessage", 'Int'>
    readonly message: FieldRef<"ChatMessage", 'String'>
    readonly type: FieldRef<"ChatMessage", 'String'>
    readonly isRead: FieldRef<"ChatMessage", 'Boolean'>
    readonly readAt: FieldRef<"ChatMessage", 'DateTime'>
    readonly timestamp: FieldRef<"ChatMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ChatMessage findUnique
   */
  export type ChatMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findUniqueOrThrow
   */
  export type ChatMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage findFirst
   */
  export type ChatMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findFirstOrThrow
   */
  export type ChatMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessage to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatMessages.
     */
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage findMany
   */
  export type ChatMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter, which ChatMessages to fetch.
     */
    where?: ChatMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatMessages to fetch.
     */
    orderBy?: ChatMessageOrderByWithRelationInput | ChatMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatMessages.
     */
    cursor?: ChatMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatMessages.
     */
    skip?: number
    distinct?: ChatMessageScalarFieldEnum | ChatMessageScalarFieldEnum[]
  }

  /**
   * ChatMessage create
   */
  export type ChatMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatMessage.
     */
    data: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
  }

  /**
   * ChatMessage createMany
   */
  export type ChatMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatMessages.
     */
    data: ChatMessageCreateManyInput | ChatMessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatMessage update
   */
  export type ChatMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatMessage.
     */
    data: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
    /**
     * Choose, which ChatMessage to update.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage updateMany
   */
  export type ChatMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatMessages.
     */
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyInput>
    /**
     * Filter which ChatMessages to update
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to update.
     */
    limit?: number
  }

  /**
   * ChatMessage upsert
   */
  export type ChatMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatMessage to update in case it exists.
     */
    where: ChatMessageWhereUniqueInput
    /**
     * In case the ChatMessage found by the `where` argument doesn't exist, create a new ChatMessage with this data.
     */
    create: XOR<ChatMessageCreateInput, ChatMessageUncheckedCreateInput>
    /**
     * In case the ChatMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatMessageUpdateInput, ChatMessageUncheckedUpdateInput>
  }

  /**
   * ChatMessage delete
   */
  export type ChatMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
    /**
     * Filter which ChatMessage to delete.
     */
    where: ChatMessageWhereUniqueInput
  }

  /**
   * ChatMessage deleteMany
   */
  export type ChatMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatMessages to delete
     */
    where?: ChatMessageWhereInput
    /**
     * Limit how many ChatMessages to delete.
     */
    limit?: number
  }

  /**
   * ChatMessage.sender
   */
  export type ChatMessage$senderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ChatMessage without action
   */
  export type ChatMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatMessage
     */
    select?: ChatMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatMessage
     */
    omit?: ChatMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatMessageInclude<ExtArgs> | null
  }


  /**
   * Model NotificationSettings
   */

  export type AggregateNotificationSettings = {
    _count: NotificationSettingsCountAggregateOutputType | null
    _avg: NotificationSettingsAvgAggregateOutputType | null
    _sum: NotificationSettingsSumAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  export type NotificationSettingsAvgAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type NotificationSettingsSumAggregateOutputType = {
    id: number | null
    applicantId: number | null
  }

  export type NotificationSettingsMinAggregateOutputType = {
    id: number | null
    applicantId: number | null
    emailEnabled: boolean | null
    emailJobMatches: boolean | null
    emailApplicationStatus: boolean | null
    emailInterviews: boolean | null
    emailMarketing: boolean | null
    smsEnabled: boolean | null
    smsApplicationStatus: boolean | null
    smsInterviews: boolean | null
    smsUrgent: boolean | null
    pushEnabled: boolean | null
    pushJobMatches: boolean | null
    pushApplicationStatus: boolean | null
    pushInterviews: boolean | null
    profileVisible: boolean | null
    autoApply: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSettingsMaxAggregateOutputType = {
    id: number | null
    applicantId: number | null
    emailEnabled: boolean | null
    emailJobMatches: boolean | null
    emailApplicationStatus: boolean | null
    emailInterviews: boolean | null
    emailMarketing: boolean | null
    smsEnabled: boolean | null
    smsApplicationStatus: boolean | null
    smsInterviews: boolean | null
    smsUrgent: boolean | null
    pushEnabled: boolean | null
    pushJobMatches: boolean | null
    pushApplicationStatus: boolean | null
    pushInterviews: boolean | null
    profileVisible: boolean | null
    autoApply: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationSettingsCountAggregateOutputType = {
    id: number
    applicantId: number
    emailEnabled: number
    emailJobMatches: number
    emailApplicationStatus: number
    emailInterviews: number
    emailMarketing: number
    smsEnabled: number
    smsApplicationStatus: number
    smsInterviews: number
    smsUrgent: number
    pushEnabled: number
    pushJobMatches: number
    pushApplicationStatus: number
    pushInterviews: number
    profileVisible: number
    autoApply: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationSettingsAvgAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type NotificationSettingsSumAggregateInputType = {
    id?: true
    applicantId?: true
  }

  export type NotificationSettingsMinAggregateInputType = {
    id?: true
    applicantId?: true
    emailEnabled?: true
    emailJobMatches?: true
    emailApplicationStatus?: true
    emailInterviews?: true
    emailMarketing?: true
    smsEnabled?: true
    smsApplicationStatus?: true
    smsInterviews?: true
    smsUrgent?: true
    pushEnabled?: true
    pushJobMatches?: true
    pushApplicationStatus?: true
    pushInterviews?: true
    profileVisible?: true
    autoApply?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSettingsMaxAggregateInputType = {
    id?: true
    applicantId?: true
    emailEnabled?: true
    emailJobMatches?: true
    emailApplicationStatus?: true
    emailInterviews?: true
    emailMarketing?: true
    smsEnabled?: true
    smsApplicationStatus?: true
    smsInterviews?: true
    smsUrgent?: true
    pushEnabled?: true
    pushJobMatches?: true
    pushApplicationStatus?: true
    pushInterviews?: true
    profileVisible?: true
    autoApply?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationSettingsCountAggregateInputType = {
    id?: true
    applicantId?: true
    emailEnabled?: true
    emailJobMatches?: true
    emailApplicationStatus?: true
    emailInterviews?: true
    emailMarketing?: true
    smsEnabled?: true
    smsApplicationStatus?: true
    smsInterviews?: true
    smsUrgent?: true
    pushEnabled?: true
    pushJobMatches?: true
    pushApplicationStatus?: true
    pushInterviews?: true
    profileVisible?: true
    autoApply?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to aggregate.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationSettings
    **/
    _count?: true | NotificationSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type GetNotificationSettingsAggregateType<T extends NotificationSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationSettings[P]>
      : GetScalarType<T[P], AggregateNotificationSettings[P]>
  }




  export type NotificationSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationSettingsWhereInput
    orderBy?: NotificationSettingsOrderByWithAggregationInput | NotificationSettingsOrderByWithAggregationInput[]
    by: NotificationSettingsScalarFieldEnum[] | NotificationSettingsScalarFieldEnum
    having?: NotificationSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationSettingsCountAggregateInputType | true
    _avg?: NotificationSettingsAvgAggregateInputType
    _sum?: NotificationSettingsSumAggregateInputType
    _min?: NotificationSettingsMinAggregateInputType
    _max?: NotificationSettingsMaxAggregateInputType
  }

  export type NotificationSettingsGroupByOutputType = {
    id: number
    applicantId: number
    emailEnabled: boolean
    emailJobMatches: boolean
    emailApplicationStatus: boolean
    emailInterviews: boolean
    emailMarketing: boolean
    smsEnabled: boolean
    smsApplicationStatus: boolean
    smsInterviews: boolean
    smsUrgent: boolean
    pushEnabled: boolean
    pushJobMatches: boolean
    pushApplicationStatus: boolean
    pushInterviews: boolean
    profileVisible: boolean
    autoApply: boolean
    createdAt: Date
    updatedAt: Date
    _count: NotificationSettingsCountAggregateOutputType | null
    _avg: NotificationSettingsAvgAggregateOutputType | null
    _sum: NotificationSettingsSumAggregateOutputType | null
    _min: NotificationSettingsMinAggregateOutputType | null
    _max: NotificationSettingsMaxAggregateOutputType | null
  }

  type GetNotificationSettingsGroupByPayload<T extends NotificationSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationSettingsGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicantId?: boolean
    emailEnabled?: boolean
    emailJobMatches?: boolean
    emailApplicationStatus?: boolean
    emailInterviews?: boolean
    emailMarketing?: boolean
    smsEnabled?: boolean
    smsApplicationStatus?: boolean
    smsInterviews?: boolean
    smsUrgent?: boolean
    pushEnabled?: boolean
    pushJobMatches?: boolean
    pushApplicationStatus?: boolean
    pushInterviews?: boolean
    profileVisible?: boolean
    autoApply?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationSettings"]>



  export type NotificationSettingsSelectScalar = {
    id?: boolean
    applicantId?: boolean
    emailEnabled?: boolean
    emailJobMatches?: boolean
    emailApplicationStatus?: boolean
    emailInterviews?: boolean
    emailMarketing?: boolean
    smsEnabled?: boolean
    smsApplicationStatus?: boolean
    smsInterviews?: boolean
    smsUrgent?: boolean
    pushEnabled?: boolean
    pushJobMatches?: boolean
    pushApplicationStatus?: boolean
    pushInterviews?: boolean
    profileVisible?: boolean
    autoApply?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicantId" | "emailEnabled" | "emailJobMatches" | "emailApplicationStatus" | "emailInterviews" | "emailMarketing" | "smsEnabled" | "smsApplicationStatus" | "smsInterviews" | "smsUrgent" | "pushEnabled" | "pushJobMatches" | "pushApplicationStatus" | "pushInterviews" | "profileVisible" | "autoApply" | "createdAt" | "updatedAt", ExtArgs["result"]["notificationSettings"]>
  export type NotificationSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    applicant?: boolean | ApplicantDefaultArgs<ExtArgs>
  }

  export type $NotificationSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationSettings"
    objects: {
      applicant: Prisma.$ApplicantPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      applicantId: number
      emailEnabled: boolean
      emailJobMatches: boolean
      emailApplicationStatus: boolean
      emailInterviews: boolean
      emailMarketing: boolean
      smsEnabled: boolean
      smsApplicationStatus: boolean
      smsInterviews: boolean
      smsUrgent: boolean
      pushEnabled: boolean
      pushJobMatches: boolean
      pushApplicationStatus: boolean
      pushInterviews: boolean
      profileVisible: boolean
      autoApply: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notificationSettings"]>
    composites: {}
  }

  type NotificationSettingsGetPayload<S extends boolean | null | undefined | NotificationSettingsDefaultArgs> = $Result.GetResult<Prisma.$NotificationSettingsPayload, S>

  type NotificationSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationSettingsCountAggregateInputType | true
    }

  export interface NotificationSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationSettings'], meta: { name: 'NotificationSettings' } }
    /**
     * Find zero or one NotificationSettings that matches the filter.
     * @param {NotificationSettingsFindUniqueArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationSettingsFindUniqueArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one NotificationSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationSettingsFindUniqueOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationSettingsFindFirstArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first NotificationSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindFirstOrThrowArgs} args - Arguments to find a NotificationSettings
     * @example
     * // Get one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more NotificationSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany()
     * 
     * // Get first 10 NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationSettingsWithIdOnly = await prisma.notificationSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationSettingsFindManyArgs>(args?: SelectSubset<T, NotificationSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a NotificationSettings.
     * @param {NotificationSettingsCreateArgs} args - Arguments to create a NotificationSettings.
     * @example
     * // Create one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.create({
     *   data: {
     *     // ... data to create a NotificationSettings
     *   }
     * })
     * 
     */
    create<T extends NotificationSettingsCreateArgs>(args: SelectSubset<T, NotificationSettingsCreateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many NotificationSettings.
     * @param {NotificationSettingsCreateManyArgs} args - Arguments to create many NotificationSettings.
     * @example
     * // Create many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationSettingsCreateManyArgs>(args?: SelectSubset<T, NotificationSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationSettings.
     * @param {NotificationSettingsDeleteArgs} args - Arguments to delete one NotificationSettings.
     * @example
     * // Delete one NotificationSettings
     * const NotificationSettings = await prisma.notificationSettings.delete({
     *   where: {
     *     // ... filter to delete one NotificationSettings
     *   }
     * })
     * 
     */
    delete<T extends NotificationSettingsDeleteArgs>(args: SelectSubset<T, NotificationSettingsDeleteArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one NotificationSettings.
     * @param {NotificationSettingsUpdateArgs} args - Arguments to update one NotificationSettings.
     * @example
     * // Update one NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationSettingsUpdateArgs>(args: SelectSubset<T, NotificationSettingsUpdateArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more NotificationSettings.
     * @param {NotificationSettingsDeleteManyArgs} args - Arguments to filter NotificationSettings to delete.
     * @example
     * // Delete a few NotificationSettings
     * const { count } = await prisma.notificationSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationSettingsDeleteManyArgs>(args?: SelectSubset<T, NotificationSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationSettingsUpdateManyArgs>(args: SelectSubset<T, NotificationSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationSettings.
     * @param {NotificationSettingsUpsertArgs} args - Arguments to update or create a NotificationSettings.
     * @example
     * // Update or create a NotificationSettings
     * const notificationSettings = await prisma.notificationSettings.upsert({
     *   create: {
     *     // ... data to create a NotificationSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationSettings we want to update
     *   }
     * })
     */
    upsert<T extends NotificationSettingsUpsertArgs>(args: SelectSubset<T, NotificationSettingsUpsertArgs<ExtArgs>>): Prisma__NotificationSettingsClient<$Result.GetResult<Prisma.$NotificationSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsCountArgs} args - Arguments to filter NotificationSettings to count.
     * @example
     * // Count the number of NotificationSettings
     * const count = await prisma.notificationSettings.count({
     *   where: {
     *     // ... the filter for the NotificationSettings we want to count
     *   }
     * })
    **/
    count<T extends NotificationSettingsCountArgs>(
      args?: Subset<T, NotificationSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationSettingsAggregateArgs>(args: Subset<T, NotificationSettingsAggregateArgs>): Prisma.PrismaPromise<GetNotificationSettingsAggregateType<T>>

    /**
     * Group by NotificationSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationSettingsGroupByArgs['orderBy'] }
        : { orderBy?: NotificationSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationSettings model
   */
  readonly fields: NotificationSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    applicant<T extends ApplicantDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicantDefaultArgs<ExtArgs>>): Prisma__ApplicantClient<$Result.GetResult<Prisma.$ApplicantPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the NotificationSettings model
   */
  interface NotificationSettingsFieldRefs {
    readonly id: FieldRef<"NotificationSettings", 'Int'>
    readonly applicantId: FieldRef<"NotificationSettings", 'Int'>
    readonly emailEnabled: FieldRef<"NotificationSettings", 'Boolean'>
    readonly emailJobMatches: FieldRef<"NotificationSettings", 'Boolean'>
    readonly emailApplicationStatus: FieldRef<"NotificationSettings", 'Boolean'>
    readonly emailInterviews: FieldRef<"NotificationSettings", 'Boolean'>
    readonly emailMarketing: FieldRef<"NotificationSettings", 'Boolean'>
    readonly smsEnabled: FieldRef<"NotificationSettings", 'Boolean'>
    readonly smsApplicationStatus: FieldRef<"NotificationSettings", 'Boolean'>
    readonly smsInterviews: FieldRef<"NotificationSettings", 'Boolean'>
    readonly smsUrgent: FieldRef<"NotificationSettings", 'Boolean'>
    readonly pushEnabled: FieldRef<"NotificationSettings", 'Boolean'>
    readonly pushJobMatches: FieldRef<"NotificationSettings", 'Boolean'>
    readonly pushApplicationStatus: FieldRef<"NotificationSettings", 'Boolean'>
    readonly pushInterviews: FieldRef<"NotificationSettings", 'Boolean'>
    readonly profileVisible: FieldRef<"NotificationSettings", 'Boolean'>
    readonly autoApply: FieldRef<"NotificationSettings", 'Boolean'>
    readonly createdAt: FieldRef<"NotificationSettings", 'DateTime'>
    readonly updatedAt: FieldRef<"NotificationSettings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * NotificationSettings findUnique
   */
  export type NotificationSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findUniqueOrThrow
   */
  export type NotificationSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings findFirst
   */
  export type NotificationSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findFirstOrThrow
   */
  export type NotificationSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationSettings.
     */
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings findMany
   */
  export type NotificationSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter, which NotificationSettings to fetch.
     */
    where?: NotificationSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationSettings to fetch.
     */
    orderBy?: NotificationSettingsOrderByWithRelationInput | NotificationSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationSettings.
     */
    cursor?: NotificationSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationSettings.
     */
    skip?: number
    distinct?: NotificationSettingsScalarFieldEnum | NotificationSettingsScalarFieldEnum[]
  }

  /**
   * NotificationSettings create
   */
  export type NotificationSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationSettings.
     */
    data: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
  }

  /**
   * NotificationSettings createMany
   */
  export type NotificationSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationSettings.
     */
    data: NotificationSettingsCreateManyInput | NotificationSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationSettings update
   */
  export type NotificationSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
    /**
     * Choose, which NotificationSettings to update.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings updateMany
   */
  export type NotificationSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationSettings.
     */
    data: XOR<NotificationSettingsUpdateManyMutationInput, NotificationSettingsUncheckedUpdateManyInput>
    /**
     * Filter which NotificationSettings to update
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to update.
     */
    limit?: number
  }

  /**
   * NotificationSettings upsert
   */
  export type NotificationSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationSettings to update in case it exists.
     */
    where: NotificationSettingsWhereUniqueInput
    /**
     * In case the NotificationSettings found by the `where` argument doesn't exist, create a new NotificationSettings with this data.
     */
    create: XOR<NotificationSettingsCreateInput, NotificationSettingsUncheckedCreateInput>
    /**
     * In case the NotificationSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationSettingsUpdateInput, NotificationSettingsUncheckedUpdateInput>
  }

  /**
   * NotificationSettings delete
   */
  export type NotificationSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
    /**
     * Filter which NotificationSettings to delete.
     */
    where: NotificationSettingsWhereUniqueInput
  }

  /**
   * NotificationSettings deleteMany
   */
  export type NotificationSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationSettings to delete
     */
    where?: NotificationSettingsWhereInput
    /**
     * Limit how many NotificationSettings to delete.
     */
    limit?: number
  }

  /**
   * NotificationSettings without action
   */
  export type NotificationSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationSettings
     */
    select?: NotificationSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the NotificationSettings
     */
    omit?: NotificationSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationSettingsInclude<ExtArgs> | null
  }


  /**
   * Model MarketTrend
   */

  export type AggregateMarketTrend = {
    _count: MarketTrendCountAggregateOutputType | null
    _avg: MarketTrendAvgAggregateOutputType | null
    _sum: MarketTrendSumAggregateOutputType | null
    _min: MarketTrendMinAggregateOutputType | null
    _max: MarketTrendMaxAggregateOutputType | null
  }

  export type MarketTrendAvgAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type MarketTrendSumAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type MarketTrendMinAggregateOutputType = {
    id: number | null
    industry: string | null
    metric: string | null
    value: number | null
    period: string | null
    date: Date | null
    source: string | null
    createdAt: Date | null
  }

  export type MarketTrendMaxAggregateOutputType = {
    id: number | null
    industry: string | null
    metric: string | null
    value: number | null
    period: string | null
    date: Date | null
    source: string | null
    createdAt: Date | null
  }

  export type MarketTrendCountAggregateOutputType = {
    id: number
    industry: number
    metric: number
    value: number
    period: number
    date: number
    source: number
    createdAt: number
    _all: number
  }


  export type MarketTrendAvgAggregateInputType = {
    id?: true
    value?: true
  }

  export type MarketTrendSumAggregateInputType = {
    id?: true
    value?: true
  }

  export type MarketTrendMinAggregateInputType = {
    id?: true
    industry?: true
    metric?: true
    value?: true
    period?: true
    date?: true
    source?: true
    createdAt?: true
  }

  export type MarketTrendMaxAggregateInputType = {
    id?: true
    industry?: true
    metric?: true
    value?: true
    period?: true
    date?: true
    source?: true
    createdAt?: true
  }

  export type MarketTrendCountAggregateInputType = {
    id?: true
    industry?: true
    metric?: true
    value?: true
    period?: true
    date?: true
    source?: true
    createdAt?: true
    _all?: true
  }

  export type MarketTrendAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketTrend to aggregate.
     */
    where?: MarketTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketTrends to fetch.
     */
    orderBy?: MarketTrendOrderByWithRelationInput | MarketTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketTrends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketTrends
    **/
    _count?: true | MarketTrendCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketTrendAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketTrendSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketTrendMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketTrendMaxAggregateInputType
  }

  export type GetMarketTrendAggregateType<T extends MarketTrendAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketTrend]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketTrend[P]>
      : GetScalarType<T[P], AggregateMarketTrend[P]>
  }




  export type MarketTrendGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketTrendWhereInput
    orderBy?: MarketTrendOrderByWithAggregationInput | MarketTrendOrderByWithAggregationInput[]
    by: MarketTrendScalarFieldEnum[] | MarketTrendScalarFieldEnum
    having?: MarketTrendScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketTrendCountAggregateInputType | true
    _avg?: MarketTrendAvgAggregateInputType
    _sum?: MarketTrendSumAggregateInputType
    _min?: MarketTrendMinAggregateInputType
    _max?: MarketTrendMaxAggregateInputType
  }

  export type MarketTrendGroupByOutputType = {
    id: number
    industry: string
    metric: string
    value: number
    period: string
    date: Date
    source: string | null
    createdAt: Date
    _count: MarketTrendCountAggregateOutputType | null
    _avg: MarketTrendAvgAggregateOutputType | null
    _sum: MarketTrendSumAggregateOutputType | null
    _min: MarketTrendMinAggregateOutputType | null
    _max: MarketTrendMaxAggregateOutputType | null
  }

  type GetMarketTrendGroupByPayload<T extends MarketTrendGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketTrendGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketTrendGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketTrendGroupByOutputType[P]>
            : GetScalarType<T[P], MarketTrendGroupByOutputType[P]>
        }
      >
    >


  export type MarketTrendSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    industry?: boolean
    metric?: boolean
    value?: boolean
    period?: boolean
    date?: boolean
    source?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["marketTrend"]>



  export type MarketTrendSelectScalar = {
    id?: boolean
    industry?: boolean
    metric?: boolean
    value?: boolean
    period?: boolean
    date?: boolean
    source?: boolean
    createdAt?: boolean
  }

  export type MarketTrendOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "industry" | "metric" | "value" | "period" | "date" | "source" | "createdAt", ExtArgs["result"]["marketTrend"]>

  export type $MarketTrendPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketTrend"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      industry: string
      metric: string
      value: number
      period: string
      date: Date
      source: string | null
      createdAt: Date
    }, ExtArgs["result"]["marketTrend"]>
    composites: {}
  }

  type MarketTrendGetPayload<S extends boolean | null | undefined | MarketTrendDefaultArgs> = $Result.GetResult<Prisma.$MarketTrendPayload, S>

  type MarketTrendCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketTrendFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketTrendCountAggregateInputType | true
    }

  export interface MarketTrendDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketTrend'], meta: { name: 'MarketTrend' } }
    /**
     * Find zero or one MarketTrend that matches the filter.
     * @param {MarketTrendFindUniqueArgs} args - Arguments to find a MarketTrend
     * @example
     * // Get one MarketTrend
     * const marketTrend = await prisma.marketTrend.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketTrendFindUniqueArgs>(args: SelectSubset<T, MarketTrendFindUniqueArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketTrend that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketTrendFindUniqueOrThrowArgs} args - Arguments to find a MarketTrend
     * @example
     * // Get one MarketTrend
     * const marketTrend = await prisma.marketTrend.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketTrendFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketTrendFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketTrend that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketTrendFindFirstArgs} args - Arguments to find a MarketTrend
     * @example
     * // Get one MarketTrend
     * const marketTrend = await prisma.marketTrend.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketTrendFindFirstArgs>(args?: SelectSubset<T, MarketTrendFindFirstArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketTrend that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketTrendFindFirstOrThrowArgs} args - Arguments to find a MarketTrend
     * @example
     * // Get one MarketTrend
     * const marketTrend = await prisma.marketTrend.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketTrendFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketTrendFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketTrends that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketTrendFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketTrends
     * const marketTrends = await prisma.marketTrend.findMany()
     * 
     * // Get first 10 MarketTrends
     * const marketTrends = await prisma.marketTrend.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketTrendWithIdOnly = await prisma.marketTrend.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketTrendFindManyArgs>(args?: SelectSubset<T, MarketTrendFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketTrend.
     * @param {MarketTrendCreateArgs} args - Arguments to create a MarketTrend.
     * @example
     * // Create one MarketTrend
     * const MarketTrend = await prisma.marketTrend.create({
     *   data: {
     *     // ... data to create a MarketTrend
     *   }
     * })
     * 
     */
    create<T extends MarketTrendCreateArgs>(args: SelectSubset<T, MarketTrendCreateArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketTrends.
     * @param {MarketTrendCreateManyArgs} args - Arguments to create many MarketTrends.
     * @example
     * // Create many MarketTrends
     * const marketTrend = await prisma.marketTrend.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketTrendCreateManyArgs>(args?: SelectSubset<T, MarketTrendCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MarketTrend.
     * @param {MarketTrendDeleteArgs} args - Arguments to delete one MarketTrend.
     * @example
     * // Delete one MarketTrend
     * const MarketTrend = await prisma.marketTrend.delete({
     *   where: {
     *     // ... filter to delete one MarketTrend
     *   }
     * })
     * 
     */
    delete<T extends MarketTrendDeleteArgs>(args: SelectSubset<T, MarketTrendDeleteArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketTrend.
     * @param {MarketTrendUpdateArgs} args - Arguments to update one MarketTrend.
     * @example
     * // Update one MarketTrend
     * const marketTrend = await prisma.marketTrend.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketTrendUpdateArgs>(args: SelectSubset<T, MarketTrendUpdateArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketTrends.
     * @param {MarketTrendDeleteManyArgs} args - Arguments to filter MarketTrends to delete.
     * @example
     * // Delete a few MarketTrends
     * const { count } = await prisma.marketTrend.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketTrendDeleteManyArgs>(args?: SelectSubset<T, MarketTrendDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketTrends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketTrendUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketTrends
     * const marketTrend = await prisma.marketTrend.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketTrendUpdateManyArgs>(args: SelectSubset<T, MarketTrendUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MarketTrend.
     * @param {MarketTrendUpsertArgs} args - Arguments to update or create a MarketTrend.
     * @example
     * // Update or create a MarketTrend
     * const marketTrend = await prisma.marketTrend.upsert({
     *   create: {
     *     // ... data to create a MarketTrend
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketTrend we want to update
     *   }
     * })
     */
    upsert<T extends MarketTrendUpsertArgs>(args: SelectSubset<T, MarketTrendUpsertArgs<ExtArgs>>): Prisma__MarketTrendClient<$Result.GetResult<Prisma.$MarketTrendPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketTrends.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketTrendCountArgs} args - Arguments to filter MarketTrends to count.
     * @example
     * // Count the number of MarketTrends
     * const count = await prisma.marketTrend.count({
     *   where: {
     *     // ... the filter for the MarketTrends we want to count
     *   }
     * })
    **/
    count<T extends MarketTrendCountArgs>(
      args?: Subset<T, MarketTrendCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketTrendCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketTrend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketTrendAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketTrendAggregateArgs>(args: Subset<T, MarketTrendAggregateArgs>): Prisma.PrismaPromise<GetMarketTrendAggregateType<T>>

    /**
     * Group by MarketTrend.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketTrendGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketTrendGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketTrendGroupByArgs['orderBy'] }
        : { orderBy?: MarketTrendGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketTrendGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketTrendGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketTrend model
   */
  readonly fields: MarketTrendFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketTrend.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketTrendClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketTrend model
   */
  interface MarketTrendFieldRefs {
    readonly id: FieldRef<"MarketTrend", 'Int'>
    readonly industry: FieldRef<"MarketTrend", 'String'>
    readonly metric: FieldRef<"MarketTrend", 'String'>
    readonly value: FieldRef<"MarketTrend", 'Float'>
    readonly period: FieldRef<"MarketTrend", 'String'>
    readonly date: FieldRef<"MarketTrend", 'DateTime'>
    readonly source: FieldRef<"MarketTrend", 'String'>
    readonly createdAt: FieldRef<"MarketTrend", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MarketTrend findUnique
   */
  export type MarketTrendFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * Filter, which MarketTrend to fetch.
     */
    where: MarketTrendWhereUniqueInput
  }

  /**
   * MarketTrend findUniqueOrThrow
   */
  export type MarketTrendFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * Filter, which MarketTrend to fetch.
     */
    where: MarketTrendWhereUniqueInput
  }

  /**
   * MarketTrend findFirst
   */
  export type MarketTrendFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * Filter, which MarketTrend to fetch.
     */
    where?: MarketTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketTrends to fetch.
     */
    orderBy?: MarketTrendOrderByWithRelationInput | MarketTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketTrends.
     */
    cursor?: MarketTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketTrends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketTrends.
     */
    distinct?: MarketTrendScalarFieldEnum | MarketTrendScalarFieldEnum[]
  }

  /**
   * MarketTrend findFirstOrThrow
   */
  export type MarketTrendFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * Filter, which MarketTrend to fetch.
     */
    where?: MarketTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketTrends to fetch.
     */
    orderBy?: MarketTrendOrderByWithRelationInput | MarketTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketTrends.
     */
    cursor?: MarketTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketTrends.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketTrends.
     */
    distinct?: MarketTrendScalarFieldEnum | MarketTrendScalarFieldEnum[]
  }

  /**
   * MarketTrend findMany
   */
  export type MarketTrendFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * Filter, which MarketTrends to fetch.
     */
    where?: MarketTrendWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketTrends to fetch.
     */
    orderBy?: MarketTrendOrderByWithRelationInput | MarketTrendOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketTrends.
     */
    cursor?: MarketTrendWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketTrends from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketTrends.
     */
    skip?: number
    distinct?: MarketTrendScalarFieldEnum | MarketTrendScalarFieldEnum[]
  }

  /**
   * MarketTrend create
   */
  export type MarketTrendCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * The data needed to create a MarketTrend.
     */
    data: XOR<MarketTrendCreateInput, MarketTrendUncheckedCreateInput>
  }

  /**
   * MarketTrend createMany
   */
  export type MarketTrendCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketTrends.
     */
    data: MarketTrendCreateManyInput | MarketTrendCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketTrend update
   */
  export type MarketTrendUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * The data needed to update a MarketTrend.
     */
    data: XOR<MarketTrendUpdateInput, MarketTrendUncheckedUpdateInput>
    /**
     * Choose, which MarketTrend to update.
     */
    where: MarketTrendWhereUniqueInput
  }

  /**
   * MarketTrend updateMany
   */
  export type MarketTrendUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketTrends.
     */
    data: XOR<MarketTrendUpdateManyMutationInput, MarketTrendUncheckedUpdateManyInput>
    /**
     * Filter which MarketTrends to update
     */
    where?: MarketTrendWhereInput
    /**
     * Limit how many MarketTrends to update.
     */
    limit?: number
  }

  /**
   * MarketTrend upsert
   */
  export type MarketTrendUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * The filter to search for the MarketTrend to update in case it exists.
     */
    where: MarketTrendWhereUniqueInput
    /**
     * In case the MarketTrend found by the `where` argument doesn't exist, create a new MarketTrend with this data.
     */
    create: XOR<MarketTrendCreateInput, MarketTrendUncheckedCreateInput>
    /**
     * In case the MarketTrend was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketTrendUpdateInput, MarketTrendUncheckedUpdateInput>
  }

  /**
   * MarketTrend delete
   */
  export type MarketTrendDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
    /**
     * Filter which MarketTrend to delete.
     */
    where: MarketTrendWhereUniqueInput
  }

  /**
   * MarketTrend deleteMany
   */
  export type MarketTrendDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketTrends to delete
     */
    where?: MarketTrendWhereInput
    /**
     * Limit how many MarketTrends to delete.
     */
    limit?: number
  }

  /**
   * MarketTrend without action
   */
  export type MarketTrendDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketTrend
     */
    select?: MarketTrendSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketTrend
     */
    omit?: MarketTrendOmit<ExtArgs> | null
  }


  /**
   * Model UserConsent
   */

  export type AggregateUserConsent = {
    _count: UserConsentCountAggregateOutputType | null
    _avg: UserConsentAvgAggregateOutputType | null
    _sum: UserConsentSumAggregateOutputType | null
    _min: UserConsentMinAggregateOutputType | null
    _max: UserConsentMaxAggregateOutputType | null
  }

  export type UserConsentAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserConsentSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserConsentMinAggregateOutputType = {
    id: number | null
    userId: number | null
    consentType: string | null
    granted: boolean | null
    grantedAt: Date | null
    revokedAt: Date | null
    purpose: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserConsentMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    consentType: string | null
    granted: boolean | null
    grantedAt: Date | null
    revokedAt: Date | null
    purpose: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserConsentCountAggregateOutputType = {
    id: number
    userId: number
    consentType: number
    granted: number
    grantedAt: number
    revokedAt: number
    purpose: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserConsentAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserConsentSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserConsentMinAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    grantedAt?: true
    revokedAt?: true
    purpose?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserConsentMaxAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    grantedAt?: true
    revokedAt?: true
    purpose?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserConsentCountAggregateInputType = {
    id?: true
    userId?: true
    consentType?: true
    granted?: true
    grantedAt?: true
    revokedAt?: true
    purpose?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserConsentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserConsent to aggregate.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserConsents
    **/
    _count?: true | UserConsentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserConsentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserConsentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserConsentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserConsentMaxAggregateInputType
  }

  export type GetUserConsentAggregateType<T extends UserConsentAggregateArgs> = {
        [P in keyof T & keyof AggregateUserConsent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserConsent[P]>
      : GetScalarType<T[P], AggregateUserConsent[P]>
  }




  export type UserConsentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserConsentWhereInput
    orderBy?: UserConsentOrderByWithAggregationInput | UserConsentOrderByWithAggregationInput[]
    by: UserConsentScalarFieldEnum[] | UserConsentScalarFieldEnum
    having?: UserConsentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserConsentCountAggregateInputType | true
    _avg?: UserConsentAvgAggregateInputType
    _sum?: UserConsentSumAggregateInputType
    _min?: UserConsentMinAggregateInputType
    _max?: UserConsentMaxAggregateInputType
  }

  export type UserConsentGroupByOutputType = {
    id: number
    userId: number
    consentType: string
    granted: boolean
    grantedAt: Date | null
    revokedAt: Date | null
    purpose: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserConsentCountAggregateOutputType | null
    _avg: UserConsentAvgAggregateOutputType | null
    _sum: UserConsentSumAggregateOutputType | null
    _min: UserConsentMinAggregateOutputType | null
    _max: UserConsentMaxAggregateOutputType | null
  }

  type GetUserConsentGroupByPayload<T extends UserConsentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserConsentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserConsentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserConsentGroupByOutputType[P]>
            : GetScalarType<T[P], UserConsentGroupByOutputType[P]>
        }
      >
    >


  export type UserConsentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    grantedAt?: boolean
    revokedAt?: boolean
    purpose?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userConsent"]>



  export type UserConsentSelectScalar = {
    id?: boolean
    userId?: boolean
    consentType?: boolean
    granted?: boolean
    grantedAt?: boolean
    revokedAt?: boolean
    purpose?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserConsentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "consentType" | "granted" | "grantedAt" | "revokedAt" | "purpose" | "createdAt" | "updatedAt", ExtArgs["result"]["userConsent"]>
  export type UserConsentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserConsentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserConsent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      consentType: string
      granted: boolean
      grantedAt: Date | null
      revokedAt: Date | null
      purpose: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userConsent"]>
    composites: {}
  }

  type UserConsentGetPayload<S extends boolean | null | undefined | UserConsentDefaultArgs> = $Result.GetResult<Prisma.$UserConsentPayload, S>

  type UserConsentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserConsentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserConsentCountAggregateInputType | true
    }

  export interface UserConsentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserConsent'], meta: { name: 'UserConsent' } }
    /**
     * Find zero or one UserConsent that matches the filter.
     * @param {UserConsentFindUniqueArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserConsentFindUniqueArgs>(args: SelectSubset<T, UserConsentFindUniqueArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserConsent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserConsentFindUniqueOrThrowArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserConsentFindUniqueOrThrowArgs>(args: SelectSubset<T, UserConsentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserConsent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentFindFirstArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserConsentFindFirstArgs>(args?: SelectSubset<T, UserConsentFindFirstArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserConsent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentFindFirstOrThrowArgs} args - Arguments to find a UserConsent
     * @example
     * // Get one UserConsent
     * const userConsent = await prisma.userConsent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserConsentFindFirstOrThrowArgs>(args?: SelectSubset<T, UserConsentFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserConsents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserConsents
     * const userConsents = await prisma.userConsent.findMany()
     * 
     * // Get first 10 UserConsents
     * const userConsents = await prisma.userConsent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userConsentWithIdOnly = await prisma.userConsent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserConsentFindManyArgs>(args?: SelectSubset<T, UserConsentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserConsent.
     * @param {UserConsentCreateArgs} args - Arguments to create a UserConsent.
     * @example
     * // Create one UserConsent
     * const UserConsent = await prisma.userConsent.create({
     *   data: {
     *     // ... data to create a UserConsent
     *   }
     * })
     * 
     */
    create<T extends UserConsentCreateArgs>(args: SelectSubset<T, UserConsentCreateArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserConsents.
     * @param {UserConsentCreateManyArgs} args - Arguments to create many UserConsents.
     * @example
     * // Create many UserConsents
     * const userConsent = await prisma.userConsent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserConsentCreateManyArgs>(args?: SelectSubset<T, UserConsentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserConsent.
     * @param {UserConsentDeleteArgs} args - Arguments to delete one UserConsent.
     * @example
     * // Delete one UserConsent
     * const UserConsent = await prisma.userConsent.delete({
     *   where: {
     *     // ... filter to delete one UserConsent
     *   }
     * })
     * 
     */
    delete<T extends UserConsentDeleteArgs>(args: SelectSubset<T, UserConsentDeleteArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserConsent.
     * @param {UserConsentUpdateArgs} args - Arguments to update one UserConsent.
     * @example
     * // Update one UserConsent
     * const userConsent = await prisma.userConsent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserConsentUpdateArgs>(args: SelectSubset<T, UserConsentUpdateArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserConsents.
     * @param {UserConsentDeleteManyArgs} args - Arguments to filter UserConsents to delete.
     * @example
     * // Delete a few UserConsents
     * const { count } = await prisma.userConsent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserConsentDeleteManyArgs>(args?: SelectSubset<T, UserConsentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserConsents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserConsents
     * const userConsent = await prisma.userConsent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserConsentUpdateManyArgs>(args: SelectSubset<T, UserConsentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserConsent.
     * @param {UserConsentUpsertArgs} args - Arguments to update or create a UserConsent.
     * @example
     * // Update or create a UserConsent
     * const userConsent = await prisma.userConsent.upsert({
     *   create: {
     *     // ... data to create a UserConsent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserConsent we want to update
     *   }
     * })
     */
    upsert<T extends UserConsentUpsertArgs>(args: SelectSubset<T, UserConsentUpsertArgs<ExtArgs>>): Prisma__UserConsentClient<$Result.GetResult<Prisma.$UserConsentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserConsents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentCountArgs} args - Arguments to filter UserConsents to count.
     * @example
     * // Count the number of UserConsents
     * const count = await prisma.userConsent.count({
     *   where: {
     *     // ... the filter for the UserConsents we want to count
     *   }
     * })
    **/
    count<T extends UserConsentCountArgs>(
      args?: Subset<T, UserConsentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserConsentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserConsent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserConsentAggregateArgs>(args: Subset<T, UserConsentAggregateArgs>): Prisma.PrismaPromise<GetUserConsentAggregateType<T>>

    /**
     * Group by UserConsent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserConsentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserConsentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserConsentGroupByArgs['orderBy'] }
        : { orderBy?: UserConsentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserConsentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserConsentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserConsent model
   */
  readonly fields: UserConsentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserConsent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserConsentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserConsent model
   */
  interface UserConsentFieldRefs {
    readonly id: FieldRef<"UserConsent", 'Int'>
    readonly userId: FieldRef<"UserConsent", 'Int'>
    readonly consentType: FieldRef<"UserConsent", 'String'>
    readonly granted: FieldRef<"UserConsent", 'Boolean'>
    readonly grantedAt: FieldRef<"UserConsent", 'DateTime'>
    readonly revokedAt: FieldRef<"UserConsent", 'DateTime'>
    readonly purpose: FieldRef<"UserConsent", 'String'>
    readonly createdAt: FieldRef<"UserConsent", 'DateTime'>
    readonly updatedAt: FieldRef<"UserConsent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserConsent findUnique
   */
  export type UserConsentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent findUniqueOrThrow
   */
  export type UserConsentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent findFirst
   */
  export type UserConsentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserConsents.
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserConsents.
     */
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * UserConsent findFirstOrThrow
   */
  export type UserConsentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsent to fetch.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserConsents.
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserConsents.
     */
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * UserConsent findMany
   */
  export type UserConsentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter, which UserConsents to fetch.
     */
    where?: UserConsentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserConsents to fetch.
     */
    orderBy?: UserConsentOrderByWithRelationInput | UserConsentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserConsents.
     */
    cursor?: UserConsentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserConsents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserConsents.
     */
    skip?: number
    distinct?: UserConsentScalarFieldEnum | UserConsentScalarFieldEnum[]
  }

  /**
   * UserConsent create
   */
  export type UserConsentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * The data needed to create a UserConsent.
     */
    data: XOR<UserConsentCreateInput, UserConsentUncheckedCreateInput>
  }

  /**
   * UserConsent createMany
   */
  export type UserConsentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserConsents.
     */
    data: UserConsentCreateManyInput | UserConsentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserConsent update
   */
  export type UserConsentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * The data needed to update a UserConsent.
     */
    data: XOR<UserConsentUpdateInput, UserConsentUncheckedUpdateInput>
    /**
     * Choose, which UserConsent to update.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent updateMany
   */
  export type UserConsentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserConsents.
     */
    data: XOR<UserConsentUpdateManyMutationInput, UserConsentUncheckedUpdateManyInput>
    /**
     * Filter which UserConsents to update
     */
    where?: UserConsentWhereInput
    /**
     * Limit how many UserConsents to update.
     */
    limit?: number
  }

  /**
   * UserConsent upsert
   */
  export type UserConsentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * The filter to search for the UserConsent to update in case it exists.
     */
    where: UserConsentWhereUniqueInput
    /**
     * In case the UserConsent found by the `where` argument doesn't exist, create a new UserConsent with this data.
     */
    create: XOR<UserConsentCreateInput, UserConsentUncheckedCreateInput>
    /**
     * In case the UserConsent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserConsentUpdateInput, UserConsentUncheckedUpdateInput>
  }

  /**
   * UserConsent delete
   */
  export type UserConsentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
    /**
     * Filter which UserConsent to delete.
     */
    where: UserConsentWhereUniqueInput
  }

  /**
   * UserConsent deleteMany
   */
  export type UserConsentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserConsents to delete
     */
    where?: UserConsentWhereInput
    /**
     * Limit how many UserConsents to delete.
     */
    limit?: number
  }

  /**
   * UserConsent without action
   */
  export type UserConsentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserConsent
     */
    select?: UserConsentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserConsent
     */
    omit?: UserConsentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserConsentInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    details: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    details: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    details: number
    timestamp: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AuditLogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: number
    userId: number | null
    action: string
    details: string | null
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>



  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
  }

  export type AuditLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "details" | "timestamp", ExtArgs["result"]["auditLog"]>
  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number | null
      action: string
      details: string | null
      timestamp: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'Int'>
    readonly userId: FieldRef<"AuditLog", 'Int'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly details: FieldRef<"AuditLog", 'String'>
    readonly timestamp: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to update.
     */
    limit?: number
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
    /**
     * Limit how many AuditLogs to delete.
     */
    limit?: number
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLog
     */
    omit?: AuditLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Model AnonymizedData
   */

  export type AggregateAnonymizedData = {
    _count: AnonymizedDataCountAggregateOutputType | null
    _avg: AnonymizedDataAvgAggregateOutputType | null
    _sum: AnonymizedDataSumAggregateOutputType | null
    _min: AnonymizedDataMinAggregateOutputType | null
    _max: AnonymizedDataMaxAggregateOutputType | null
  }

  export type AnonymizedDataAvgAggregateOutputType = {
    id: number | null
    originalUserId: number | null
  }

  export type AnonymizedDataSumAggregateOutputType = {
    id: number | null
    originalUserId: number | null
  }

  export type AnonymizedDataMinAggregateOutputType = {
    id: number | null
    anonymousId: string | null
    originalUserId: number | null
    anonymizedData: string | null
    createdAt: Date | null
  }

  export type AnonymizedDataMaxAggregateOutputType = {
    id: number | null
    anonymousId: string | null
    originalUserId: number | null
    anonymizedData: string | null
    createdAt: Date | null
  }

  export type AnonymizedDataCountAggregateOutputType = {
    id: number
    anonymousId: number
    originalUserId: number
    anonymizedData: number
    createdAt: number
    _all: number
  }


  export type AnonymizedDataAvgAggregateInputType = {
    id?: true
    originalUserId?: true
  }

  export type AnonymizedDataSumAggregateInputType = {
    id?: true
    originalUserId?: true
  }

  export type AnonymizedDataMinAggregateInputType = {
    id?: true
    anonymousId?: true
    originalUserId?: true
    anonymizedData?: true
    createdAt?: true
  }

  export type AnonymizedDataMaxAggregateInputType = {
    id?: true
    anonymousId?: true
    originalUserId?: true
    anonymizedData?: true
    createdAt?: true
  }

  export type AnonymizedDataCountAggregateInputType = {
    id?: true
    anonymousId?: true
    originalUserId?: true
    anonymizedData?: true
    createdAt?: true
    _all?: true
  }

  export type AnonymizedDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnonymizedData to aggregate.
     */
    where?: AnonymizedDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymizedData to fetch.
     */
    orderBy?: AnonymizedDataOrderByWithRelationInput | AnonymizedDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnonymizedDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymizedData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymizedData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnonymizedData
    **/
    _count?: true | AnonymizedDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AnonymizedDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AnonymizedDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnonymizedDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnonymizedDataMaxAggregateInputType
  }

  export type GetAnonymizedDataAggregateType<T extends AnonymizedDataAggregateArgs> = {
        [P in keyof T & keyof AggregateAnonymizedData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnonymizedData[P]>
      : GetScalarType<T[P], AggregateAnonymizedData[P]>
  }




  export type AnonymizedDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnonymizedDataWhereInput
    orderBy?: AnonymizedDataOrderByWithAggregationInput | AnonymizedDataOrderByWithAggregationInput[]
    by: AnonymizedDataScalarFieldEnum[] | AnonymizedDataScalarFieldEnum
    having?: AnonymizedDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnonymizedDataCountAggregateInputType | true
    _avg?: AnonymizedDataAvgAggregateInputType
    _sum?: AnonymizedDataSumAggregateInputType
    _min?: AnonymizedDataMinAggregateInputType
    _max?: AnonymizedDataMaxAggregateInputType
  }

  export type AnonymizedDataGroupByOutputType = {
    id: number
    anonymousId: string
    originalUserId: number | null
    anonymizedData: string
    createdAt: Date
    _count: AnonymizedDataCountAggregateOutputType | null
    _avg: AnonymizedDataAvgAggregateOutputType | null
    _sum: AnonymizedDataSumAggregateOutputType | null
    _min: AnonymizedDataMinAggregateOutputType | null
    _max: AnonymizedDataMaxAggregateOutputType | null
  }

  type GetAnonymizedDataGroupByPayload<T extends AnonymizedDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnonymizedDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnonymizedDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnonymizedDataGroupByOutputType[P]>
            : GetScalarType<T[P], AnonymizedDataGroupByOutputType[P]>
        }
      >
    >


  export type AnonymizedDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    anonymousId?: boolean
    originalUserId?: boolean
    anonymizedData?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["anonymizedData"]>



  export type AnonymizedDataSelectScalar = {
    id?: boolean
    anonymousId?: boolean
    originalUserId?: boolean
    anonymizedData?: boolean
    createdAt?: boolean
  }

  export type AnonymizedDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "anonymousId" | "originalUserId" | "anonymizedData" | "createdAt", ExtArgs["result"]["anonymizedData"]>

  export type $AnonymizedDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnonymizedData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      anonymousId: string
      originalUserId: number | null
      anonymizedData: string
      createdAt: Date
    }, ExtArgs["result"]["anonymizedData"]>
    composites: {}
  }

  type AnonymizedDataGetPayload<S extends boolean | null | undefined | AnonymizedDataDefaultArgs> = $Result.GetResult<Prisma.$AnonymizedDataPayload, S>

  type AnonymizedDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AnonymizedDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AnonymizedDataCountAggregateInputType | true
    }

  export interface AnonymizedDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnonymizedData'], meta: { name: 'AnonymizedData' } }
    /**
     * Find zero or one AnonymizedData that matches the filter.
     * @param {AnonymizedDataFindUniqueArgs} args - Arguments to find a AnonymizedData
     * @example
     * // Get one AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnonymizedDataFindUniqueArgs>(args: SelectSubset<T, AnonymizedDataFindUniqueArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AnonymizedData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AnonymizedDataFindUniqueOrThrowArgs} args - Arguments to find a AnonymizedData
     * @example
     * // Get one AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnonymizedDataFindUniqueOrThrowArgs>(args: SelectSubset<T, AnonymizedDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnonymizedData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymizedDataFindFirstArgs} args - Arguments to find a AnonymizedData
     * @example
     * // Get one AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnonymizedDataFindFirstArgs>(args?: SelectSubset<T, AnonymizedDataFindFirstArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AnonymizedData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymizedDataFindFirstOrThrowArgs} args - Arguments to find a AnonymizedData
     * @example
     * // Get one AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnonymizedDataFindFirstOrThrowArgs>(args?: SelectSubset<T, AnonymizedDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AnonymizedData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymizedDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.findMany()
     * 
     * // Get first 10 AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const anonymizedDataWithIdOnly = await prisma.anonymizedData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnonymizedDataFindManyArgs>(args?: SelectSubset<T, AnonymizedDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AnonymizedData.
     * @param {AnonymizedDataCreateArgs} args - Arguments to create a AnonymizedData.
     * @example
     * // Create one AnonymizedData
     * const AnonymizedData = await prisma.anonymizedData.create({
     *   data: {
     *     // ... data to create a AnonymizedData
     *   }
     * })
     * 
     */
    create<T extends AnonymizedDataCreateArgs>(args: SelectSubset<T, AnonymizedDataCreateArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AnonymizedData.
     * @param {AnonymizedDataCreateManyArgs} args - Arguments to create many AnonymizedData.
     * @example
     * // Create many AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnonymizedDataCreateManyArgs>(args?: SelectSubset<T, AnonymizedDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AnonymizedData.
     * @param {AnonymizedDataDeleteArgs} args - Arguments to delete one AnonymizedData.
     * @example
     * // Delete one AnonymizedData
     * const AnonymizedData = await prisma.anonymizedData.delete({
     *   where: {
     *     // ... filter to delete one AnonymizedData
     *   }
     * })
     * 
     */
    delete<T extends AnonymizedDataDeleteArgs>(args: SelectSubset<T, AnonymizedDataDeleteArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AnonymizedData.
     * @param {AnonymizedDataUpdateArgs} args - Arguments to update one AnonymizedData.
     * @example
     * // Update one AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnonymizedDataUpdateArgs>(args: SelectSubset<T, AnonymizedDataUpdateArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AnonymizedData.
     * @param {AnonymizedDataDeleteManyArgs} args - Arguments to filter AnonymizedData to delete.
     * @example
     * // Delete a few AnonymizedData
     * const { count } = await prisma.anonymizedData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnonymizedDataDeleteManyArgs>(args?: SelectSubset<T, AnonymizedDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnonymizedData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymizedDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnonymizedDataUpdateManyArgs>(args: SelectSubset<T, AnonymizedDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnonymizedData.
     * @param {AnonymizedDataUpsertArgs} args - Arguments to update or create a AnonymizedData.
     * @example
     * // Update or create a AnonymizedData
     * const anonymizedData = await prisma.anonymizedData.upsert({
     *   create: {
     *     // ... data to create a AnonymizedData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnonymizedData we want to update
     *   }
     * })
     */
    upsert<T extends AnonymizedDataUpsertArgs>(args: SelectSubset<T, AnonymizedDataUpsertArgs<ExtArgs>>): Prisma__AnonymizedDataClient<$Result.GetResult<Prisma.$AnonymizedDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AnonymizedData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymizedDataCountArgs} args - Arguments to filter AnonymizedData to count.
     * @example
     * // Count the number of AnonymizedData
     * const count = await prisma.anonymizedData.count({
     *   where: {
     *     // ... the filter for the AnonymizedData we want to count
     *   }
     * })
    **/
    count<T extends AnonymizedDataCountArgs>(
      args?: Subset<T, AnonymizedDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnonymizedDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnonymizedData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymizedDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnonymizedDataAggregateArgs>(args: Subset<T, AnonymizedDataAggregateArgs>): Prisma.PrismaPromise<GetAnonymizedDataAggregateType<T>>

    /**
     * Group by AnonymizedData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnonymizedDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnonymizedDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnonymizedDataGroupByArgs['orderBy'] }
        : { orderBy?: AnonymizedDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnonymizedDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnonymizedDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnonymizedData model
   */
  readonly fields: AnonymizedDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnonymizedData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnonymizedDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnonymizedData model
   */
  interface AnonymizedDataFieldRefs {
    readonly id: FieldRef<"AnonymizedData", 'Int'>
    readonly anonymousId: FieldRef<"AnonymizedData", 'String'>
    readonly originalUserId: FieldRef<"AnonymizedData", 'Int'>
    readonly anonymizedData: FieldRef<"AnonymizedData", 'String'>
    readonly createdAt: FieldRef<"AnonymizedData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnonymizedData findUnique
   */
  export type AnonymizedDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * Filter, which AnonymizedData to fetch.
     */
    where: AnonymizedDataWhereUniqueInput
  }

  /**
   * AnonymizedData findUniqueOrThrow
   */
  export type AnonymizedDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * Filter, which AnonymizedData to fetch.
     */
    where: AnonymizedDataWhereUniqueInput
  }

  /**
   * AnonymizedData findFirst
   */
  export type AnonymizedDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * Filter, which AnonymizedData to fetch.
     */
    where?: AnonymizedDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymizedData to fetch.
     */
    orderBy?: AnonymizedDataOrderByWithRelationInput | AnonymizedDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnonymizedData.
     */
    cursor?: AnonymizedDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymizedData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymizedData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnonymizedData.
     */
    distinct?: AnonymizedDataScalarFieldEnum | AnonymizedDataScalarFieldEnum[]
  }

  /**
   * AnonymizedData findFirstOrThrow
   */
  export type AnonymizedDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * Filter, which AnonymizedData to fetch.
     */
    where?: AnonymizedDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymizedData to fetch.
     */
    orderBy?: AnonymizedDataOrderByWithRelationInput | AnonymizedDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnonymizedData.
     */
    cursor?: AnonymizedDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymizedData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymizedData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnonymizedData.
     */
    distinct?: AnonymizedDataScalarFieldEnum | AnonymizedDataScalarFieldEnum[]
  }

  /**
   * AnonymizedData findMany
   */
  export type AnonymizedDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * Filter, which AnonymizedData to fetch.
     */
    where?: AnonymizedDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnonymizedData to fetch.
     */
    orderBy?: AnonymizedDataOrderByWithRelationInput | AnonymizedDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnonymizedData.
     */
    cursor?: AnonymizedDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnonymizedData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnonymizedData.
     */
    skip?: number
    distinct?: AnonymizedDataScalarFieldEnum | AnonymizedDataScalarFieldEnum[]
  }

  /**
   * AnonymizedData create
   */
  export type AnonymizedDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * The data needed to create a AnonymizedData.
     */
    data: XOR<AnonymizedDataCreateInput, AnonymizedDataUncheckedCreateInput>
  }

  /**
   * AnonymizedData createMany
   */
  export type AnonymizedDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnonymizedData.
     */
    data: AnonymizedDataCreateManyInput | AnonymizedDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnonymizedData update
   */
  export type AnonymizedDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * The data needed to update a AnonymizedData.
     */
    data: XOR<AnonymizedDataUpdateInput, AnonymizedDataUncheckedUpdateInput>
    /**
     * Choose, which AnonymizedData to update.
     */
    where: AnonymizedDataWhereUniqueInput
  }

  /**
   * AnonymizedData updateMany
   */
  export type AnonymizedDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnonymizedData.
     */
    data: XOR<AnonymizedDataUpdateManyMutationInput, AnonymizedDataUncheckedUpdateManyInput>
    /**
     * Filter which AnonymizedData to update
     */
    where?: AnonymizedDataWhereInput
    /**
     * Limit how many AnonymizedData to update.
     */
    limit?: number
  }

  /**
   * AnonymizedData upsert
   */
  export type AnonymizedDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * The filter to search for the AnonymizedData to update in case it exists.
     */
    where: AnonymizedDataWhereUniqueInput
    /**
     * In case the AnonymizedData found by the `where` argument doesn't exist, create a new AnonymizedData with this data.
     */
    create: XOR<AnonymizedDataCreateInput, AnonymizedDataUncheckedCreateInput>
    /**
     * In case the AnonymizedData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnonymizedDataUpdateInput, AnonymizedDataUncheckedUpdateInput>
  }

  /**
   * AnonymizedData delete
   */
  export type AnonymizedDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
    /**
     * Filter which AnonymizedData to delete.
     */
    where: AnonymizedDataWhereUniqueInput
  }

  /**
   * AnonymizedData deleteMany
   */
  export type AnonymizedDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnonymizedData to delete
     */
    where?: AnonymizedDataWhereInput
    /**
     * Limit how many AnonymizedData to delete.
     */
    limit?: number
  }

  /**
   * AnonymizedData without action
   */
  export type AnonymizedDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnonymizedData
     */
    select?: AnonymizedDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AnonymizedData
     */
    omit?: AnonymizedDataOmit<ExtArgs> | null
  }


  /**
   * Model Interview
   */

  export type AggregateInterview = {
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  export type InterviewAvgAggregateOutputType = {
    id: number | null
    applicationId: number | null
    jobId: number | null
    duration: number | null
  }

  export type InterviewSumAggregateOutputType = {
    id: number | null
    applicationId: number | null
    jobId: number | null
    duration: number | null
  }

  export type InterviewMinAggregateOutputType = {
    id: number | null
    applicationId: number | null
    jobId: number | null
    scheduledAt: Date | null
    duration: number | null
    location: string | null
    type: string | null
    notes: string | null
    interviewers: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InterviewMaxAggregateOutputType = {
    id: number | null
    applicationId: number | null
    jobId: number | null
    scheduledAt: Date | null
    duration: number | null
    location: string | null
    type: string | null
    notes: string | null
    interviewers: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InterviewCountAggregateOutputType = {
    id: number
    applicationId: number
    jobId: number
    scheduledAt: number
    duration: number
    location: number
    type: number
    notes: number
    interviewers: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InterviewAvgAggregateInputType = {
    id?: true
    applicationId?: true
    jobId?: true
    duration?: true
  }

  export type InterviewSumAggregateInputType = {
    id?: true
    applicationId?: true
    jobId?: true
    duration?: true
  }

  export type InterviewMinAggregateInputType = {
    id?: true
    applicationId?: true
    jobId?: true
    scheduledAt?: true
    duration?: true
    location?: true
    type?: true
    notes?: true
    interviewers?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InterviewMaxAggregateInputType = {
    id?: true
    applicationId?: true
    jobId?: true
    scheduledAt?: true
    duration?: true
    location?: true
    type?: true
    notes?: true
    interviewers?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InterviewCountAggregateInputType = {
    id?: true
    applicationId?: true
    jobId?: true
    scheduledAt?: true
    duration?: true
    location?: true
    type?: true
    notes?: true
    interviewers?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InterviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interview to aggregate.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Interviews
    **/
    _count?: true | InterviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InterviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InterviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InterviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InterviewMaxAggregateInputType
  }

  export type GetInterviewAggregateType<T extends InterviewAggregateArgs> = {
        [P in keyof T & keyof AggregateInterview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInterview[P]>
      : GetScalarType<T[P], AggregateInterview[P]>
  }




  export type InterviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InterviewWhereInput
    orderBy?: InterviewOrderByWithAggregationInput | InterviewOrderByWithAggregationInput[]
    by: InterviewScalarFieldEnum[] | InterviewScalarFieldEnum
    having?: InterviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InterviewCountAggregateInputType | true
    _avg?: InterviewAvgAggregateInputType
    _sum?: InterviewSumAggregateInputType
    _min?: InterviewMinAggregateInputType
    _max?: InterviewMaxAggregateInputType
  }

  export type InterviewGroupByOutputType = {
    id: number
    applicationId: number
    jobId: number | null
    scheduledAt: Date
    duration: number
    location: string | null
    type: string
    notes: string | null
    interviewers: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    _count: InterviewCountAggregateOutputType | null
    _avg: InterviewAvgAggregateOutputType | null
    _sum: InterviewSumAggregateOutputType | null
    _min: InterviewMinAggregateOutputType | null
    _max: InterviewMaxAggregateOutputType | null
  }

  type GetInterviewGroupByPayload<T extends InterviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InterviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InterviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InterviewGroupByOutputType[P]>
            : GetScalarType<T[P], InterviewGroupByOutputType[P]>
        }
      >
    >


  export type InterviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    applicationId?: boolean
    jobId?: boolean
    scheduledAt?: boolean
    duration?: boolean
    location?: boolean
    type?: boolean
    notes?: boolean
    interviewers?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    job?: boolean | Interview$jobArgs<ExtArgs>
  }, ExtArgs["result"]["interview"]>



  export type InterviewSelectScalar = {
    id?: boolean
    applicationId?: boolean
    jobId?: boolean
    scheduledAt?: boolean
    duration?: boolean
    location?: boolean
    type?: boolean
    notes?: boolean
    interviewers?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InterviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "applicationId" | "jobId" | "scheduledAt" | "duration" | "location" | "type" | "notes" | "interviewers" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["interview"]>
  export type InterviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | ApplicationDefaultArgs<ExtArgs>
    job?: boolean | Interview$jobArgs<ExtArgs>
  }

  export type $InterviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Interview"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs>
      job: Prisma.$JobPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      applicationId: number
      jobId: number | null
      scheduledAt: Date
      duration: number
      location: string | null
      type: string
      notes: string | null
      interviewers: string | null
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["interview"]>
    composites: {}
  }

  type InterviewGetPayload<S extends boolean | null | undefined | InterviewDefaultArgs> = $Result.GetResult<Prisma.$InterviewPayload, S>

  type InterviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InterviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InterviewCountAggregateInputType | true
    }

  export interface InterviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interview'], meta: { name: 'Interview' } }
    /**
     * Find zero or one Interview that matches the filter.
     * @param {InterviewFindUniqueArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InterviewFindUniqueArgs>(args: SelectSubset<T, InterviewFindUniqueArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Interview that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InterviewFindUniqueOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InterviewFindUniqueOrThrowArgs>(args: SelectSubset<T, InterviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interview that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InterviewFindFirstArgs>(args?: SelectSubset<T, InterviewFindFirstArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Interview that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindFirstOrThrowArgs} args - Arguments to find a Interview
     * @example
     * // Get one Interview
     * const interview = await prisma.interview.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InterviewFindFirstOrThrowArgs>(args?: SelectSubset<T, InterviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Interviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Interviews
     * const interviews = await prisma.interview.findMany()
     * 
     * // Get first 10 Interviews
     * const interviews = await prisma.interview.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interviewWithIdOnly = await prisma.interview.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InterviewFindManyArgs>(args?: SelectSubset<T, InterviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Interview.
     * @param {InterviewCreateArgs} args - Arguments to create a Interview.
     * @example
     * // Create one Interview
     * const Interview = await prisma.interview.create({
     *   data: {
     *     // ... data to create a Interview
     *   }
     * })
     * 
     */
    create<T extends InterviewCreateArgs>(args: SelectSubset<T, InterviewCreateArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Interviews.
     * @param {InterviewCreateManyArgs} args - Arguments to create many Interviews.
     * @example
     * // Create many Interviews
     * const interview = await prisma.interview.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InterviewCreateManyArgs>(args?: SelectSubset<T, InterviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Interview.
     * @param {InterviewDeleteArgs} args - Arguments to delete one Interview.
     * @example
     * // Delete one Interview
     * const Interview = await prisma.interview.delete({
     *   where: {
     *     // ... filter to delete one Interview
     *   }
     * })
     * 
     */
    delete<T extends InterviewDeleteArgs>(args: SelectSubset<T, InterviewDeleteArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Interview.
     * @param {InterviewUpdateArgs} args - Arguments to update one Interview.
     * @example
     * // Update one Interview
     * const interview = await prisma.interview.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InterviewUpdateArgs>(args: SelectSubset<T, InterviewUpdateArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Interviews.
     * @param {InterviewDeleteManyArgs} args - Arguments to filter Interviews to delete.
     * @example
     * // Delete a few Interviews
     * const { count } = await prisma.interview.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InterviewDeleteManyArgs>(args?: SelectSubset<T, InterviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Interviews
     * const interview = await prisma.interview.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InterviewUpdateManyArgs>(args: SelectSubset<T, InterviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Interview.
     * @param {InterviewUpsertArgs} args - Arguments to update or create a Interview.
     * @example
     * // Update or create a Interview
     * const interview = await prisma.interview.upsert({
     *   create: {
     *     // ... data to create a Interview
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Interview we want to update
     *   }
     * })
     */
    upsert<T extends InterviewUpsertArgs>(args: SelectSubset<T, InterviewUpsertArgs<ExtArgs>>): Prisma__InterviewClient<$Result.GetResult<Prisma.$InterviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Interviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewCountArgs} args - Arguments to filter Interviews to count.
     * @example
     * // Count the number of Interviews
     * const count = await prisma.interview.count({
     *   where: {
     *     // ... the filter for the Interviews we want to count
     *   }
     * })
    **/
    count<T extends InterviewCountArgs>(
      args?: Subset<T, InterviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InterviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InterviewAggregateArgs>(args: Subset<T, InterviewAggregateArgs>): Prisma.PrismaPromise<GetInterviewAggregateType<T>>

    /**
     * Group by Interview.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InterviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InterviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InterviewGroupByArgs['orderBy'] }
        : { orderBy?: InterviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InterviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInterviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Interview model
   */
  readonly fields: InterviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Interview.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InterviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends ApplicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ApplicationDefaultArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    job<T extends Interview$jobArgs<ExtArgs> = {}>(args?: Subset<T, Interview$jobArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Interview model
   */
  interface InterviewFieldRefs {
    readonly id: FieldRef<"Interview", 'Int'>
    readonly applicationId: FieldRef<"Interview", 'Int'>
    readonly jobId: FieldRef<"Interview", 'Int'>
    readonly scheduledAt: FieldRef<"Interview", 'DateTime'>
    readonly duration: FieldRef<"Interview", 'Int'>
    readonly location: FieldRef<"Interview", 'String'>
    readonly type: FieldRef<"Interview", 'String'>
    readonly notes: FieldRef<"Interview", 'String'>
    readonly interviewers: FieldRef<"Interview", 'String'>
    readonly status: FieldRef<"Interview", 'String'>
    readonly createdAt: FieldRef<"Interview", 'DateTime'>
    readonly updatedAt: FieldRef<"Interview", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Interview findUnique
   */
  export type InterviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview findUniqueOrThrow
   */
  export type InterviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview findFirst
   */
  export type InterviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview findFirstOrThrow
   */
  export type InterviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interview to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Interviews.
     */
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview findMany
   */
  export type InterviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter, which Interviews to fetch.
     */
    where?: InterviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Interviews to fetch.
     */
    orderBy?: InterviewOrderByWithRelationInput | InterviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Interviews.
     */
    cursor?: InterviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Interviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Interviews.
     */
    skip?: number
    distinct?: InterviewScalarFieldEnum | InterviewScalarFieldEnum[]
  }

  /**
   * Interview create
   */
  export type InterviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Interview.
     */
    data: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
  }

  /**
   * Interview createMany
   */
  export type InterviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Interviews.
     */
    data: InterviewCreateManyInput | InterviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Interview update
   */
  export type InterviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Interview.
     */
    data: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
    /**
     * Choose, which Interview to update.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview updateMany
   */
  export type InterviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Interviews.
     */
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyInput>
    /**
     * Filter which Interviews to update
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to update.
     */
    limit?: number
  }

  /**
   * Interview upsert
   */
  export type InterviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Interview to update in case it exists.
     */
    where: InterviewWhereUniqueInput
    /**
     * In case the Interview found by the `where` argument doesn't exist, create a new Interview with this data.
     */
    create: XOR<InterviewCreateInput, InterviewUncheckedCreateInput>
    /**
     * In case the Interview was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InterviewUpdateInput, InterviewUncheckedUpdateInput>
  }

  /**
   * Interview delete
   */
  export type InterviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
    /**
     * Filter which Interview to delete.
     */
    where: InterviewWhereUniqueInput
  }

  /**
   * Interview deleteMany
   */
  export type InterviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Interviews to delete
     */
    where?: InterviewWhereInput
    /**
     * Limit how many Interviews to delete.
     */
    limit?: number
  }

  /**
   * Interview.job
   */
  export type Interview$jobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Job
     */
    omit?: JobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
  }

  /**
   * Interview without action
   */
  export type InterviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Interview
     */
    select?: InterviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Interview
     */
    omit?: InterviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InterviewInclude<ExtArgs> | null
  }


  /**
   * Model EmailLog
   */

  export type AggregateEmailLog = {
    _count: EmailLogCountAggregateOutputType | null
    _avg: EmailLogAvgAggregateOutputType | null
    _sum: EmailLogSumAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  export type EmailLogAvgAggregateOutputType = {
    id: number | null
    applicationId: number | null
    employerId: number | null
    applicantId: number | null
  }

  export type EmailLogSumAggregateOutputType = {
    id: number | null
    applicationId: number | null
    employerId: number | null
    applicantId: number | null
  }

  export type EmailLogMinAggregateOutputType = {
    id: number | null
    to: string | null
    subject: string | null
    message: string | null
    applicationId: number | null
    employerId: number | null
    applicantId: number | null
    status: string | null
    sentAt: Date | null
    error: string | null
    createdAt: Date | null
  }

  export type EmailLogMaxAggregateOutputType = {
    id: number | null
    to: string | null
    subject: string | null
    message: string | null
    applicationId: number | null
    employerId: number | null
    applicantId: number | null
    status: string | null
    sentAt: Date | null
    error: string | null
    createdAt: Date | null
  }

  export type EmailLogCountAggregateOutputType = {
    id: number
    to: number
    subject: number
    message: number
    applicationId: number
    employerId: number
    applicantId: number
    status: number
    sentAt: number
    error: number
    createdAt: number
    _all: number
  }


  export type EmailLogAvgAggregateInputType = {
    id?: true
    applicationId?: true
    employerId?: true
    applicantId?: true
  }

  export type EmailLogSumAggregateInputType = {
    id?: true
    applicationId?: true
    employerId?: true
    applicantId?: true
  }

  export type EmailLogMinAggregateInputType = {
    id?: true
    to?: true
    subject?: true
    message?: true
    applicationId?: true
    employerId?: true
    applicantId?: true
    status?: true
    sentAt?: true
    error?: true
    createdAt?: true
  }

  export type EmailLogMaxAggregateInputType = {
    id?: true
    to?: true
    subject?: true
    message?: true
    applicationId?: true
    employerId?: true
    applicantId?: true
    status?: true
    sentAt?: true
    error?: true
    createdAt?: true
  }

  export type EmailLogCountAggregateInputType = {
    id?: true
    to?: true
    subject?: true
    message?: true
    applicationId?: true
    employerId?: true
    applicantId?: true
    status?: true
    sentAt?: true
    error?: true
    createdAt?: true
    _all?: true
  }

  export type EmailLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLog to aggregate.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailLogs
    **/
    _count?: true | EmailLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailLogMaxAggregateInputType
  }

  export type GetEmailLogAggregateType<T extends EmailLogAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailLog[P]>
      : GetScalarType<T[P], AggregateEmailLog[P]>
  }




  export type EmailLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailLogWhereInput
    orderBy?: EmailLogOrderByWithAggregationInput | EmailLogOrderByWithAggregationInput[]
    by: EmailLogScalarFieldEnum[] | EmailLogScalarFieldEnum
    having?: EmailLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailLogCountAggregateInputType | true
    _avg?: EmailLogAvgAggregateInputType
    _sum?: EmailLogSumAggregateInputType
    _min?: EmailLogMinAggregateInputType
    _max?: EmailLogMaxAggregateInputType
  }

  export type EmailLogGroupByOutputType = {
    id: number
    to: string
    subject: string
    message: string
    applicationId: number | null
    employerId: number | null
    applicantId: number | null
    status: string
    sentAt: Date | null
    error: string | null
    createdAt: Date
    _count: EmailLogCountAggregateOutputType | null
    _avg: EmailLogAvgAggregateOutputType | null
    _sum: EmailLogSumAggregateOutputType | null
    _min: EmailLogMinAggregateOutputType | null
    _max: EmailLogMaxAggregateOutputType | null
  }

  type GetEmailLogGroupByPayload<T extends EmailLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
            : GetScalarType<T[P], EmailLogGroupByOutputType[P]>
        }
      >
    >


  export type EmailLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    to?: boolean
    subject?: boolean
    message?: boolean
    applicationId?: boolean
    employerId?: boolean
    applicantId?: boolean
    status?: boolean
    sentAt?: boolean
    error?: boolean
    createdAt?: boolean
    application?: boolean | EmailLog$applicationArgs<ExtArgs>
  }, ExtArgs["result"]["emailLog"]>



  export type EmailLogSelectScalar = {
    id?: boolean
    to?: boolean
    subject?: boolean
    message?: boolean
    applicationId?: boolean
    employerId?: boolean
    applicantId?: boolean
    status?: boolean
    sentAt?: boolean
    error?: boolean
    createdAt?: boolean
  }

  export type EmailLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "to" | "subject" | "message" | "applicationId" | "employerId" | "applicantId" | "status" | "sentAt" | "error" | "createdAt", ExtArgs["result"]["emailLog"]>
  export type EmailLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    application?: boolean | EmailLog$applicationArgs<ExtArgs>
  }

  export type $EmailLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailLog"
    objects: {
      application: Prisma.$ApplicationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      to: string
      subject: string
      message: string
      applicationId: number | null
      employerId: number | null
      applicantId: number | null
      status: string
      sentAt: Date | null
      error: string | null
      createdAt: Date
    }, ExtArgs["result"]["emailLog"]>
    composites: {}
  }

  type EmailLogGetPayload<S extends boolean | null | undefined | EmailLogDefaultArgs> = $Result.GetResult<Prisma.$EmailLogPayload, S>

  type EmailLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EmailLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EmailLogCountAggregateInputType | true
    }

  export interface EmailLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailLog'], meta: { name: 'EmailLog' } }
    /**
     * Find zero or one EmailLog that matches the filter.
     * @param {EmailLogFindUniqueArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailLogFindUniqueArgs>(args: SelectSubset<T, EmailLogFindUniqueArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one EmailLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EmailLogFindUniqueOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailLogFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailLogFindFirstArgs>(args?: SelectSubset<T, EmailLogFindFirstArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first EmailLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindFirstOrThrowArgs} args - Arguments to find a EmailLog
     * @example
     * // Get one EmailLog
     * const emailLog = await prisma.emailLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailLogFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more EmailLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailLogs
     * const emailLogs = await prisma.emailLog.findMany()
     * 
     * // Get first 10 EmailLogs
     * const emailLogs = await prisma.emailLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailLogWithIdOnly = await prisma.emailLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailLogFindManyArgs>(args?: SelectSubset<T, EmailLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a EmailLog.
     * @param {EmailLogCreateArgs} args - Arguments to create a EmailLog.
     * @example
     * // Create one EmailLog
     * const EmailLog = await prisma.emailLog.create({
     *   data: {
     *     // ... data to create a EmailLog
     *   }
     * })
     * 
     */
    create<T extends EmailLogCreateArgs>(args: SelectSubset<T, EmailLogCreateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many EmailLogs.
     * @param {EmailLogCreateManyArgs} args - Arguments to create many EmailLogs.
     * @example
     * // Create many EmailLogs
     * const emailLog = await prisma.emailLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailLogCreateManyArgs>(args?: SelectSubset<T, EmailLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EmailLog.
     * @param {EmailLogDeleteArgs} args - Arguments to delete one EmailLog.
     * @example
     * // Delete one EmailLog
     * const EmailLog = await prisma.emailLog.delete({
     *   where: {
     *     // ... filter to delete one EmailLog
     *   }
     * })
     * 
     */
    delete<T extends EmailLogDeleteArgs>(args: SelectSubset<T, EmailLogDeleteArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one EmailLog.
     * @param {EmailLogUpdateArgs} args - Arguments to update one EmailLog.
     * @example
     * // Update one EmailLog
     * const emailLog = await prisma.emailLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailLogUpdateArgs>(args: SelectSubset<T, EmailLogUpdateArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more EmailLogs.
     * @param {EmailLogDeleteManyArgs} args - Arguments to filter EmailLogs to delete.
     * @example
     * // Delete a few EmailLogs
     * const { count } = await prisma.emailLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailLogDeleteManyArgs>(args?: SelectSubset<T, EmailLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailLogs
     * const emailLog = await prisma.emailLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailLogUpdateManyArgs>(args: SelectSubset<T, EmailLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailLog.
     * @param {EmailLogUpsertArgs} args - Arguments to update or create a EmailLog.
     * @example
     * // Update or create a EmailLog
     * const emailLog = await prisma.emailLog.upsert({
     *   create: {
     *     // ... data to create a EmailLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailLog we want to update
     *   }
     * })
     */
    upsert<T extends EmailLogUpsertArgs>(args: SelectSubset<T, EmailLogUpsertArgs<ExtArgs>>): Prisma__EmailLogClient<$Result.GetResult<Prisma.$EmailLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of EmailLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogCountArgs} args - Arguments to filter EmailLogs to count.
     * @example
     * // Count the number of EmailLogs
     * const count = await prisma.emailLog.count({
     *   where: {
     *     // ... the filter for the EmailLogs we want to count
     *   }
     * })
    **/
    count<T extends EmailLogCountArgs>(
      args?: Subset<T, EmailLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailLogAggregateArgs>(args: Subset<T, EmailLogAggregateArgs>): Prisma.PrismaPromise<GetEmailLogAggregateType<T>>

    /**
     * Group by EmailLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailLogGroupByArgs['orderBy'] }
        : { orderBy?: EmailLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailLog model
   */
  readonly fields: EmailLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    application<T extends EmailLog$applicationArgs<ExtArgs> = {}>(args?: Subset<T, EmailLog$applicationArgs<ExtArgs>>): Prisma__ApplicationClient<$Result.GetResult<Prisma.$ApplicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailLog model
   */
  interface EmailLogFieldRefs {
    readonly id: FieldRef<"EmailLog", 'Int'>
    readonly to: FieldRef<"EmailLog", 'String'>
    readonly subject: FieldRef<"EmailLog", 'String'>
    readonly message: FieldRef<"EmailLog", 'String'>
    readonly applicationId: FieldRef<"EmailLog", 'Int'>
    readonly employerId: FieldRef<"EmailLog", 'Int'>
    readonly applicantId: FieldRef<"EmailLog", 'Int'>
    readonly status: FieldRef<"EmailLog", 'String'>
    readonly sentAt: FieldRef<"EmailLog", 'DateTime'>
    readonly error: FieldRef<"EmailLog", 'String'>
    readonly createdAt: FieldRef<"EmailLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailLog findUnique
   */
  export type EmailLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findUniqueOrThrow
   */
  export type EmailLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog findFirst
   */
  export type EmailLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findFirstOrThrow
   */
  export type EmailLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLog to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailLogs.
     */
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog findMany
   */
  export type EmailLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter, which EmailLogs to fetch.
     */
    where?: EmailLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailLogs to fetch.
     */
    orderBy?: EmailLogOrderByWithRelationInput | EmailLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailLogs.
     */
    cursor?: EmailLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailLogs.
     */
    skip?: number
    distinct?: EmailLogScalarFieldEnum | EmailLogScalarFieldEnum[]
  }

  /**
   * EmailLog create
   */
  export type EmailLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailLog.
     */
    data: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
  }

  /**
   * EmailLog createMany
   */
  export type EmailLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailLogs.
     */
    data: EmailLogCreateManyInput | EmailLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailLog update
   */
  export type EmailLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailLog.
     */
    data: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
    /**
     * Choose, which EmailLog to update.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog updateMany
   */
  export type EmailLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailLogs.
     */
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyInput>
    /**
     * Filter which EmailLogs to update
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to update.
     */
    limit?: number
  }

  /**
   * EmailLog upsert
   */
  export type EmailLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailLog to update in case it exists.
     */
    where: EmailLogWhereUniqueInput
    /**
     * In case the EmailLog found by the `where` argument doesn't exist, create a new EmailLog with this data.
     */
    create: XOR<EmailLogCreateInput, EmailLogUncheckedCreateInput>
    /**
     * In case the EmailLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailLogUpdateInput, EmailLogUncheckedUpdateInput>
  }

  /**
   * EmailLog delete
   */
  export type EmailLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
    /**
     * Filter which EmailLog to delete.
     */
    where: EmailLogWhereUniqueInput
  }

  /**
   * EmailLog deleteMany
   */
  export type EmailLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailLogs to delete
     */
    where?: EmailLogWhereInput
    /**
     * Limit how many EmailLogs to delete.
     */
    limit?: number
  }

  /**
   * EmailLog.application
   */
  export type EmailLog$applicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Application
     */
    select?: ApplicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Application
     */
    omit?: ApplicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApplicationInclude<ExtArgs> | null
    where?: ApplicationWhereInput
  }

  /**
   * EmailLog without action
   */
  export type EmailLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailLog
     */
    select?: EmailLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EmailLog
     */
    omit?: EmailLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const JobCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobCategoryScalarFieldEnum = (typeof JobCategoryScalarFieldEnum)[keyof typeof JobCategoryScalarFieldEnum]


  export const SkillMasterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    category: 'category',
    description: 'description',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SkillMasterScalarFieldEnum = (typeof SkillMasterScalarFieldEnum)[keyof typeof SkillMasterScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    isActive: 'isActive',
    createdAt: 'createdAt'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    isActive: 'isActive',
    lastLogin: 'lastLogin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ApplicantScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    nida: 'nida',
    phone: 'phone',
    address: 'address',
    dateOfBirth: 'dateOfBirth',
    gender: 'gender',
    userId: 'userId',
    profileCompleted: 'profileCompleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApplicantScalarFieldEnum = (typeof ApplicantScalarFieldEnum)[keyof typeof ApplicantScalarFieldEnum]


  export const EmployerScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    industry: 'industry',
    companySize: 'companySize',
    website: 'website',
    address: 'address',
    phone: 'phone',
    description: 'description',
    userId: 'userId',
    isVerified: 'isVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmployerScalarFieldEnum = (typeof EmployerScalarFieldEnum)[keyof typeof EmployerScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    location: 'location',
    salaryMin: 'salaryMin',
    salaryMax: 'salaryMax',
    currency: 'currency',
    employmentType: 'employmentType',
    experienceLevel: 'experienceLevel',
    status: 'status',
    applicationCount: 'applicationCount',
    viewCount: 'viewCount',
    employerId: 'employerId',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const JobRequirementScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    skillMasterId: 'skillMasterId',
    importance: 'importance',
    proficiencyLevel: 'proficiencyLevel',
    yearsRequired: 'yearsRequired',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JobRequirementScalarFieldEnum = (typeof JobRequirementScalarFieldEnum)[keyof typeof JobRequirementScalarFieldEnum]


  export const ApplicantSkillScalarFieldEnum: {
    id: 'id',
    applicantId: 'applicantId',
    skillMasterId: 'skillMasterId',
    proficiency: 'proficiency',
    yearsExperience: 'yearsExperience',
    lastUsed: 'lastUsed',
    isCertified: 'isCertified',
    certificationName: 'certificationName',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApplicantSkillScalarFieldEnum = (typeof ApplicantSkillScalarFieldEnum)[keyof typeof ApplicantSkillScalarFieldEnum]


  export const ApplicationScalarFieldEnum: {
    id: 'id',
    status: 'status',
    jobId: 'jobId',
    applicantId: 'applicantId',
    coverLetter: 'coverLetter',
    appliedAt: 'appliedAt',
    reviewedAt: 'reviewedAt',
    reviewedBy: 'reviewedBy',
    rejectionReason: 'rejectionReason',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApplicationScalarFieldEnum = (typeof ApplicationScalarFieldEnum)[keyof typeof ApplicationScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    type: 'type',
    title: 'title',
    message: 'message',
    isRead: 'isRead',
    createdAt: 'createdAt',
    readAt: 'readAt',
    expiresAt: 'expiresAt',
    applicantId: 'applicantId',
    employerId: 'employerId',
    applicationId: 'applicationId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AcademicQualificationScalarFieldEnum: {
    id: 'id',
    level: 'level',
    countryId: 'countryId',
    institution: 'institution',
    fieldOfStudy: 'fieldOfStudy',
    grade: 'grade',
    startDate: 'startDate',
    endDate: 'endDate',
    isCompleted: 'isCompleted',
    certificateUrl: 'certificateUrl',
    applicantId: 'applicantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AcademicQualificationScalarFieldEnum = (typeof AcademicQualificationScalarFieldEnum)[keyof typeof AcademicQualificationScalarFieldEnum]


  export const WorkExperienceScalarFieldEnum: {
    id: 'id',
    companyName: 'companyName',
    jobTitle: 'jobTitle',
    industry: 'industry',
    location: 'location',
    employmentType: 'employmentType',
    startDate: 'startDate',
    endDate: 'endDate',
    isCurrent: 'isCurrent',
    responsibilities: 'responsibilities',
    achievements: 'achievements',
    supervisorName: 'supervisorName',
    supervisorContact: 'supervisorContact',
    applicantId: 'applicantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WorkExperienceScalarFieldEnum = (typeof WorkExperienceScalarFieldEnum)[keyof typeof WorkExperienceScalarFieldEnum]


  export const LanguageProficiencyScalarFieldEnum: {
    id: 'id',
    language: 'language',
    speakLevel: 'speakLevel',
    readLevel: 'readLevel',
    writeLevel: 'writeLevel',
    isCertified: 'isCertified',
    certificationName: 'certificationName',
    applicantId: 'applicantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LanguageProficiencyScalarFieldEnum = (typeof LanguageProficiencyScalarFieldEnum)[keyof typeof LanguageProficiencyScalarFieldEnum]


  export const ComputerSkillScalarFieldEnum: {
    id: 'id',
    skill: 'skill',
    proficiency: 'proficiency',
    applicantId: 'applicantId',
    createdAt: 'createdAt'
  };

  export type ComputerSkillScalarFieldEnum = (typeof ComputerSkillScalarFieldEnum)[keyof typeof ComputerSkillScalarFieldEnum]


  export const GeneralSkillScalarFieldEnum: {
    id: 'id',
    skill: 'skill',
    description: 'description',
    proficiency: 'proficiency',
    applicantId: 'applicantId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GeneralSkillScalarFieldEnum = (typeof GeneralSkillScalarFieldEnum)[keyof typeof GeneralSkillScalarFieldEnum]


  export const SkillDemandScalarFieldEnum: {
    id: 'id',
    skillMasterId: 'skillMasterId',
    demandScore: 'demandScore',
    growth: 'growth',
    industry: 'industry',
    region: 'region',
    period: 'period',
    source: 'source',
    createdAt: 'createdAt'
  };

  export type SkillDemandScalarFieldEnum = (typeof SkillDemandScalarFieldEnum)[keyof typeof SkillDemandScalarFieldEnum]


  export const ChatRoomScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    agentId: 'agentId',
    topic: 'topic',
    status: 'status',
    createdAt: 'createdAt',
    endedAt: 'endedAt'
  };

  export type ChatRoomScalarFieldEnum = (typeof ChatRoomScalarFieldEnum)[keyof typeof ChatRoomScalarFieldEnum]


  export const ChatMessageScalarFieldEnum: {
    id: 'id',
    roomId: 'roomId',
    senderId: 'senderId',
    message: 'message',
    type: 'type',
    isRead: 'isRead',
    readAt: 'readAt',
    timestamp: 'timestamp'
  };

  export type ChatMessageScalarFieldEnum = (typeof ChatMessageScalarFieldEnum)[keyof typeof ChatMessageScalarFieldEnum]


  export const NotificationSettingsScalarFieldEnum: {
    id: 'id',
    applicantId: 'applicantId',
    emailEnabled: 'emailEnabled',
    emailJobMatches: 'emailJobMatches',
    emailApplicationStatus: 'emailApplicationStatus',
    emailInterviews: 'emailInterviews',
    emailMarketing: 'emailMarketing',
    smsEnabled: 'smsEnabled',
    smsApplicationStatus: 'smsApplicationStatus',
    smsInterviews: 'smsInterviews',
    smsUrgent: 'smsUrgent',
    pushEnabled: 'pushEnabled',
    pushJobMatches: 'pushJobMatches',
    pushApplicationStatus: 'pushApplicationStatus',
    pushInterviews: 'pushInterviews',
    profileVisible: 'profileVisible',
    autoApply: 'autoApply',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationSettingsScalarFieldEnum = (typeof NotificationSettingsScalarFieldEnum)[keyof typeof NotificationSettingsScalarFieldEnum]


  export const MarketTrendScalarFieldEnum: {
    id: 'id',
    industry: 'industry',
    metric: 'metric',
    value: 'value',
    period: 'period',
    date: 'date',
    source: 'source',
    createdAt: 'createdAt'
  };

  export type MarketTrendScalarFieldEnum = (typeof MarketTrendScalarFieldEnum)[keyof typeof MarketTrendScalarFieldEnum]


  export const UserConsentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    consentType: 'consentType',
    granted: 'granted',
    grantedAt: 'grantedAt',
    revokedAt: 'revokedAt',
    purpose: 'purpose',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserConsentScalarFieldEnum = (typeof UserConsentScalarFieldEnum)[keyof typeof UserConsentScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    details: 'details',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const AnonymizedDataScalarFieldEnum: {
    id: 'id',
    anonymousId: 'anonymousId',
    originalUserId: 'originalUserId',
    anonymizedData: 'anonymizedData',
    createdAt: 'createdAt'
  };

  export type AnonymizedDataScalarFieldEnum = (typeof AnonymizedDataScalarFieldEnum)[keyof typeof AnonymizedDataScalarFieldEnum]


  export const InterviewScalarFieldEnum: {
    id: 'id',
    applicationId: 'applicationId',
    jobId: 'jobId',
    scheduledAt: 'scheduledAt',
    duration: 'duration',
    location: 'location',
    type: 'type',
    notes: 'notes',
    interviewers: 'interviewers',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InterviewScalarFieldEnum = (typeof InterviewScalarFieldEnum)[keyof typeof InterviewScalarFieldEnum]


  export const EmailLogScalarFieldEnum: {
    id: 'id',
    to: 'to',
    subject: 'subject',
    message: 'message',
    applicationId: 'applicationId',
    employerId: 'employerId',
    applicantId: 'applicantId',
    status: 'status',
    sentAt: 'sentAt',
    error: 'error',
    createdAt: 'createdAt'
  };

  export type EmailLogScalarFieldEnum = (typeof EmailLogScalarFieldEnum)[keyof typeof EmailLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JobCategoryOrderByRelevanceFieldEnum: {
    name: 'name',
    description: 'description'
  };

  export type JobCategoryOrderByRelevanceFieldEnum = (typeof JobCategoryOrderByRelevanceFieldEnum)[keyof typeof JobCategoryOrderByRelevanceFieldEnum]


  export const SkillMasterOrderByRelevanceFieldEnum: {
    name: 'name',
    category: 'category',
    description: 'description'
  };

  export type SkillMasterOrderByRelevanceFieldEnum = (typeof SkillMasterOrderByRelevanceFieldEnum)[keyof typeof SkillMasterOrderByRelevanceFieldEnum]


  export const CountryOrderByRelevanceFieldEnum: {
    name: 'name',
    code: 'code'
  };

  export type CountryOrderByRelevanceFieldEnum = (typeof CountryOrderByRelevanceFieldEnum)[keyof typeof CountryOrderByRelevanceFieldEnum]


  export const UserOrderByRelevanceFieldEnum: {
    email: 'email',
    password: 'password'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const ApplicantOrderByRelevanceFieldEnum: {
    fullName: 'fullName',
    nida: 'nida',
    phone: 'phone',
    address: 'address',
    gender: 'gender'
  };

  export type ApplicantOrderByRelevanceFieldEnum = (typeof ApplicantOrderByRelevanceFieldEnum)[keyof typeof ApplicantOrderByRelevanceFieldEnum]


  export const EmployerOrderByRelevanceFieldEnum: {
    companyName: 'companyName',
    industry: 'industry',
    companySize: 'companySize',
    website: 'website',
    address: 'address',
    phone: 'phone',
    description: 'description'
  };

  export type EmployerOrderByRelevanceFieldEnum = (typeof EmployerOrderByRelevanceFieldEnum)[keyof typeof EmployerOrderByRelevanceFieldEnum]


  export const JobOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description',
    location: 'location',
    currency: 'currency',
    employmentType: 'employmentType',
    experienceLevel: 'experienceLevel'
  };

  export type JobOrderByRelevanceFieldEnum = (typeof JobOrderByRelevanceFieldEnum)[keyof typeof JobOrderByRelevanceFieldEnum]


  export const JobRequirementOrderByRelevanceFieldEnum: {
    description: 'description'
  };

  export type JobRequirementOrderByRelevanceFieldEnum = (typeof JobRequirementOrderByRelevanceFieldEnum)[keyof typeof JobRequirementOrderByRelevanceFieldEnum]


  export const ApplicantSkillOrderByRelevanceFieldEnum: {
    certificationName: 'certificationName'
  };

  export type ApplicantSkillOrderByRelevanceFieldEnum = (typeof ApplicantSkillOrderByRelevanceFieldEnum)[keyof typeof ApplicantSkillOrderByRelevanceFieldEnum]


  export const ApplicationOrderByRelevanceFieldEnum: {
    coverLetter: 'coverLetter',
    rejectionReason: 'rejectionReason',
    notes: 'notes'
  };

  export type ApplicationOrderByRelevanceFieldEnum = (typeof ApplicationOrderByRelevanceFieldEnum)[keyof typeof ApplicationOrderByRelevanceFieldEnum]


  export const NotificationOrderByRelevanceFieldEnum: {
    title: 'title',
    message: 'message'
  };

  export type NotificationOrderByRelevanceFieldEnum = (typeof NotificationOrderByRelevanceFieldEnum)[keyof typeof NotificationOrderByRelevanceFieldEnum]


  export const AcademicQualificationOrderByRelevanceFieldEnum: {
    level: 'level',
    institution: 'institution',
    fieldOfStudy: 'fieldOfStudy',
    grade: 'grade',
    certificateUrl: 'certificateUrl'
  };

  export type AcademicQualificationOrderByRelevanceFieldEnum = (typeof AcademicQualificationOrderByRelevanceFieldEnum)[keyof typeof AcademicQualificationOrderByRelevanceFieldEnum]


  export const WorkExperienceOrderByRelevanceFieldEnum: {
    companyName: 'companyName',
    jobTitle: 'jobTitle',
    industry: 'industry',
    location: 'location',
    employmentType: 'employmentType',
    responsibilities: 'responsibilities',
    achievements: 'achievements',
    supervisorName: 'supervisorName',
    supervisorContact: 'supervisorContact'
  };

  export type WorkExperienceOrderByRelevanceFieldEnum = (typeof WorkExperienceOrderByRelevanceFieldEnum)[keyof typeof WorkExperienceOrderByRelevanceFieldEnum]


  export const LanguageProficiencyOrderByRelevanceFieldEnum: {
    language: 'language',
    speakLevel: 'speakLevel',
    readLevel: 'readLevel',
    writeLevel: 'writeLevel',
    certificationName: 'certificationName'
  };

  export type LanguageProficiencyOrderByRelevanceFieldEnum = (typeof LanguageProficiencyOrderByRelevanceFieldEnum)[keyof typeof LanguageProficiencyOrderByRelevanceFieldEnum]


  export const ComputerSkillOrderByRelevanceFieldEnum: {
    skill: 'skill',
    proficiency: 'proficiency'
  };

  export type ComputerSkillOrderByRelevanceFieldEnum = (typeof ComputerSkillOrderByRelevanceFieldEnum)[keyof typeof ComputerSkillOrderByRelevanceFieldEnum]


  export const GeneralSkillOrderByRelevanceFieldEnum: {
    skill: 'skill',
    description: 'description',
    proficiency: 'proficiency'
  };

  export type GeneralSkillOrderByRelevanceFieldEnum = (typeof GeneralSkillOrderByRelevanceFieldEnum)[keyof typeof GeneralSkillOrderByRelevanceFieldEnum]


  export const SkillDemandOrderByRelevanceFieldEnum: {
    industry: 'industry',
    region: 'region',
    source: 'source'
  };

  export type SkillDemandOrderByRelevanceFieldEnum = (typeof SkillDemandOrderByRelevanceFieldEnum)[keyof typeof SkillDemandOrderByRelevanceFieldEnum]


  export const ChatRoomOrderByRelevanceFieldEnum: {
    topic: 'topic',
    status: 'status'
  };

  export type ChatRoomOrderByRelevanceFieldEnum = (typeof ChatRoomOrderByRelevanceFieldEnum)[keyof typeof ChatRoomOrderByRelevanceFieldEnum]


  export const ChatMessageOrderByRelevanceFieldEnum: {
    message: 'message',
    type: 'type'
  };

  export type ChatMessageOrderByRelevanceFieldEnum = (typeof ChatMessageOrderByRelevanceFieldEnum)[keyof typeof ChatMessageOrderByRelevanceFieldEnum]


  export const MarketTrendOrderByRelevanceFieldEnum: {
    industry: 'industry',
    metric: 'metric',
    period: 'period',
    source: 'source'
  };

  export type MarketTrendOrderByRelevanceFieldEnum = (typeof MarketTrendOrderByRelevanceFieldEnum)[keyof typeof MarketTrendOrderByRelevanceFieldEnum]


  export const UserConsentOrderByRelevanceFieldEnum: {
    consentType: 'consentType',
    purpose: 'purpose'
  };

  export type UserConsentOrderByRelevanceFieldEnum = (typeof UserConsentOrderByRelevanceFieldEnum)[keyof typeof UserConsentOrderByRelevanceFieldEnum]


  export const AuditLogOrderByRelevanceFieldEnum: {
    action: 'action',
    details: 'details'
  };

  export type AuditLogOrderByRelevanceFieldEnum = (typeof AuditLogOrderByRelevanceFieldEnum)[keyof typeof AuditLogOrderByRelevanceFieldEnum]


  export const AnonymizedDataOrderByRelevanceFieldEnum: {
    anonymousId: 'anonymousId',
    anonymizedData: 'anonymizedData'
  };

  export type AnonymizedDataOrderByRelevanceFieldEnum = (typeof AnonymizedDataOrderByRelevanceFieldEnum)[keyof typeof AnonymizedDataOrderByRelevanceFieldEnum]


  export const InterviewOrderByRelevanceFieldEnum: {
    location: 'location',
    type: 'type',
    notes: 'notes',
    interviewers: 'interviewers',
    status: 'status'
  };

  export type InterviewOrderByRelevanceFieldEnum = (typeof InterviewOrderByRelevanceFieldEnum)[keyof typeof InterviewOrderByRelevanceFieldEnum]


  export const EmailLogOrderByRelevanceFieldEnum: {
    to: 'to',
    subject: 'subject',
    message: 'message',
    status: 'status',
    error: 'error'
  };

  export type EmailLogOrderByRelevanceFieldEnum = (typeof EmailLogOrderByRelevanceFieldEnum)[keyof typeof EmailLogOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'ImportanceLevel'
   */
  export type EnumImportanceLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ImportanceLevel'>
    


  /**
   * Reference to a field of type 'ProficiencyLevel'
   */
  export type EnumProficiencyLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProficiencyLevel'>
    


  /**
   * Reference to a field of type 'ApplicationStatus'
   */
  export type EnumApplicationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApplicationStatus'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type JobCategoryWhereInput = {
    AND?: JobCategoryWhereInput | JobCategoryWhereInput[]
    OR?: JobCategoryWhereInput[]
    NOT?: JobCategoryWhereInput | JobCategoryWhereInput[]
    id?: IntFilter<"JobCategory"> | number
    name?: StringFilter<"JobCategory"> | string
    description?: StringNullableFilter<"JobCategory"> | string | null
    isActive?: BoolFilter<"JobCategory"> | boolean
    createdAt?: DateTimeFilter<"JobCategory"> | Date | string
    updatedAt?: DateTimeFilter<"JobCategory"> | Date | string
    applicants?: ApplicantListRelationFilter
    jobs?: JobListRelationFilter
  }

  export type JobCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicants?: ApplicantOrderByRelationAggregateInput
    jobs?: JobOrderByRelationAggregateInput
    _relevance?: JobCategoryOrderByRelevanceInput
  }

  export type JobCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: JobCategoryWhereInput | JobCategoryWhereInput[]
    OR?: JobCategoryWhereInput[]
    NOT?: JobCategoryWhereInput | JobCategoryWhereInput[]
    description?: StringNullableFilter<"JobCategory"> | string | null
    isActive?: BoolFilter<"JobCategory"> | boolean
    createdAt?: DateTimeFilter<"JobCategory"> | Date | string
    updatedAt?: DateTimeFilter<"JobCategory"> | Date | string
    applicants?: ApplicantListRelationFilter
    jobs?: JobListRelationFilter
  }, "id" | "name">

  export type JobCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCategoryCountOrderByAggregateInput
    _avg?: JobCategoryAvgOrderByAggregateInput
    _max?: JobCategoryMaxOrderByAggregateInput
    _min?: JobCategoryMinOrderByAggregateInput
    _sum?: JobCategorySumOrderByAggregateInput
  }

  export type JobCategoryScalarWhereWithAggregatesInput = {
    AND?: JobCategoryScalarWhereWithAggregatesInput | JobCategoryScalarWhereWithAggregatesInput[]
    OR?: JobCategoryScalarWhereWithAggregatesInput[]
    NOT?: JobCategoryScalarWhereWithAggregatesInput | JobCategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobCategory"> | number
    name?: StringWithAggregatesFilter<"JobCategory"> | string
    description?: StringNullableWithAggregatesFilter<"JobCategory"> | string | null
    isActive?: BoolWithAggregatesFilter<"JobCategory"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"JobCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobCategory"> | Date | string
  }

  export type SkillMasterWhereInput = {
    AND?: SkillMasterWhereInput | SkillMasterWhereInput[]
    OR?: SkillMasterWhereInput[]
    NOT?: SkillMasterWhereInput | SkillMasterWhereInput[]
    id?: IntFilter<"SkillMaster"> | number
    name?: StringFilter<"SkillMaster"> | string
    category?: StringFilter<"SkillMaster"> | string
    description?: StringNullableFilter<"SkillMaster"> | string | null
    isActive?: BoolFilter<"SkillMaster"> | boolean
    createdAt?: DateTimeFilter<"SkillMaster"> | Date | string
    updatedAt?: DateTimeFilter<"SkillMaster"> | Date | string
    jobRequirements?: JobRequirementListRelationFilter
    applicantSkills?: ApplicantSkillListRelationFilter
    skillDemands?: SkillDemandListRelationFilter
  }

  export type SkillMasterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jobRequirements?: JobRequirementOrderByRelationAggregateInput
    applicantSkills?: ApplicantSkillOrderByRelationAggregateInput
    skillDemands?: SkillDemandOrderByRelationAggregateInput
    _relevance?: SkillMasterOrderByRelevanceInput
  }

  export type SkillMasterWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: SkillMasterWhereInput | SkillMasterWhereInput[]
    OR?: SkillMasterWhereInput[]
    NOT?: SkillMasterWhereInput | SkillMasterWhereInput[]
    category?: StringFilter<"SkillMaster"> | string
    description?: StringNullableFilter<"SkillMaster"> | string | null
    isActive?: BoolFilter<"SkillMaster"> | boolean
    createdAt?: DateTimeFilter<"SkillMaster"> | Date | string
    updatedAt?: DateTimeFilter<"SkillMaster"> | Date | string
    jobRequirements?: JobRequirementListRelationFilter
    applicantSkills?: ApplicantSkillListRelationFilter
    skillDemands?: SkillDemandListRelationFilter
  }, "id" | "name">

  export type SkillMasterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SkillMasterCountOrderByAggregateInput
    _avg?: SkillMasterAvgOrderByAggregateInput
    _max?: SkillMasterMaxOrderByAggregateInput
    _min?: SkillMasterMinOrderByAggregateInput
    _sum?: SkillMasterSumOrderByAggregateInput
  }

  export type SkillMasterScalarWhereWithAggregatesInput = {
    AND?: SkillMasterScalarWhereWithAggregatesInput | SkillMasterScalarWhereWithAggregatesInput[]
    OR?: SkillMasterScalarWhereWithAggregatesInput[]
    NOT?: SkillMasterScalarWhereWithAggregatesInput | SkillMasterScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SkillMaster"> | number
    name?: StringWithAggregatesFilter<"SkillMaster"> | string
    category?: StringWithAggregatesFilter<"SkillMaster"> | string
    description?: StringNullableWithAggregatesFilter<"SkillMaster"> | string | null
    isActive?: BoolWithAggregatesFilter<"SkillMaster"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SkillMaster"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SkillMaster"> | Date | string
  }

  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: IntFilter<"Country"> | number
    name?: StringFilter<"Country"> | string
    code?: StringFilter<"Country"> | string
    isActive?: BoolFilter<"Country"> | boolean
    createdAt?: DateTimeFilter<"Country"> | Date | string
    qualifications?: AcademicQualificationListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    qualifications?: AcademicQualificationOrderByRelationAggregateInput
    _relevance?: CountryOrderByRelevanceInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    code?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    isActive?: BoolFilter<"Country"> | boolean
    createdAt?: DateTimeFilter<"Country"> | Date | string
    qualifications?: AcademicQualificationListRelationFilter
  }, "id" | "name" | "code">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _avg?: CountryAvgOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
    _sum?: CountrySumOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Country"> | number
    name?: StringWithAggregatesFilter<"Country"> | string
    code?: StringWithAggregatesFilter<"Country"> | string
    isActive?: BoolWithAggregatesFilter<"Country"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Country"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    applicant?: XOR<ApplicantNullableScalarRelationFilter, ApplicantWhereInput> | null
    employer?: XOR<EmployerNullableScalarRelationFilter, EmployerWhereInput> | null
    chatRooms?: ChatRoomListRelationFilter
    agentChats?: ChatRoomListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    consents?: UserConsentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    employer?: EmployerOrderByWithRelationInput
    chatRooms?: ChatRoomOrderByRelationAggregateInput
    agentChats?: ChatRoomOrderByRelationAggregateInput
    chatMessages?: ChatMessageOrderByRelationAggregateInput
    consents?: UserConsentOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    isActive?: BoolFilter<"User"> | boolean
    lastLogin?: DateTimeNullableFilter<"User"> | Date | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    applicant?: XOR<ApplicantNullableScalarRelationFilter, ApplicantWhereInput> | null
    employer?: XOR<EmployerNullableScalarRelationFilter, EmployerWhereInput> | null
    chatRooms?: ChatRoomListRelationFilter
    agentChats?: ChatRoomListRelationFilter
    chatMessages?: ChatMessageListRelationFilter
    consents?: UserConsentListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    lastLogin?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ApplicantWhereInput = {
    AND?: ApplicantWhereInput | ApplicantWhereInput[]
    OR?: ApplicantWhereInput[]
    NOT?: ApplicantWhereInput | ApplicantWhereInput[]
    id?: IntFilter<"Applicant"> | number
    fullName?: StringFilter<"Applicant"> | string
    nida?: StringFilter<"Applicant"> | string
    phone?: StringNullableFilter<"Applicant"> | string | null
    address?: StringNullableFilter<"Applicant"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Applicant"> | Date | string | null
    gender?: StringNullableFilter<"Applicant"> | string | null
    userId?: IntFilter<"Applicant"> | number
    profileCompleted?: BoolFilter<"Applicant"> | boolean
    createdAt?: DateTimeFilter<"Applicant"> | Date | string
    updatedAt?: DateTimeFilter<"Applicant"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    applications?: ApplicationListRelationFilter
    qualifications?: AcademicQualificationListRelationFilter
    experiences?: WorkExperienceListRelationFilter
    languages?: LanguageProficiencyListRelationFilter
    computerSkills?: ComputerSkillListRelationFilter
    skills?: ApplicantSkillListRelationFilter
    generalSkills?: GeneralSkillListRelationFilter
    notifications?: NotificationListRelationFilter
    categories?: JobCategoryListRelationFilter
    notificationSettings?: XOR<NotificationSettingsNullableScalarRelationFilter, NotificationSettingsWhereInput> | null
  }

  export type ApplicantOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    nida?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    userId?: SortOrder
    profileCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
    qualifications?: AcademicQualificationOrderByRelationAggregateInput
    experiences?: WorkExperienceOrderByRelationAggregateInput
    languages?: LanguageProficiencyOrderByRelationAggregateInput
    computerSkills?: ComputerSkillOrderByRelationAggregateInput
    skills?: ApplicantSkillOrderByRelationAggregateInput
    generalSkills?: GeneralSkillOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    categories?: JobCategoryOrderByRelationAggregateInput
    notificationSettings?: NotificationSettingsOrderByWithRelationInput
    _relevance?: ApplicantOrderByRelevanceInput
  }

  export type ApplicantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nida?: string
    userId?: number
    AND?: ApplicantWhereInput | ApplicantWhereInput[]
    OR?: ApplicantWhereInput[]
    NOT?: ApplicantWhereInput | ApplicantWhereInput[]
    fullName?: StringFilter<"Applicant"> | string
    phone?: StringNullableFilter<"Applicant"> | string | null
    address?: StringNullableFilter<"Applicant"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Applicant"> | Date | string | null
    gender?: StringNullableFilter<"Applicant"> | string | null
    profileCompleted?: BoolFilter<"Applicant"> | boolean
    createdAt?: DateTimeFilter<"Applicant"> | Date | string
    updatedAt?: DateTimeFilter<"Applicant"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    applications?: ApplicationListRelationFilter
    qualifications?: AcademicQualificationListRelationFilter
    experiences?: WorkExperienceListRelationFilter
    languages?: LanguageProficiencyListRelationFilter
    computerSkills?: ComputerSkillListRelationFilter
    skills?: ApplicantSkillListRelationFilter
    generalSkills?: GeneralSkillListRelationFilter
    notifications?: NotificationListRelationFilter
    categories?: JobCategoryListRelationFilter
    notificationSettings?: XOR<NotificationSettingsNullableScalarRelationFilter, NotificationSettingsWhereInput> | null
  }, "id" | "nida" | "userId">

  export type ApplicantOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    nida?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    dateOfBirth?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    userId?: SortOrder
    profileCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApplicantCountOrderByAggregateInput
    _avg?: ApplicantAvgOrderByAggregateInput
    _max?: ApplicantMaxOrderByAggregateInput
    _min?: ApplicantMinOrderByAggregateInput
    _sum?: ApplicantSumOrderByAggregateInput
  }

  export type ApplicantScalarWhereWithAggregatesInput = {
    AND?: ApplicantScalarWhereWithAggregatesInput | ApplicantScalarWhereWithAggregatesInput[]
    OR?: ApplicantScalarWhereWithAggregatesInput[]
    NOT?: ApplicantScalarWhereWithAggregatesInput | ApplicantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Applicant"> | number
    fullName?: StringWithAggregatesFilter<"Applicant"> | string
    nida?: StringWithAggregatesFilter<"Applicant"> | string
    phone?: StringNullableWithAggregatesFilter<"Applicant"> | string | null
    address?: StringNullableWithAggregatesFilter<"Applicant"> | string | null
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"Applicant"> | Date | string | null
    gender?: StringNullableWithAggregatesFilter<"Applicant"> | string | null
    userId?: IntWithAggregatesFilter<"Applicant"> | number
    profileCompleted?: BoolWithAggregatesFilter<"Applicant"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Applicant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Applicant"> | Date | string
  }

  export type EmployerWhereInput = {
    AND?: EmployerWhereInput | EmployerWhereInput[]
    OR?: EmployerWhereInput[]
    NOT?: EmployerWhereInput | EmployerWhereInput[]
    id?: IntFilter<"Employer"> | number
    companyName?: StringFilter<"Employer"> | string
    industry?: StringNullableFilter<"Employer"> | string | null
    companySize?: StringNullableFilter<"Employer"> | string | null
    website?: StringNullableFilter<"Employer"> | string | null
    address?: StringFilter<"Employer"> | string
    phone?: StringNullableFilter<"Employer"> | string | null
    description?: StringNullableFilter<"Employer"> | string | null
    userId?: IntFilter<"Employer"> | number
    isVerified?: BoolFilter<"Employer"> | boolean
    createdAt?: DateTimeFilter<"Employer"> | Date | string
    updatedAt?: DateTimeFilter<"Employer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    jobs?: JobListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type EmployerOrderByWithRelationInput = {
    id?: SortOrder
    companyName?: SortOrder
    industry?: SortOrderInput | SortOrder
    companySize?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    address?: SortOrder
    phone?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    jobs?: JobOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    _relevance?: EmployerOrderByRelevanceInput
  }

  export type EmployerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: EmployerWhereInput | EmployerWhereInput[]
    OR?: EmployerWhereInput[]
    NOT?: EmployerWhereInput | EmployerWhereInput[]
    companyName?: StringFilter<"Employer"> | string
    industry?: StringNullableFilter<"Employer"> | string | null
    companySize?: StringNullableFilter<"Employer"> | string | null
    website?: StringNullableFilter<"Employer"> | string | null
    address?: StringFilter<"Employer"> | string
    phone?: StringNullableFilter<"Employer"> | string | null
    description?: StringNullableFilter<"Employer"> | string | null
    isVerified?: BoolFilter<"Employer"> | boolean
    createdAt?: DateTimeFilter<"Employer"> | Date | string
    updatedAt?: DateTimeFilter<"Employer"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    jobs?: JobListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "userId">

  export type EmployerOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    industry?: SortOrderInput | SortOrder
    companySize?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    address?: SortOrder
    phone?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    userId?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmployerCountOrderByAggregateInput
    _avg?: EmployerAvgOrderByAggregateInput
    _max?: EmployerMaxOrderByAggregateInput
    _min?: EmployerMinOrderByAggregateInput
    _sum?: EmployerSumOrderByAggregateInput
  }

  export type EmployerScalarWhereWithAggregatesInput = {
    AND?: EmployerScalarWhereWithAggregatesInput | EmployerScalarWhereWithAggregatesInput[]
    OR?: EmployerScalarWhereWithAggregatesInput[]
    NOT?: EmployerScalarWhereWithAggregatesInput | EmployerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Employer"> | number
    companyName?: StringWithAggregatesFilter<"Employer"> | string
    industry?: StringNullableWithAggregatesFilter<"Employer"> | string | null
    companySize?: StringNullableWithAggregatesFilter<"Employer"> | string | null
    website?: StringNullableWithAggregatesFilter<"Employer"> | string | null
    address?: StringWithAggregatesFilter<"Employer"> | string
    phone?: StringNullableWithAggregatesFilter<"Employer"> | string | null
    description?: StringNullableWithAggregatesFilter<"Employer"> | string | null
    userId?: IntWithAggregatesFilter<"Employer"> | number
    isVerified?: BoolWithAggregatesFilter<"Employer"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Employer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Employer"> | Date | string
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: IntFilter<"Job"> | number
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    location?: StringNullableFilter<"Job"> | string | null
    salaryMin?: DecimalNullableFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    salaryMax?: DecimalNullableFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    currency?: StringNullableFilter<"Job"> | string | null
    employmentType?: StringNullableFilter<"Job"> | string | null
    experienceLevel?: StringNullableFilter<"Job"> | string | null
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    applicationCount?: IntFilter<"Job"> | number
    viewCount?: IntFilter<"Job"> | number
    employerId?: IntFilter<"Job"> | number
    expiresAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    employer?: XOR<EmployerScalarRelationFilter, EmployerWhereInput>
    applications?: ApplicationListRelationFilter
    categories?: JobCategoryListRelationFilter
    requirements?: JobRequirementListRelationFilter
    interviews?: InterviewListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrderInput | SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    employmentType?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    status?: SortOrder
    applicationCount?: SortOrder
    viewCount?: SortOrder
    employerId?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    employer?: EmployerOrderByWithRelationInput
    applications?: ApplicationOrderByRelationAggregateInput
    categories?: JobCategoryOrderByRelationAggregateInput
    requirements?: JobRequirementOrderByRelationAggregateInput
    interviews?: InterviewOrderByRelationAggregateInput
    _relevance?: JobOrderByRelevanceInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    location?: StringNullableFilter<"Job"> | string | null
    salaryMin?: DecimalNullableFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    salaryMax?: DecimalNullableFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    currency?: StringNullableFilter<"Job"> | string | null
    employmentType?: StringNullableFilter<"Job"> | string | null
    experienceLevel?: StringNullableFilter<"Job"> | string | null
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    applicationCount?: IntFilter<"Job"> | number
    viewCount?: IntFilter<"Job"> | number
    employerId?: IntFilter<"Job"> | number
    expiresAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
    employer?: XOR<EmployerScalarRelationFilter, EmployerWhereInput>
    applications?: ApplicationListRelationFilter
    categories?: JobCategoryListRelationFilter
    requirements?: JobRequirementListRelationFilter
    interviews?: InterviewListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrderInput | SortOrder
    salaryMin?: SortOrderInput | SortOrder
    salaryMax?: SortOrderInput | SortOrder
    currency?: SortOrderInput | SortOrder
    employmentType?: SortOrderInput | SortOrder
    experienceLevel?: SortOrderInput | SortOrder
    status?: SortOrder
    applicationCount?: SortOrder
    viewCount?: SortOrder
    employerId?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Job"> | number
    title?: StringWithAggregatesFilter<"Job"> | string
    description?: StringWithAggregatesFilter<"Job"> | string
    location?: StringNullableWithAggregatesFilter<"Job"> | string | null
    salaryMin?: DecimalNullableWithAggregatesFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    salaryMax?: DecimalNullableWithAggregatesFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    currency?: StringNullableWithAggregatesFilter<"Job"> | string | null
    employmentType?: StringNullableWithAggregatesFilter<"Job"> | string | null
    experienceLevel?: StringNullableWithAggregatesFilter<"Job"> | string | null
    status?: EnumJobStatusWithAggregatesFilter<"Job"> | $Enums.JobStatus
    applicationCount?: IntWithAggregatesFilter<"Job"> | number
    viewCount?: IntWithAggregatesFilter<"Job"> | number
    employerId?: IntWithAggregatesFilter<"Job"> | number
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Job"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type JobRequirementWhereInput = {
    AND?: JobRequirementWhereInput | JobRequirementWhereInput[]
    OR?: JobRequirementWhereInput[]
    NOT?: JobRequirementWhereInput | JobRequirementWhereInput[]
    id?: IntFilter<"JobRequirement"> | number
    jobId?: IntFilter<"JobRequirement"> | number
    skillMasterId?: IntFilter<"JobRequirement"> | number
    importance?: EnumImportanceLevelFilter<"JobRequirement"> | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFilter<"JobRequirement"> | $Enums.ProficiencyLevel
    yearsRequired?: IntNullableFilter<"JobRequirement"> | number | null
    description?: StringNullableFilter<"JobRequirement"> | string | null
    createdAt?: DateTimeFilter<"JobRequirement"> | Date | string
    updatedAt?: DateTimeFilter<"JobRequirement"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    skillMaster?: XOR<SkillMasterScalarRelationFilter, SkillMasterWhereInput>
  }

  export type JobRequirementOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    skillMasterId?: SortOrder
    importance?: SortOrder
    proficiencyLevel?: SortOrder
    yearsRequired?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
    skillMaster?: SkillMasterOrderByWithRelationInput
    _relevance?: JobRequirementOrderByRelevanceInput
  }

  export type JobRequirementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    jobId_skillMasterId?: JobRequirementJobIdSkillMasterIdCompoundUniqueInput
    AND?: JobRequirementWhereInput | JobRequirementWhereInput[]
    OR?: JobRequirementWhereInput[]
    NOT?: JobRequirementWhereInput | JobRequirementWhereInput[]
    jobId?: IntFilter<"JobRequirement"> | number
    skillMasterId?: IntFilter<"JobRequirement"> | number
    importance?: EnumImportanceLevelFilter<"JobRequirement"> | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFilter<"JobRequirement"> | $Enums.ProficiencyLevel
    yearsRequired?: IntNullableFilter<"JobRequirement"> | number | null
    description?: StringNullableFilter<"JobRequirement"> | string | null
    createdAt?: DateTimeFilter<"JobRequirement"> | Date | string
    updatedAt?: DateTimeFilter<"JobRequirement"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    skillMaster?: XOR<SkillMasterScalarRelationFilter, SkillMasterWhereInput>
  }, "id" | "jobId_skillMasterId">

  export type JobRequirementOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    skillMasterId?: SortOrder
    importance?: SortOrder
    proficiencyLevel?: SortOrder
    yearsRequired?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JobRequirementCountOrderByAggregateInput
    _avg?: JobRequirementAvgOrderByAggregateInput
    _max?: JobRequirementMaxOrderByAggregateInput
    _min?: JobRequirementMinOrderByAggregateInput
    _sum?: JobRequirementSumOrderByAggregateInput
  }

  export type JobRequirementScalarWhereWithAggregatesInput = {
    AND?: JobRequirementScalarWhereWithAggregatesInput | JobRequirementScalarWhereWithAggregatesInput[]
    OR?: JobRequirementScalarWhereWithAggregatesInput[]
    NOT?: JobRequirementScalarWhereWithAggregatesInput | JobRequirementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"JobRequirement"> | number
    jobId?: IntWithAggregatesFilter<"JobRequirement"> | number
    skillMasterId?: IntWithAggregatesFilter<"JobRequirement"> | number
    importance?: EnumImportanceLevelWithAggregatesFilter<"JobRequirement"> | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelWithAggregatesFilter<"JobRequirement"> | $Enums.ProficiencyLevel
    yearsRequired?: IntNullableWithAggregatesFilter<"JobRequirement"> | number | null
    description?: StringNullableWithAggregatesFilter<"JobRequirement"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"JobRequirement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"JobRequirement"> | Date | string
  }

  export type ApplicantSkillWhereInput = {
    AND?: ApplicantSkillWhereInput | ApplicantSkillWhereInput[]
    OR?: ApplicantSkillWhereInput[]
    NOT?: ApplicantSkillWhereInput | ApplicantSkillWhereInput[]
    id?: IntFilter<"ApplicantSkill"> | number
    applicantId?: IntFilter<"ApplicantSkill"> | number
    skillMasterId?: IntFilter<"ApplicantSkill"> | number
    proficiency?: EnumProficiencyLevelFilter<"ApplicantSkill"> | $Enums.ProficiencyLevel
    yearsExperience?: IntNullableFilter<"ApplicantSkill"> | number | null
    lastUsed?: DateTimeNullableFilter<"ApplicantSkill"> | Date | string | null
    isCertified?: BoolFilter<"ApplicantSkill"> | boolean
    certificationName?: StringNullableFilter<"ApplicantSkill"> | string | null
    createdAt?: DateTimeFilter<"ApplicantSkill"> | Date | string
    updatedAt?: DateTimeFilter<"ApplicantSkill"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
    skillMaster?: XOR<SkillMasterScalarRelationFilter, SkillMasterWhereInput>
  }

  export type ApplicantSkillOrderByWithRelationInput = {
    id?: SortOrder
    applicantId?: SortOrder
    skillMasterId?: SortOrder
    proficiency?: SortOrder
    yearsExperience?: SortOrderInput | SortOrder
    lastUsed?: SortOrderInput | SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    skillMaster?: SkillMasterOrderByWithRelationInput
    _relevance?: ApplicantSkillOrderByRelevanceInput
  }

  export type ApplicantSkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    applicantId_skillMasterId?: ApplicantSkillApplicantIdSkillMasterIdCompoundUniqueInput
    AND?: ApplicantSkillWhereInput | ApplicantSkillWhereInput[]
    OR?: ApplicantSkillWhereInput[]
    NOT?: ApplicantSkillWhereInput | ApplicantSkillWhereInput[]
    applicantId?: IntFilter<"ApplicantSkill"> | number
    skillMasterId?: IntFilter<"ApplicantSkill"> | number
    proficiency?: EnumProficiencyLevelFilter<"ApplicantSkill"> | $Enums.ProficiencyLevel
    yearsExperience?: IntNullableFilter<"ApplicantSkill"> | number | null
    lastUsed?: DateTimeNullableFilter<"ApplicantSkill"> | Date | string | null
    isCertified?: BoolFilter<"ApplicantSkill"> | boolean
    certificationName?: StringNullableFilter<"ApplicantSkill"> | string | null
    createdAt?: DateTimeFilter<"ApplicantSkill"> | Date | string
    updatedAt?: DateTimeFilter<"ApplicantSkill"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
    skillMaster?: XOR<SkillMasterScalarRelationFilter, SkillMasterWhereInput>
  }, "id" | "applicantId_skillMasterId">

  export type ApplicantSkillOrderByWithAggregationInput = {
    id?: SortOrder
    applicantId?: SortOrder
    skillMasterId?: SortOrder
    proficiency?: SortOrder
    yearsExperience?: SortOrderInput | SortOrder
    lastUsed?: SortOrderInput | SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApplicantSkillCountOrderByAggregateInput
    _avg?: ApplicantSkillAvgOrderByAggregateInput
    _max?: ApplicantSkillMaxOrderByAggregateInput
    _min?: ApplicantSkillMinOrderByAggregateInput
    _sum?: ApplicantSkillSumOrderByAggregateInput
  }

  export type ApplicantSkillScalarWhereWithAggregatesInput = {
    AND?: ApplicantSkillScalarWhereWithAggregatesInput | ApplicantSkillScalarWhereWithAggregatesInput[]
    OR?: ApplicantSkillScalarWhereWithAggregatesInput[]
    NOT?: ApplicantSkillScalarWhereWithAggregatesInput | ApplicantSkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ApplicantSkill"> | number
    applicantId?: IntWithAggregatesFilter<"ApplicantSkill"> | number
    skillMasterId?: IntWithAggregatesFilter<"ApplicantSkill"> | number
    proficiency?: EnumProficiencyLevelWithAggregatesFilter<"ApplicantSkill"> | $Enums.ProficiencyLevel
    yearsExperience?: IntNullableWithAggregatesFilter<"ApplicantSkill"> | number | null
    lastUsed?: DateTimeNullableWithAggregatesFilter<"ApplicantSkill"> | Date | string | null
    isCertified?: BoolWithAggregatesFilter<"ApplicantSkill"> | boolean
    certificationName?: StringNullableWithAggregatesFilter<"ApplicantSkill"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApplicantSkill"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ApplicantSkill"> | Date | string
  }

  export type ApplicationWhereInput = {
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    id?: IntFilter<"Application"> | number
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    jobId?: IntFilter<"Application"> | number
    applicantId?: IntFilter<"Application"> | number
    coverLetter?: StringNullableFilter<"Application"> | string | null
    appliedAt?: DateTimeFilter<"Application"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    reviewedBy?: IntNullableFilter<"Application"> | number | null
    rejectionReason?: StringNullableFilter<"Application"> | string | null
    notes?: StringNullableFilter<"Application"> | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
    notifications?: NotificationListRelationFilter
    interviews?: InterviewListRelationFilter
    emailLogs?: EmailLogListRelationFilter
  }

  export type ApplicationOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    coverLetter?: SortOrderInput | SortOrder
    appliedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
    applicant?: ApplicantOrderByWithRelationInput
    notifications?: NotificationOrderByRelationAggregateInput
    interviews?: InterviewOrderByRelationAggregateInput
    emailLogs?: EmailLogOrderByRelationAggregateInput
    _relevance?: ApplicationOrderByRelevanceInput
  }

  export type ApplicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    applicantId_jobId?: ApplicationApplicantIdJobIdCompoundUniqueInput
    AND?: ApplicationWhereInput | ApplicationWhereInput[]
    OR?: ApplicationWhereInput[]
    NOT?: ApplicationWhereInput | ApplicationWhereInput[]
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    jobId?: IntFilter<"Application"> | number
    applicantId?: IntFilter<"Application"> | number
    coverLetter?: StringNullableFilter<"Application"> | string | null
    appliedAt?: DateTimeFilter<"Application"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    reviewedBy?: IntNullableFilter<"Application"> | number | null
    rejectionReason?: StringNullableFilter<"Application"> | string | null
    notes?: StringNullableFilter<"Application"> | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
    job?: XOR<JobScalarRelationFilter, JobWhereInput>
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
    notifications?: NotificationListRelationFilter
    interviews?: InterviewListRelationFilter
    emailLogs?: EmailLogListRelationFilter
  }, "id" | "applicantId_jobId">

  export type ApplicationOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    coverLetter?: SortOrderInput | SortOrder
    appliedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApplicationCountOrderByAggregateInput
    _avg?: ApplicationAvgOrderByAggregateInput
    _max?: ApplicationMaxOrderByAggregateInput
    _min?: ApplicationMinOrderByAggregateInput
    _sum?: ApplicationSumOrderByAggregateInput
  }

  export type ApplicationScalarWhereWithAggregatesInput = {
    AND?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    OR?: ApplicationScalarWhereWithAggregatesInput[]
    NOT?: ApplicationScalarWhereWithAggregatesInput | ApplicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Application"> | number
    status?: EnumApplicationStatusWithAggregatesFilter<"Application"> | $Enums.ApplicationStatus
    jobId?: IntWithAggregatesFilter<"Application"> | number
    applicantId?: IntWithAggregatesFilter<"Application"> | number
    coverLetter?: StringNullableWithAggregatesFilter<"Application"> | string | null
    appliedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"Application"> | Date | string | null
    reviewedBy?: IntNullableWithAggregatesFilter<"Application"> | number | null
    rejectionReason?: StringNullableWithAggregatesFilter<"Application"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Application"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Application"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    applicantId?: IntNullableFilter<"Notification"> | number | null
    employerId?: IntNullableFilter<"Notification"> | number | null
    applicationId?: IntNullableFilter<"Notification"> | number | null
    applicant?: XOR<ApplicantNullableScalarRelationFilter, ApplicantWhereInput> | null
    employer?: XOR<EmployerNullableScalarRelationFilter, EmployerWhereInput> | null
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    applicantId?: SortOrderInput | SortOrder
    employerId?: SortOrderInput | SortOrder
    applicationId?: SortOrderInput | SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    employer?: EmployerOrderByWithRelationInput
    application?: ApplicationOrderByWithRelationInput
    _relevance?: NotificationOrderByRelevanceInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    applicantId?: IntNullableFilter<"Notification"> | number | null
    employerId?: IntNullableFilter<"Notification"> | number | null
    applicationId?: IntNullableFilter<"Notification"> | number | null
    applicant?: XOR<ApplicantNullableScalarRelationFilter, ApplicantWhereInput> | null
    employer?: XOR<EmployerNullableScalarRelationFilter, EmployerWhereInput> | null
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    applicantId?: SortOrderInput | SortOrder
    employerId?: SortOrderInput | SortOrder
    applicationId?: SortOrderInput | SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    applicantId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    employerId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    applicationId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
  }

  export type AcademicQualificationWhereInput = {
    AND?: AcademicQualificationWhereInput | AcademicQualificationWhereInput[]
    OR?: AcademicQualificationWhereInput[]
    NOT?: AcademicQualificationWhereInput | AcademicQualificationWhereInput[]
    id?: IntFilter<"AcademicQualification"> | number
    level?: StringFilter<"AcademicQualification"> | string
    countryId?: IntFilter<"AcademicQualification"> | number
    institution?: StringFilter<"AcademicQualification"> | string
    fieldOfStudy?: StringFilter<"AcademicQualification"> | string
    grade?: StringNullableFilter<"AcademicQualification"> | string | null
    startDate?: DateTimeFilter<"AcademicQualification"> | Date | string
    endDate?: DateTimeNullableFilter<"AcademicQualification"> | Date | string | null
    isCompleted?: BoolFilter<"AcademicQualification"> | boolean
    certificateUrl?: StringNullableFilter<"AcademicQualification"> | string | null
    applicantId?: IntFilter<"AcademicQualification"> | number
    createdAt?: DateTimeFilter<"AcademicQualification"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicQualification"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
  }

  export type AcademicQualificationOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    countryId?: SortOrder
    institution?: SortOrder
    fieldOfStudy?: SortOrder
    grade?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    certificateUrl?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    country?: CountryOrderByWithRelationInput
    _relevance?: AcademicQualificationOrderByRelevanceInput
  }

  export type AcademicQualificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AcademicQualificationWhereInput | AcademicQualificationWhereInput[]
    OR?: AcademicQualificationWhereInput[]
    NOT?: AcademicQualificationWhereInput | AcademicQualificationWhereInput[]
    level?: StringFilter<"AcademicQualification"> | string
    countryId?: IntFilter<"AcademicQualification"> | number
    institution?: StringFilter<"AcademicQualification"> | string
    fieldOfStudy?: StringFilter<"AcademicQualification"> | string
    grade?: StringNullableFilter<"AcademicQualification"> | string | null
    startDate?: DateTimeFilter<"AcademicQualification"> | Date | string
    endDate?: DateTimeNullableFilter<"AcademicQualification"> | Date | string | null
    isCompleted?: BoolFilter<"AcademicQualification"> | boolean
    certificateUrl?: StringNullableFilter<"AcademicQualification"> | string | null
    applicantId?: IntFilter<"AcademicQualification"> | number
    createdAt?: DateTimeFilter<"AcademicQualification"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicQualification"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
  }, "id">

  export type AcademicQualificationOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    countryId?: SortOrder
    institution?: SortOrder
    fieldOfStudy?: SortOrder
    grade?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isCompleted?: SortOrder
    certificateUrl?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AcademicQualificationCountOrderByAggregateInput
    _avg?: AcademicQualificationAvgOrderByAggregateInput
    _max?: AcademicQualificationMaxOrderByAggregateInput
    _min?: AcademicQualificationMinOrderByAggregateInput
    _sum?: AcademicQualificationSumOrderByAggregateInput
  }

  export type AcademicQualificationScalarWhereWithAggregatesInput = {
    AND?: AcademicQualificationScalarWhereWithAggregatesInput | AcademicQualificationScalarWhereWithAggregatesInput[]
    OR?: AcademicQualificationScalarWhereWithAggregatesInput[]
    NOT?: AcademicQualificationScalarWhereWithAggregatesInput | AcademicQualificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AcademicQualification"> | number
    level?: StringWithAggregatesFilter<"AcademicQualification"> | string
    countryId?: IntWithAggregatesFilter<"AcademicQualification"> | number
    institution?: StringWithAggregatesFilter<"AcademicQualification"> | string
    fieldOfStudy?: StringWithAggregatesFilter<"AcademicQualification"> | string
    grade?: StringNullableWithAggregatesFilter<"AcademicQualification"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"AcademicQualification"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"AcademicQualification"> | Date | string | null
    isCompleted?: BoolWithAggregatesFilter<"AcademicQualification"> | boolean
    certificateUrl?: StringNullableWithAggregatesFilter<"AcademicQualification"> | string | null
    applicantId?: IntWithAggregatesFilter<"AcademicQualification"> | number
    createdAt?: DateTimeWithAggregatesFilter<"AcademicQualification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AcademicQualification"> | Date | string
  }

  export type WorkExperienceWhereInput = {
    AND?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    OR?: WorkExperienceWhereInput[]
    NOT?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    id?: IntFilter<"WorkExperience"> | number
    companyName?: StringFilter<"WorkExperience"> | string
    jobTitle?: StringFilter<"WorkExperience"> | string
    industry?: StringNullableFilter<"WorkExperience"> | string | null
    location?: StringNullableFilter<"WorkExperience"> | string | null
    employmentType?: StringNullableFilter<"WorkExperience"> | string | null
    startDate?: DateTimeFilter<"WorkExperience"> | Date | string
    endDate?: DateTimeNullableFilter<"WorkExperience"> | Date | string | null
    isCurrent?: BoolFilter<"WorkExperience"> | boolean
    responsibilities?: StringNullableFilter<"WorkExperience"> | string | null
    achievements?: StringNullableFilter<"WorkExperience"> | string | null
    supervisorName?: StringNullableFilter<"WorkExperience"> | string | null
    supervisorContact?: StringNullableFilter<"WorkExperience"> | string | null
    applicantId?: IntFilter<"WorkExperience"> | number
    createdAt?: DateTimeFilter<"WorkExperience"> | Date | string
    updatedAt?: DateTimeFilter<"WorkExperience"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type WorkExperienceOrderByWithRelationInput = {
    id?: SortOrder
    companyName?: SortOrder
    jobTitle?: SortOrder
    industry?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    employmentType?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isCurrent?: SortOrder
    responsibilities?: SortOrderInput | SortOrder
    achievements?: SortOrderInput | SortOrder
    supervisorName?: SortOrderInput | SortOrder
    supervisorContact?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    _relevance?: WorkExperienceOrderByRelevanceInput
  }

  export type WorkExperienceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    OR?: WorkExperienceWhereInput[]
    NOT?: WorkExperienceWhereInput | WorkExperienceWhereInput[]
    companyName?: StringFilter<"WorkExperience"> | string
    jobTitle?: StringFilter<"WorkExperience"> | string
    industry?: StringNullableFilter<"WorkExperience"> | string | null
    location?: StringNullableFilter<"WorkExperience"> | string | null
    employmentType?: StringNullableFilter<"WorkExperience"> | string | null
    startDate?: DateTimeFilter<"WorkExperience"> | Date | string
    endDate?: DateTimeNullableFilter<"WorkExperience"> | Date | string | null
    isCurrent?: BoolFilter<"WorkExperience"> | boolean
    responsibilities?: StringNullableFilter<"WorkExperience"> | string | null
    achievements?: StringNullableFilter<"WorkExperience"> | string | null
    supervisorName?: StringNullableFilter<"WorkExperience"> | string | null
    supervisorContact?: StringNullableFilter<"WorkExperience"> | string | null
    applicantId?: IntFilter<"WorkExperience"> | number
    createdAt?: DateTimeFilter<"WorkExperience"> | Date | string
    updatedAt?: DateTimeFilter<"WorkExperience"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id">

  export type WorkExperienceOrderByWithAggregationInput = {
    id?: SortOrder
    companyName?: SortOrder
    jobTitle?: SortOrder
    industry?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    employmentType?: SortOrderInput | SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    isCurrent?: SortOrder
    responsibilities?: SortOrderInput | SortOrder
    achievements?: SortOrderInput | SortOrder
    supervisorName?: SortOrderInput | SortOrder
    supervisorContact?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WorkExperienceCountOrderByAggregateInput
    _avg?: WorkExperienceAvgOrderByAggregateInput
    _max?: WorkExperienceMaxOrderByAggregateInput
    _min?: WorkExperienceMinOrderByAggregateInput
    _sum?: WorkExperienceSumOrderByAggregateInput
  }

  export type WorkExperienceScalarWhereWithAggregatesInput = {
    AND?: WorkExperienceScalarWhereWithAggregatesInput | WorkExperienceScalarWhereWithAggregatesInput[]
    OR?: WorkExperienceScalarWhereWithAggregatesInput[]
    NOT?: WorkExperienceScalarWhereWithAggregatesInput | WorkExperienceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"WorkExperience"> | number
    companyName?: StringWithAggregatesFilter<"WorkExperience"> | string
    jobTitle?: StringWithAggregatesFilter<"WorkExperience"> | string
    industry?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    location?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    employmentType?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    startDate?: DateTimeWithAggregatesFilter<"WorkExperience"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"WorkExperience"> | Date | string | null
    isCurrent?: BoolWithAggregatesFilter<"WorkExperience"> | boolean
    responsibilities?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    achievements?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    supervisorName?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    supervisorContact?: StringNullableWithAggregatesFilter<"WorkExperience"> | string | null
    applicantId?: IntWithAggregatesFilter<"WorkExperience"> | number
    createdAt?: DateTimeWithAggregatesFilter<"WorkExperience"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"WorkExperience"> | Date | string
  }

  export type LanguageProficiencyWhereInput = {
    AND?: LanguageProficiencyWhereInput | LanguageProficiencyWhereInput[]
    OR?: LanguageProficiencyWhereInput[]
    NOT?: LanguageProficiencyWhereInput | LanguageProficiencyWhereInput[]
    id?: IntFilter<"LanguageProficiency"> | number
    language?: StringFilter<"LanguageProficiency"> | string
    speakLevel?: StringFilter<"LanguageProficiency"> | string
    readLevel?: StringFilter<"LanguageProficiency"> | string
    writeLevel?: StringFilter<"LanguageProficiency"> | string
    isCertified?: BoolFilter<"LanguageProficiency"> | boolean
    certificationName?: StringNullableFilter<"LanguageProficiency"> | string | null
    applicantId?: IntFilter<"LanguageProficiency"> | number
    createdAt?: DateTimeFilter<"LanguageProficiency"> | Date | string
    updatedAt?: DateTimeFilter<"LanguageProficiency"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type LanguageProficiencyOrderByWithRelationInput = {
    id?: SortOrder
    language?: SortOrder
    speakLevel?: SortOrder
    readLevel?: SortOrder
    writeLevel?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    _relevance?: LanguageProficiencyOrderByRelevanceInput
  }

  export type LanguageProficiencyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LanguageProficiencyWhereInput | LanguageProficiencyWhereInput[]
    OR?: LanguageProficiencyWhereInput[]
    NOT?: LanguageProficiencyWhereInput | LanguageProficiencyWhereInput[]
    language?: StringFilter<"LanguageProficiency"> | string
    speakLevel?: StringFilter<"LanguageProficiency"> | string
    readLevel?: StringFilter<"LanguageProficiency"> | string
    writeLevel?: StringFilter<"LanguageProficiency"> | string
    isCertified?: BoolFilter<"LanguageProficiency"> | boolean
    certificationName?: StringNullableFilter<"LanguageProficiency"> | string | null
    applicantId?: IntFilter<"LanguageProficiency"> | number
    createdAt?: DateTimeFilter<"LanguageProficiency"> | Date | string
    updatedAt?: DateTimeFilter<"LanguageProficiency"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id">

  export type LanguageProficiencyOrderByWithAggregationInput = {
    id?: SortOrder
    language?: SortOrder
    speakLevel?: SortOrder
    readLevel?: SortOrder
    writeLevel?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrderInput | SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LanguageProficiencyCountOrderByAggregateInput
    _avg?: LanguageProficiencyAvgOrderByAggregateInput
    _max?: LanguageProficiencyMaxOrderByAggregateInput
    _min?: LanguageProficiencyMinOrderByAggregateInput
    _sum?: LanguageProficiencySumOrderByAggregateInput
  }

  export type LanguageProficiencyScalarWhereWithAggregatesInput = {
    AND?: LanguageProficiencyScalarWhereWithAggregatesInput | LanguageProficiencyScalarWhereWithAggregatesInput[]
    OR?: LanguageProficiencyScalarWhereWithAggregatesInput[]
    NOT?: LanguageProficiencyScalarWhereWithAggregatesInput | LanguageProficiencyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LanguageProficiency"> | number
    language?: StringWithAggregatesFilter<"LanguageProficiency"> | string
    speakLevel?: StringWithAggregatesFilter<"LanguageProficiency"> | string
    readLevel?: StringWithAggregatesFilter<"LanguageProficiency"> | string
    writeLevel?: StringWithAggregatesFilter<"LanguageProficiency"> | string
    isCertified?: BoolWithAggregatesFilter<"LanguageProficiency"> | boolean
    certificationName?: StringNullableWithAggregatesFilter<"LanguageProficiency"> | string | null
    applicantId?: IntWithAggregatesFilter<"LanguageProficiency"> | number
    createdAt?: DateTimeWithAggregatesFilter<"LanguageProficiency"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LanguageProficiency"> | Date | string
  }

  export type ComputerSkillWhereInput = {
    AND?: ComputerSkillWhereInput | ComputerSkillWhereInput[]
    OR?: ComputerSkillWhereInput[]
    NOT?: ComputerSkillWhereInput | ComputerSkillWhereInput[]
    id?: IntFilter<"ComputerSkill"> | number
    skill?: StringFilter<"ComputerSkill"> | string
    proficiency?: StringFilter<"ComputerSkill"> | string
    applicantId?: IntFilter<"ComputerSkill"> | number
    createdAt?: DateTimeFilter<"ComputerSkill"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type ComputerSkillOrderByWithRelationInput = {
    id?: SortOrder
    skill?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    _relevance?: ComputerSkillOrderByRelevanceInput
  }

  export type ComputerSkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ComputerSkillWhereInput | ComputerSkillWhereInput[]
    OR?: ComputerSkillWhereInput[]
    NOT?: ComputerSkillWhereInput | ComputerSkillWhereInput[]
    skill?: StringFilter<"ComputerSkill"> | string
    proficiency?: StringFilter<"ComputerSkill"> | string
    applicantId?: IntFilter<"ComputerSkill"> | number
    createdAt?: DateTimeFilter<"ComputerSkill"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id">

  export type ComputerSkillOrderByWithAggregationInput = {
    id?: SortOrder
    skill?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    _count?: ComputerSkillCountOrderByAggregateInput
    _avg?: ComputerSkillAvgOrderByAggregateInput
    _max?: ComputerSkillMaxOrderByAggregateInput
    _min?: ComputerSkillMinOrderByAggregateInput
    _sum?: ComputerSkillSumOrderByAggregateInput
  }

  export type ComputerSkillScalarWhereWithAggregatesInput = {
    AND?: ComputerSkillScalarWhereWithAggregatesInput | ComputerSkillScalarWhereWithAggregatesInput[]
    OR?: ComputerSkillScalarWhereWithAggregatesInput[]
    NOT?: ComputerSkillScalarWhereWithAggregatesInput | ComputerSkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ComputerSkill"> | number
    skill?: StringWithAggregatesFilter<"ComputerSkill"> | string
    proficiency?: StringWithAggregatesFilter<"ComputerSkill"> | string
    applicantId?: IntWithAggregatesFilter<"ComputerSkill"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ComputerSkill"> | Date | string
  }

  export type GeneralSkillWhereInput = {
    AND?: GeneralSkillWhereInput | GeneralSkillWhereInput[]
    OR?: GeneralSkillWhereInput[]
    NOT?: GeneralSkillWhereInput | GeneralSkillWhereInput[]
    id?: IntFilter<"GeneralSkill"> | number
    skill?: StringFilter<"GeneralSkill"> | string
    description?: StringNullableFilter<"GeneralSkill"> | string | null
    proficiency?: StringFilter<"GeneralSkill"> | string
    applicantId?: IntFilter<"GeneralSkill"> | number
    createdAt?: DateTimeFilter<"GeneralSkill"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralSkill"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type GeneralSkillOrderByWithRelationInput = {
    id?: SortOrder
    skill?: SortOrder
    description?: SortOrderInput | SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
    _relevance?: GeneralSkillOrderByRelevanceInput
  }

  export type GeneralSkillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GeneralSkillWhereInput | GeneralSkillWhereInput[]
    OR?: GeneralSkillWhereInput[]
    NOT?: GeneralSkillWhereInput | GeneralSkillWhereInput[]
    skill?: StringFilter<"GeneralSkill"> | string
    description?: StringNullableFilter<"GeneralSkill"> | string | null
    proficiency?: StringFilter<"GeneralSkill"> | string
    applicantId?: IntFilter<"GeneralSkill"> | number
    createdAt?: DateTimeFilter<"GeneralSkill"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralSkill"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id">

  export type GeneralSkillOrderByWithAggregationInput = {
    id?: SortOrder
    skill?: SortOrder
    description?: SortOrderInput | SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GeneralSkillCountOrderByAggregateInput
    _avg?: GeneralSkillAvgOrderByAggregateInput
    _max?: GeneralSkillMaxOrderByAggregateInput
    _min?: GeneralSkillMinOrderByAggregateInput
    _sum?: GeneralSkillSumOrderByAggregateInput
  }

  export type GeneralSkillScalarWhereWithAggregatesInput = {
    AND?: GeneralSkillScalarWhereWithAggregatesInput | GeneralSkillScalarWhereWithAggregatesInput[]
    OR?: GeneralSkillScalarWhereWithAggregatesInput[]
    NOT?: GeneralSkillScalarWhereWithAggregatesInput | GeneralSkillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GeneralSkill"> | number
    skill?: StringWithAggregatesFilter<"GeneralSkill"> | string
    description?: StringNullableWithAggregatesFilter<"GeneralSkill"> | string | null
    proficiency?: StringWithAggregatesFilter<"GeneralSkill"> | string
    applicantId?: IntWithAggregatesFilter<"GeneralSkill"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GeneralSkill"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GeneralSkill"> | Date | string
  }

  export type SkillDemandWhereInput = {
    AND?: SkillDemandWhereInput | SkillDemandWhereInput[]
    OR?: SkillDemandWhereInput[]
    NOT?: SkillDemandWhereInput | SkillDemandWhereInput[]
    id?: IntFilter<"SkillDemand"> | number
    skillMasterId?: IntFilter<"SkillDemand"> | number
    demandScore?: FloatFilter<"SkillDemand"> | number
    growth?: FloatFilter<"SkillDemand"> | number
    industry?: StringNullableFilter<"SkillDemand"> | string | null
    region?: StringNullableFilter<"SkillDemand"> | string | null
    period?: DateTimeFilter<"SkillDemand"> | Date | string
    source?: StringNullableFilter<"SkillDemand"> | string | null
    createdAt?: DateTimeFilter<"SkillDemand"> | Date | string
    skillMaster?: XOR<SkillMasterScalarRelationFilter, SkillMasterWhereInput>
  }

  export type SkillDemandOrderByWithRelationInput = {
    id?: SortOrder
    skillMasterId?: SortOrder
    demandScore?: SortOrder
    growth?: SortOrder
    industry?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    period?: SortOrder
    source?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    skillMaster?: SkillMasterOrderByWithRelationInput
    _relevance?: SkillDemandOrderByRelevanceInput
  }

  export type SkillDemandWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SkillDemandWhereInput | SkillDemandWhereInput[]
    OR?: SkillDemandWhereInput[]
    NOT?: SkillDemandWhereInput | SkillDemandWhereInput[]
    skillMasterId?: IntFilter<"SkillDemand"> | number
    demandScore?: FloatFilter<"SkillDemand"> | number
    growth?: FloatFilter<"SkillDemand"> | number
    industry?: StringNullableFilter<"SkillDemand"> | string | null
    region?: StringNullableFilter<"SkillDemand"> | string | null
    period?: DateTimeFilter<"SkillDemand"> | Date | string
    source?: StringNullableFilter<"SkillDemand"> | string | null
    createdAt?: DateTimeFilter<"SkillDemand"> | Date | string
    skillMaster?: XOR<SkillMasterScalarRelationFilter, SkillMasterWhereInput>
  }, "id">

  export type SkillDemandOrderByWithAggregationInput = {
    id?: SortOrder
    skillMasterId?: SortOrder
    demandScore?: SortOrder
    growth?: SortOrder
    industry?: SortOrderInput | SortOrder
    region?: SortOrderInput | SortOrder
    period?: SortOrder
    source?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: SkillDemandCountOrderByAggregateInput
    _avg?: SkillDemandAvgOrderByAggregateInput
    _max?: SkillDemandMaxOrderByAggregateInput
    _min?: SkillDemandMinOrderByAggregateInput
    _sum?: SkillDemandSumOrderByAggregateInput
  }

  export type SkillDemandScalarWhereWithAggregatesInput = {
    AND?: SkillDemandScalarWhereWithAggregatesInput | SkillDemandScalarWhereWithAggregatesInput[]
    OR?: SkillDemandScalarWhereWithAggregatesInput[]
    NOT?: SkillDemandScalarWhereWithAggregatesInput | SkillDemandScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SkillDemand"> | number
    skillMasterId?: IntWithAggregatesFilter<"SkillDemand"> | number
    demandScore?: FloatWithAggregatesFilter<"SkillDemand"> | number
    growth?: FloatWithAggregatesFilter<"SkillDemand"> | number
    industry?: StringNullableWithAggregatesFilter<"SkillDemand"> | string | null
    region?: StringNullableWithAggregatesFilter<"SkillDemand"> | string | null
    period?: DateTimeWithAggregatesFilter<"SkillDemand"> | Date | string
    source?: StringNullableWithAggregatesFilter<"SkillDemand"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SkillDemand"> | Date | string
  }

  export type ChatRoomWhereInput = {
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    id?: IntFilter<"ChatRoom"> | number
    userId?: IntFilter<"ChatRoom"> | number
    agentId?: IntNullableFilter<"ChatRoom"> | number | null
    topic?: StringNullableFilter<"ChatRoom"> | string | null
    status?: StringFilter<"ChatRoom"> | string
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    endedAt?: DateTimeNullableFilter<"ChatRoom"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    agent?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    messages?: ChatMessageListRelationFilter
  }

  export type ChatRoomOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    agentId?: SortOrderInput | SortOrder
    topic?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    agent?: UserOrderByWithRelationInput
    messages?: ChatMessageOrderByRelationAggregateInput
    _relevance?: ChatRoomOrderByRelevanceInput
  }

  export type ChatRoomWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatRoomWhereInput | ChatRoomWhereInput[]
    OR?: ChatRoomWhereInput[]
    NOT?: ChatRoomWhereInput | ChatRoomWhereInput[]
    userId?: IntFilter<"ChatRoom"> | number
    agentId?: IntNullableFilter<"ChatRoom"> | number | null
    topic?: StringNullableFilter<"ChatRoom"> | string | null
    status?: StringFilter<"ChatRoom"> | string
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    endedAt?: DateTimeNullableFilter<"ChatRoom"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    agent?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    messages?: ChatMessageListRelationFilter
  }, "id">

  export type ChatRoomOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    agentId?: SortOrderInput | SortOrder
    topic?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrderInput | SortOrder
    _count?: ChatRoomCountOrderByAggregateInput
    _avg?: ChatRoomAvgOrderByAggregateInput
    _max?: ChatRoomMaxOrderByAggregateInput
    _min?: ChatRoomMinOrderByAggregateInput
    _sum?: ChatRoomSumOrderByAggregateInput
  }

  export type ChatRoomScalarWhereWithAggregatesInput = {
    AND?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    OR?: ChatRoomScalarWhereWithAggregatesInput[]
    NOT?: ChatRoomScalarWhereWithAggregatesInput | ChatRoomScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatRoom"> | number
    userId?: IntWithAggregatesFilter<"ChatRoom"> | number
    agentId?: IntNullableWithAggregatesFilter<"ChatRoom"> | number | null
    topic?: StringNullableWithAggregatesFilter<"ChatRoom"> | string | null
    status?: StringWithAggregatesFilter<"ChatRoom"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ChatRoom"> | Date | string
    endedAt?: DateTimeNullableWithAggregatesFilter<"ChatRoom"> | Date | string | null
  }

  export type ChatMessageWhereInput = {
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    roomId?: IntFilter<"ChatMessage"> | number
    senderId?: IntNullableFilter<"ChatMessage"> | number | null
    message?: StringFilter<"ChatMessage"> | string
    type?: StringFilter<"ChatMessage"> | string
    isRead?: BoolFilter<"ChatMessage"> | boolean
    readAt?: DateTimeNullableFilter<"ChatMessage"> | Date | string | null
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    room?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    sender?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type ChatMessageOrderByWithRelationInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    room?: ChatRoomOrderByWithRelationInput
    sender?: UserOrderByWithRelationInput
    _relevance?: ChatMessageOrderByRelevanceInput
  }

  export type ChatMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatMessageWhereInput | ChatMessageWhereInput[]
    OR?: ChatMessageWhereInput[]
    NOT?: ChatMessageWhereInput | ChatMessageWhereInput[]
    roomId?: IntFilter<"ChatMessage"> | number
    senderId?: IntNullableFilter<"ChatMessage"> | number | null
    message?: StringFilter<"ChatMessage"> | string
    type?: StringFilter<"ChatMessage"> | string
    isRead?: BoolFilter<"ChatMessage"> | boolean
    readAt?: DateTimeNullableFilter<"ChatMessage"> | Date | string | null
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
    room?: XOR<ChatRoomScalarRelationFilter, ChatRoomWhereInput>
    sender?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type ChatMessageOrderByWithAggregationInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrderInput | SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: ChatMessageCountOrderByAggregateInput
    _avg?: ChatMessageAvgOrderByAggregateInput
    _max?: ChatMessageMaxOrderByAggregateInput
    _min?: ChatMessageMinOrderByAggregateInput
    _sum?: ChatMessageSumOrderByAggregateInput
  }

  export type ChatMessageScalarWhereWithAggregatesInput = {
    AND?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    OR?: ChatMessageScalarWhereWithAggregatesInput[]
    NOT?: ChatMessageScalarWhereWithAggregatesInput | ChatMessageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatMessage"> | number
    roomId?: IntWithAggregatesFilter<"ChatMessage"> | number
    senderId?: IntNullableWithAggregatesFilter<"ChatMessage"> | number | null
    message?: StringWithAggregatesFilter<"ChatMessage"> | string
    type?: StringWithAggregatesFilter<"ChatMessage"> | string
    isRead?: BoolWithAggregatesFilter<"ChatMessage"> | boolean
    readAt?: DateTimeNullableWithAggregatesFilter<"ChatMessage"> | Date | string | null
    timestamp?: DateTimeWithAggregatesFilter<"ChatMessage"> | Date | string
  }

  export type NotificationSettingsWhereInput = {
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    id?: IntFilter<"NotificationSettings"> | number
    applicantId?: IntFilter<"NotificationSettings"> | number
    emailEnabled?: BoolFilter<"NotificationSettings"> | boolean
    emailJobMatches?: BoolFilter<"NotificationSettings"> | boolean
    emailApplicationStatus?: BoolFilter<"NotificationSettings"> | boolean
    emailInterviews?: BoolFilter<"NotificationSettings"> | boolean
    emailMarketing?: BoolFilter<"NotificationSettings"> | boolean
    smsEnabled?: BoolFilter<"NotificationSettings"> | boolean
    smsApplicationStatus?: BoolFilter<"NotificationSettings"> | boolean
    smsInterviews?: BoolFilter<"NotificationSettings"> | boolean
    smsUrgent?: BoolFilter<"NotificationSettings"> | boolean
    pushEnabled?: BoolFilter<"NotificationSettings"> | boolean
    pushJobMatches?: BoolFilter<"NotificationSettings"> | boolean
    pushApplicationStatus?: BoolFilter<"NotificationSettings"> | boolean
    pushInterviews?: BoolFilter<"NotificationSettings"> | boolean
    profileVisible?: BoolFilter<"NotificationSettings"> | boolean
    autoApply?: BoolFilter<"NotificationSettings"> | boolean
    createdAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }

  export type NotificationSettingsOrderByWithRelationInput = {
    id?: SortOrder
    applicantId?: SortOrder
    emailEnabled?: SortOrder
    emailJobMatches?: SortOrder
    emailApplicationStatus?: SortOrder
    emailInterviews?: SortOrder
    emailMarketing?: SortOrder
    smsEnabled?: SortOrder
    smsApplicationStatus?: SortOrder
    smsInterviews?: SortOrder
    smsUrgent?: SortOrder
    pushEnabled?: SortOrder
    pushJobMatches?: SortOrder
    pushApplicationStatus?: SortOrder
    pushInterviews?: SortOrder
    profileVisible?: SortOrder
    autoApply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    applicant?: ApplicantOrderByWithRelationInput
  }

  export type NotificationSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    applicantId?: number
    AND?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    OR?: NotificationSettingsWhereInput[]
    NOT?: NotificationSettingsWhereInput | NotificationSettingsWhereInput[]
    emailEnabled?: BoolFilter<"NotificationSettings"> | boolean
    emailJobMatches?: BoolFilter<"NotificationSettings"> | boolean
    emailApplicationStatus?: BoolFilter<"NotificationSettings"> | boolean
    emailInterviews?: BoolFilter<"NotificationSettings"> | boolean
    emailMarketing?: BoolFilter<"NotificationSettings"> | boolean
    smsEnabled?: BoolFilter<"NotificationSettings"> | boolean
    smsApplicationStatus?: BoolFilter<"NotificationSettings"> | boolean
    smsInterviews?: BoolFilter<"NotificationSettings"> | boolean
    smsUrgent?: BoolFilter<"NotificationSettings"> | boolean
    pushEnabled?: BoolFilter<"NotificationSettings"> | boolean
    pushJobMatches?: BoolFilter<"NotificationSettings"> | boolean
    pushApplicationStatus?: BoolFilter<"NotificationSettings"> | boolean
    pushInterviews?: BoolFilter<"NotificationSettings"> | boolean
    profileVisible?: BoolFilter<"NotificationSettings"> | boolean
    autoApply?: BoolFilter<"NotificationSettings"> | boolean
    createdAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    updatedAt?: DateTimeFilter<"NotificationSettings"> | Date | string
    applicant?: XOR<ApplicantScalarRelationFilter, ApplicantWhereInput>
  }, "id" | "applicantId">

  export type NotificationSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    applicantId?: SortOrder
    emailEnabled?: SortOrder
    emailJobMatches?: SortOrder
    emailApplicationStatus?: SortOrder
    emailInterviews?: SortOrder
    emailMarketing?: SortOrder
    smsEnabled?: SortOrder
    smsApplicationStatus?: SortOrder
    smsInterviews?: SortOrder
    smsUrgent?: SortOrder
    pushEnabled?: SortOrder
    pushJobMatches?: SortOrder
    pushApplicationStatus?: SortOrder
    pushInterviews?: SortOrder
    profileVisible?: SortOrder
    autoApply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationSettingsCountOrderByAggregateInput
    _avg?: NotificationSettingsAvgOrderByAggregateInput
    _max?: NotificationSettingsMaxOrderByAggregateInput
    _min?: NotificationSettingsMinOrderByAggregateInput
    _sum?: NotificationSettingsSumOrderByAggregateInput
  }

  export type NotificationSettingsScalarWhereWithAggregatesInput = {
    AND?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    OR?: NotificationSettingsScalarWhereWithAggregatesInput[]
    NOT?: NotificationSettingsScalarWhereWithAggregatesInput | NotificationSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"NotificationSettings"> | number
    applicantId?: IntWithAggregatesFilter<"NotificationSettings"> | number
    emailEnabled?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    emailJobMatches?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    emailApplicationStatus?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    emailInterviews?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    emailMarketing?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    smsEnabled?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    smsApplicationStatus?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    smsInterviews?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    smsUrgent?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    pushEnabled?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    pushJobMatches?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    pushApplicationStatus?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    pushInterviews?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    profileVisible?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    autoApply?: BoolWithAggregatesFilter<"NotificationSettings"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"NotificationSettings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"NotificationSettings"> | Date | string
  }

  export type MarketTrendWhereInput = {
    AND?: MarketTrendWhereInput | MarketTrendWhereInput[]
    OR?: MarketTrendWhereInput[]
    NOT?: MarketTrendWhereInput | MarketTrendWhereInput[]
    id?: IntFilter<"MarketTrend"> | number
    industry?: StringFilter<"MarketTrend"> | string
    metric?: StringFilter<"MarketTrend"> | string
    value?: FloatFilter<"MarketTrend"> | number
    period?: StringFilter<"MarketTrend"> | string
    date?: DateTimeFilter<"MarketTrend"> | Date | string
    source?: StringNullableFilter<"MarketTrend"> | string | null
    createdAt?: DateTimeFilter<"MarketTrend"> | Date | string
  }

  export type MarketTrendOrderByWithRelationInput = {
    id?: SortOrder
    industry?: SortOrder
    metric?: SortOrder
    value?: SortOrder
    period?: SortOrder
    date?: SortOrder
    source?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _relevance?: MarketTrendOrderByRelevanceInput
  }

  export type MarketTrendWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MarketTrendWhereInput | MarketTrendWhereInput[]
    OR?: MarketTrendWhereInput[]
    NOT?: MarketTrendWhereInput | MarketTrendWhereInput[]
    industry?: StringFilter<"MarketTrend"> | string
    metric?: StringFilter<"MarketTrend"> | string
    value?: FloatFilter<"MarketTrend"> | number
    period?: StringFilter<"MarketTrend"> | string
    date?: DateTimeFilter<"MarketTrend"> | Date | string
    source?: StringNullableFilter<"MarketTrend"> | string | null
    createdAt?: DateTimeFilter<"MarketTrend"> | Date | string
  }, "id">

  export type MarketTrendOrderByWithAggregationInput = {
    id?: SortOrder
    industry?: SortOrder
    metric?: SortOrder
    value?: SortOrder
    period?: SortOrder
    date?: SortOrder
    source?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: MarketTrendCountOrderByAggregateInput
    _avg?: MarketTrendAvgOrderByAggregateInput
    _max?: MarketTrendMaxOrderByAggregateInput
    _min?: MarketTrendMinOrderByAggregateInput
    _sum?: MarketTrendSumOrderByAggregateInput
  }

  export type MarketTrendScalarWhereWithAggregatesInput = {
    AND?: MarketTrendScalarWhereWithAggregatesInput | MarketTrendScalarWhereWithAggregatesInput[]
    OR?: MarketTrendScalarWhereWithAggregatesInput[]
    NOT?: MarketTrendScalarWhereWithAggregatesInput | MarketTrendScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MarketTrend"> | number
    industry?: StringWithAggregatesFilter<"MarketTrend"> | string
    metric?: StringWithAggregatesFilter<"MarketTrend"> | string
    value?: FloatWithAggregatesFilter<"MarketTrend"> | number
    period?: StringWithAggregatesFilter<"MarketTrend"> | string
    date?: DateTimeWithAggregatesFilter<"MarketTrend"> | Date | string
    source?: StringNullableWithAggregatesFilter<"MarketTrend"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"MarketTrend"> | Date | string
  }

  export type UserConsentWhereInput = {
    AND?: UserConsentWhereInput | UserConsentWhereInput[]
    OR?: UserConsentWhereInput[]
    NOT?: UserConsentWhereInput | UserConsentWhereInput[]
    id?: IntFilter<"UserConsent"> | number
    userId?: IntFilter<"UserConsent"> | number
    consentType?: StringFilter<"UserConsent"> | string
    granted?: BoolFilter<"UserConsent"> | boolean
    grantedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    revokedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    purpose?: StringNullableFilter<"UserConsent"> | string | null
    createdAt?: DateTimeFilter<"UserConsent"> | Date | string
    updatedAt?: DateTimeFilter<"UserConsent"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserConsentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    grantedAt?: SortOrderInput | SortOrder
    revokedAt?: SortOrderInput | SortOrder
    purpose?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: UserConsentOrderByRelevanceInput
  }

  export type UserConsentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId_consentType?: UserConsentUserId_consentTypeCompoundUniqueInput
    AND?: UserConsentWhereInput | UserConsentWhereInput[]
    OR?: UserConsentWhereInput[]
    NOT?: UserConsentWhereInput | UserConsentWhereInput[]
    userId?: IntFilter<"UserConsent"> | number
    consentType?: StringFilter<"UserConsent"> | string
    granted?: BoolFilter<"UserConsent"> | boolean
    grantedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    revokedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    purpose?: StringNullableFilter<"UserConsent"> | string | null
    createdAt?: DateTimeFilter<"UserConsent"> | Date | string
    updatedAt?: DateTimeFilter<"UserConsent"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_consentType">

  export type UserConsentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    grantedAt?: SortOrderInput | SortOrder
    revokedAt?: SortOrderInput | SortOrder
    purpose?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserConsentCountOrderByAggregateInput
    _avg?: UserConsentAvgOrderByAggregateInput
    _max?: UserConsentMaxOrderByAggregateInput
    _min?: UserConsentMinOrderByAggregateInput
    _sum?: UserConsentSumOrderByAggregateInput
  }

  export type UserConsentScalarWhereWithAggregatesInput = {
    AND?: UserConsentScalarWhereWithAggregatesInput | UserConsentScalarWhereWithAggregatesInput[]
    OR?: UserConsentScalarWhereWithAggregatesInput[]
    NOT?: UserConsentScalarWhereWithAggregatesInput | UserConsentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserConsent"> | number
    userId?: IntWithAggregatesFilter<"UserConsent"> | number
    consentType?: StringWithAggregatesFilter<"UserConsent"> | string
    granted?: BoolWithAggregatesFilter<"UserConsent"> | boolean
    grantedAt?: DateTimeNullableWithAggregatesFilter<"UserConsent"> | Date | string | null
    revokedAt?: DateTimeNullableWithAggregatesFilter<"UserConsent"> | Date | string | null
    purpose?: StringNullableWithAggregatesFilter<"UserConsent"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"UserConsent"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserConsent"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AuditLogOrderByRelevanceInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AuditLog"> | number
    userId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    details?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type AnonymizedDataWhereInput = {
    AND?: AnonymizedDataWhereInput | AnonymizedDataWhereInput[]
    OR?: AnonymizedDataWhereInput[]
    NOT?: AnonymizedDataWhereInput | AnonymizedDataWhereInput[]
    id?: IntFilter<"AnonymizedData"> | number
    anonymousId?: StringFilter<"AnonymizedData"> | string
    originalUserId?: IntNullableFilter<"AnonymizedData"> | number | null
    anonymizedData?: StringFilter<"AnonymizedData"> | string
    createdAt?: DateTimeFilter<"AnonymizedData"> | Date | string
  }

  export type AnonymizedDataOrderByWithRelationInput = {
    id?: SortOrder
    anonymousId?: SortOrder
    originalUserId?: SortOrderInput | SortOrder
    anonymizedData?: SortOrder
    createdAt?: SortOrder
    _relevance?: AnonymizedDataOrderByRelevanceInput
  }

  export type AnonymizedDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    anonymousId?: string
    AND?: AnonymizedDataWhereInput | AnonymizedDataWhereInput[]
    OR?: AnonymizedDataWhereInput[]
    NOT?: AnonymizedDataWhereInput | AnonymizedDataWhereInput[]
    originalUserId?: IntNullableFilter<"AnonymizedData"> | number | null
    anonymizedData?: StringFilter<"AnonymizedData"> | string
    createdAt?: DateTimeFilter<"AnonymizedData"> | Date | string
  }, "id" | "anonymousId">

  export type AnonymizedDataOrderByWithAggregationInput = {
    id?: SortOrder
    anonymousId?: SortOrder
    originalUserId?: SortOrderInput | SortOrder
    anonymizedData?: SortOrder
    createdAt?: SortOrder
    _count?: AnonymizedDataCountOrderByAggregateInput
    _avg?: AnonymizedDataAvgOrderByAggregateInput
    _max?: AnonymizedDataMaxOrderByAggregateInput
    _min?: AnonymizedDataMinOrderByAggregateInput
    _sum?: AnonymizedDataSumOrderByAggregateInput
  }

  export type AnonymizedDataScalarWhereWithAggregatesInput = {
    AND?: AnonymizedDataScalarWhereWithAggregatesInput | AnonymizedDataScalarWhereWithAggregatesInput[]
    OR?: AnonymizedDataScalarWhereWithAggregatesInput[]
    NOT?: AnonymizedDataScalarWhereWithAggregatesInput | AnonymizedDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AnonymizedData"> | number
    anonymousId?: StringWithAggregatesFilter<"AnonymizedData"> | string
    originalUserId?: IntNullableWithAggregatesFilter<"AnonymizedData"> | number | null
    anonymizedData?: StringWithAggregatesFilter<"AnonymizedData"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AnonymizedData"> | Date | string
  }

  export type InterviewWhereInput = {
    AND?: InterviewWhereInput | InterviewWhereInput[]
    OR?: InterviewWhereInput[]
    NOT?: InterviewWhereInput | InterviewWhereInput[]
    id?: IntFilter<"Interview"> | number
    applicationId?: IntFilter<"Interview"> | number
    jobId?: IntNullableFilter<"Interview"> | number | null
    scheduledAt?: DateTimeFilter<"Interview"> | Date | string
    duration?: IntFilter<"Interview"> | number
    location?: StringNullableFilter<"Interview"> | string | null
    type?: StringFilter<"Interview"> | string
    notes?: StringNullableFilter<"Interview"> | string | null
    interviewers?: StringNullableFilter<"Interview"> | string | null
    status?: StringFilter<"Interview"> | string
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
  }

  export type InterviewOrderByWithRelationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobId?: SortOrderInput | SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrderInput | SortOrder
    type?: SortOrder
    notes?: SortOrderInput | SortOrder
    interviewers?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    job?: JobOrderByWithRelationInput
    _relevance?: InterviewOrderByRelevanceInput
  }

  export type InterviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InterviewWhereInput | InterviewWhereInput[]
    OR?: InterviewWhereInput[]
    NOT?: InterviewWhereInput | InterviewWhereInput[]
    applicationId?: IntFilter<"Interview"> | number
    jobId?: IntNullableFilter<"Interview"> | number | null
    scheduledAt?: DateTimeFilter<"Interview"> | Date | string
    duration?: IntFilter<"Interview"> | number
    location?: StringNullableFilter<"Interview"> | string | null
    type?: StringFilter<"Interview"> | string
    notes?: StringNullableFilter<"Interview"> | string | null
    interviewers?: StringNullableFilter<"Interview"> | string | null
    status?: StringFilter<"Interview"> | string
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
    application?: XOR<ApplicationScalarRelationFilter, ApplicationWhereInput>
    job?: XOR<JobNullableScalarRelationFilter, JobWhereInput> | null
  }, "id">

  export type InterviewOrderByWithAggregationInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobId?: SortOrderInput | SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrderInput | SortOrder
    type?: SortOrder
    notes?: SortOrderInput | SortOrder
    interviewers?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InterviewCountOrderByAggregateInput
    _avg?: InterviewAvgOrderByAggregateInput
    _max?: InterviewMaxOrderByAggregateInput
    _min?: InterviewMinOrderByAggregateInput
    _sum?: InterviewSumOrderByAggregateInput
  }

  export type InterviewScalarWhereWithAggregatesInput = {
    AND?: InterviewScalarWhereWithAggregatesInput | InterviewScalarWhereWithAggregatesInput[]
    OR?: InterviewScalarWhereWithAggregatesInput[]
    NOT?: InterviewScalarWhereWithAggregatesInput | InterviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Interview"> | number
    applicationId?: IntWithAggregatesFilter<"Interview"> | number
    jobId?: IntNullableWithAggregatesFilter<"Interview"> | number | null
    scheduledAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
    duration?: IntWithAggregatesFilter<"Interview"> | number
    location?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    type?: StringWithAggregatesFilter<"Interview"> | string
    notes?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    interviewers?: StringNullableWithAggregatesFilter<"Interview"> | string | null
    status?: StringWithAggregatesFilter<"Interview"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Interview"> | Date | string
  }

  export type EmailLogWhereInput = {
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    id?: IntFilter<"EmailLog"> | number
    to?: StringFilter<"EmailLog"> | string
    subject?: StringFilter<"EmailLog"> | string
    message?: StringFilter<"EmailLog"> | string
    applicationId?: IntNullableFilter<"EmailLog"> | number | null
    employerId?: IntNullableFilter<"EmailLog"> | number | null
    applicantId?: IntNullableFilter<"EmailLog"> | number | null
    status?: StringFilter<"EmailLog"> | string
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    error?: StringNullableFilter<"EmailLog"> | string | null
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }

  export type EmailLogOrderByWithRelationInput = {
    id?: SortOrder
    to?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    employerId?: SortOrderInput | SortOrder
    applicantId?: SortOrderInput | SortOrder
    status?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    application?: ApplicationOrderByWithRelationInput
    _relevance?: EmailLogOrderByRelevanceInput
  }

  export type EmailLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EmailLogWhereInput | EmailLogWhereInput[]
    OR?: EmailLogWhereInput[]
    NOT?: EmailLogWhereInput | EmailLogWhereInput[]
    to?: StringFilter<"EmailLog"> | string
    subject?: StringFilter<"EmailLog"> | string
    message?: StringFilter<"EmailLog"> | string
    applicationId?: IntNullableFilter<"EmailLog"> | number | null
    employerId?: IntNullableFilter<"EmailLog"> | number | null
    applicantId?: IntNullableFilter<"EmailLog"> | number | null
    status?: StringFilter<"EmailLog"> | string
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    error?: StringNullableFilter<"EmailLog"> | string | null
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
    application?: XOR<ApplicationNullableScalarRelationFilter, ApplicationWhereInput> | null
  }, "id">

  export type EmailLogOrderByWithAggregationInput = {
    id?: SortOrder
    to?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    applicationId?: SortOrderInput | SortOrder
    employerId?: SortOrderInput | SortOrder
    applicantId?: SortOrderInput | SortOrder
    status?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    error?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: EmailLogCountOrderByAggregateInput
    _avg?: EmailLogAvgOrderByAggregateInput
    _max?: EmailLogMaxOrderByAggregateInput
    _min?: EmailLogMinOrderByAggregateInput
    _sum?: EmailLogSumOrderByAggregateInput
  }

  export type EmailLogScalarWhereWithAggregatesInput = {
    AND?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    OR?: EmailLogScalarWhereWithAggregatesInput[]
    NOT?: EmailLogScalarWhereWithAggregatesInput | EmailLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"EmailLog"> | number
    to?: StringWithAggregatesFilter<"EmailLog"> | string
    subject?: StringWithAggregatesFilter<"EmailLog"> | string
    message?: StringWithAggregatesFilter<"EmailLog"> | string
    applicationId?: IntNullableWithAggregatesFilter<"EmailLog"> | number | null
    employerId?: IntNullableWithAggregatesFilter<"EmailLog"> | number | null
    applicantId?: IntNullableWithAggregatesFilter<"EmailLog"> | number | null
    status?: StringWithAggregatesFilter<"EmailLog"> | string
    sentAt?: DateTimeNullableWithAggregatesFilter<"EmailLog"> | Date | string | null
    error?: StringNullableWithAggregatesFilter<"EmailLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"EmailLog"> | Date | string
  }

  export type JobCategoryCreateInput = {
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applicants?: ApplicantCreateNestedManyWithoutCategoriesInput
    jobs?: JobCreateNestedManyWithoutCategoriesInput
  }

  export type JobCategoryUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applicants?: ApplicantUncheckedCreateNestedManyWithoutCategoriesInput
    jobs?: JobUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type JobCategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicants?: ApplicantUpdateManyWithoutCategoriesNestedInput
    jobs?: JobUpdateManyWithoutCategoriesNestedInput
  }

  export type JobCategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicants?: ApplicantUncheckedUpdateManyWithoutCategoriesNestedInput
    jobs?: JobUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type JobCategoryCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobCategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMasterCreateInput = {
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobRequirements?: JobRequirementCreateNestedManyWithoutSkillMasterInput
    applicantSkills?: ApplicantSkillCreateNestedManyWithoutSkillMasterInput
    skillDemands?: SkillDemandCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterUncheckedCreateInput = {
    id?: number
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobRequirements?: JobRequirementUncheckedCreateNestedManyWithoutSkillMasterInput
    applicantSkills?: ApplicantSkillUncheckedCreateNestedManyWithoutSkillMasterInput
    skillDemands?: SkillDemandUncheckedCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobRequirements?: JobRequirementUpdateManyWithoutSkillMasterNestedInput
    applicantSkills?: ApplicantSkillUpdateManyWithoutSkillMasterNestedInput
    skillDemands?: SkillDemandUpdateManyWithoutSkillMasterNestedInput
  }

  export type SkillMasterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobRequirements?: JobRequirementUncheckedUpdateManyWithoutSkillMasterNestedInput
    applicantSkills?: ApplicantSkillUncheckedUpdateManyWithoutSkillMasterNestedInput
    skillDemands?: SkillDemandUncheckedUpdateManyWithoutSkillMasterNestedInput
  }

  export type SkillMasterCreateManyInput = {
    id?: number
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillMasterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillMasterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryCreateInput = {
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    qualifications?: AcademicQualificationCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: number
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualifications?: AcademicQualificationUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: number
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CountryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    employer?: EmployerCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantUncheckedCreateNestedOneWithoutUserInput
    employer?: EmployerUncheckedCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomUncheckedCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    employer?: EmployerUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUncheckedUpdateOneWithoutUserNestedInput
    employer?: EmployerUncheckedUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUncheckedUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantCreateInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUpdateInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantCreateManyInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicantUpdateManyMutationInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployerCreateInput = {
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEmployerInput
    jobs?: JobCreateNestedManyWithoutEmployerInput
    notifications?: NotificationCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUncheckedCreateInput = {
    id?: number
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    userId: number
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutEmployerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUpdateInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmployerNestedInput
    jobs?: JobUpdateManyWithoutEmployerNestedInput
    notifications?: NotificationUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutEmployerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerCreateManyInput = {
    id?: number
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    userId: number
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmployerUpdateManyMutationInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmployerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateInput = {
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    categories?: JobCategoryCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    employerId: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    employerId?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    employerId: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    employerId?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobRequirementCreateInput = {
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutRequirementsInput
    skillMaster: SkillMasterCreateNestedOneWithoutJobRequirementsInput
  }

  export type JobRequirementUncheckedCreateInput = {
    id?: number
    jobId: number
    skillMasterId: number
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobRequirementUpdateInput = {
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutRequirementsNestedInput
    skillMaster?: SkillMasterUpdateOneRequiredWithoutJobRequirementsNestedInput
  }

  export type JobRequirementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobRequirementCreateManyInput = {
    id?: number
    jobId: number
    skillMasterId: number
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobRequirementUpdateManyMutationInput = {
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobRequirementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantSkillCreateInput = {
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutSkillsInput
    skillMaster: SkillMasterCreateNestedOneWithoutApplicantSkillsInput
  }

  export type ApplicantSkillUncheckedCreateInput = {
    id?: number
    applicantId: number
    skillMasterId: number
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicantSkillUpdateInput = {
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutSkillsNestedInput
    skillMaster?: SkillMasterUpdateOneRequiredWithoutApplicantSkillsNestedInput
  }

  export type ApplicantSkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantSkillCreateManyInput = {
    id?: number
    applicantId: number
    skillMasterId: number
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicantSkillUpdateManyMutationInput = {
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantSkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateInput = {
    status?: $Enums.ApplicationStatus
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutApplicationsInput
    applicant: ApplicantCreateNestedOneWithoutApplicationsInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    jobId: number
    applicantId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUpdateInput = {
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    applicant?: ApplicantUpdateOneRequiredWithoutApplicationsNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    jobId?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationCreateManyInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    jobId: number
    applicantId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationUpdateManyMutationInput = {
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    jobId?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicant?: ApplicantCreateNestedOneWithoutNotificationsInput
    employer?: EmployerCreateNestedOneWithoutNotificationsInput
    application?: ApplicationCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicantId?: number | null
    employerId?: number | null
    applicationId?: number | null
  }

  export type NotificationUpdateInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicant?: ApplicantUpdateOneWithoutNotificationsNestedInput
    employer?: EmployerUpdateOneWithoutNotificationsNestedInput
    application?: ApplicationUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationCreateManyInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicantId?: number | null
    employerId?: number | null
    applicationId?: number | null
  }

  export type NotificationUpdateManyMutationInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AcademicQualificationCreateInput = {
    level: string
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutQualificationsInput
    country: CountryCreateNestedOneWithoutQualificationsInput
  }

  export type AcademicQualificationUncheckedCreateInput = {
    id?: number
    level: string
    countryId: number
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicQualificationUpdateInput = {
    level?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutQualificationsNestedInput
    country?: CountryUpdateOneRequiredWithoutQualificationsNestedInput
  }

  export type AcademicQualificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicQualificationCreateManyInput = {
    id?: number
    level: string
    countryId: number
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicQualificationUpdateManyMutationInput = {
    level?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicQualificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkExperienceCreateInput = {
    companyName: string
    jobTitle: string
    industry?: string | null
    location?: string | null
    employmentType?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCurrent?: boolean
    responsibilities?: string | null
    achievements?: string | null
    supervisorName?: string | null
    supervisorContact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutExperiencesInput
  }

  export type WorkExperienceUncheckedCreateInput = {
    id?: number
    companyName: string
    jobTitle: string
    industry?: string | null
    location?: string | null
    employmentType?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCurrent?: boolean
    responsibilities?: string | null
    achievements?: string | null
    supervisorName?: string | null
    supervisorContact?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkExperienceUpdateInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorName?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutExperiencesNestedInput
  }

  export type WorkExperienceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorName?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorContact?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkExperienceCreateManyInput = {
    id?: number
    companyName: string
    jobTitle: string
    industry?: string | null
    location?: string | null
    employmentType?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCurrent?: boolean
    responsibilities?: string | null
    achievements?: string | null
    supervisorName?: string | null
    supervisorContact?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkExperienceUpdateManyMutationInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorName?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkExperienceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorName?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorContact?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageProficiencyCreateInput = {
    language: string
    speakLevel: string
    readLevel: string
    writeLevel: string
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutLanguagesInput
  }

  export type LanguageProficiencyUncheckedCreateInput = {
    id?: number
    language: string
    speakLevel: string
    readLevel: string
    writeLevel: string
    isCertified?: boolean
    certificationName?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageProficiencyUpdateInput = {
    language?: StringFieldUpdateOperationsInput | string
    speakLevel?: StringFieldUpdateOperationsInput | string
    readLevel?: StringFieldUpdateOperationsInput | string
    writeLevel?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutLanguagesNestedInput
  }

  export type LanguageProficiencyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    speakLevel?: StringFieldUpdateOperationsInput | string
    readLevel?: StringFieldUpdateOperationsInput | string
    writeLevel?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageProficiencyCreateManyInput = {
    id?: number
    language: string
    speakLevel: string
    readLevel: string
    writeLevel: string
    isCertified?: boolean
    certificationName?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageProficiencyUpdateManyMutationInput = {
    language?: StringFieldUpdateOperationsInput | string
    speakLevel?: StringFieldUpdateOperationsInput | string
    readLevel?: StringFieldUpdateOperationsInput | string
    writeLevel?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageProficiencyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    speakLevel?: StringFieldUpdateOperationsInput | string
    readLevel?: StringFieldUpdateOperationsInput | string
    writeLevel?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComputerSkillCreateInput = {
    skill: string
    proficiency: string
    createdAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutComputerSkillsInput
  }

  export type ComputerSkillUncheckedCreateInput = {
    id?: number
    skill: string
    proficiency: string
    applicantId: number
    createdAt?: Date | string
  }

  export type ComputerSkillUpdateInput = {
    skill?: StringFieldUpdateOperationsInput | string
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutComputerSkillsNestedInput
  }

  export type ComputerSkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    proficiency?: StringFieldUpdateOperationsInput | string
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComputerSkillCreateManyInput = {
    id?: number
    skill: string
    proficiency: string
    applicantId: number
    createdAt?: Date | string
  }

  export type ComputerSkillUpdateManyMutationInput = {
    skill?: StringFieldUpdateOperationsInput | string
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComputerSkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    proficiency?: StringFieldUpdateOperationsInput | string
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSkillCreateInput = {
    skill: string
    description?: string | null
    proficiency: string
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutGeneralSkillsInput
  }

  export type GeneralSkillUncheckedCreateInput = {
    id?: number
    skill: string
    description?: string | null
    proficiency: string
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSkillUpdateInput = {
    skill?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutGeneralSkillsNestedInput
  }

  export type GeneralSkillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proficiency?: StringFieldUpdateOperationsInput | string
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSkillCreateManyInput = {
    id?: number
    skill: string
    description?: string | null
    proficiency: string
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSkillUpdateManyMutationInput = {
    skill?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSkillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proficiency?: StringFieldUpdateOperationsInput | string
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillDemandCreateInput = {
    demandScore: number
    growth: number
    industry?: string | null
    region?: string | null
    period: Date | string
    source?: string | null
    createdAt?: Date | string
    skillMaster: SkillMasterCreateNestedOneWithoutSkillDemandsInput
  }

  export type SkillDemandUncheckedCreateInput = {
    id?: number
    skillMasterId: number
    demandScore: number
    growth: number
    industry?: string | null
    region?: string | null
    period: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type SkillDemandUpdateInput = {
    demandScore?: FloatFieldUpdateOperationsInput | number
    growth?: FloatFieldUpdateOperationsInput | number
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillMaster?: SkillMasterUpdateOneRequiredWithoutSkillDemandsNestedInput
  }

  export type SkillDemandUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    demandScore?: FloatFieldUpdateOperationsInput | number
    growth?: FloatFieldUpdateOperationsInput | number
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillDemandCreateManyInput = {
    id?: number
    skillMasterId: number
    demandScore: number
    growth: number
    industry?: string | null
    region?: string | null
    period: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type SkillDemandUpdateManyMutationInput = {
    demandScore?: FloatFieldUpdateOperationsInput | number
    growth?: FloatFieldUpdateOperationsInput | number
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillDemandUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    demandScore?: FloatFieldUpdateOperationsInput | number
    growth?: FloatFieldUpdateOperationsInput | number
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomCreateInput = {
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    user: UserCreateNestedOneWithoutChatRoomsInput
    agent?: UserCreateNestedOneWithoutAgentChatsInput
    messages?: ChatMessageCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUncheckedCreateInput = {
    id?: number
    userId: number
    agentId?: number | null
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    messages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUpdateInput = {
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChatRoomsNestedInput
    agent?: UserUpdateOneWithoutAgentChatsNestedInput
    messages?: ChatMessageUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: NullableIntFieldUpdateOperationsInput | number | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomCreateManyInput = {
    id?: number
    userId: number
    agentId?: number | null
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
  }

  export type ChatRoomUpdateManyMutationInput = {
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChatRoomUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: NullableIntFieldUpdateOperationsInput | number | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChatMessageCreateInput = {
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
    room: ChatRoomCreateNestedOneWithoutMessagesInput
    sender?: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateInput = {
    id?: number
    roomId: number
    senderId?: number | null
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
  }

  export type ChatMessageUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
    sender?: UserUpdateOneWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    senderId?: NullableIntFieldUpdateOperationsInput | number | null
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyInput = {
    id?: number
    roomId: number
    senderId?: number | null
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
  }

  export type ChatMessageUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    senderId?: NullableIntFieldUpdateOperationsInput | number | null
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsCreateInput = {
    emailEnabled?: boolean
    emailJobMatches?: boolean
    emailApplicationStatus?: boolean
    emailInterviews?: boolean
    emailMarketing?: boolean
    smsEnabled?: boolean
    smsApplicationStatus?: boolean
    smsInterviews?: boolean
    smsUrgent?: boolean
    pushEnabled?: boolean
    pushJobMatches?: boolean
    pushApplicationStatus?: boolean
    pushInterviews?: boolean
    profileVisible?: boolean
    autoApply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutNotificationSettingsInput
  }

  export type NotificationSettingsUncheckedCreateInput = {
    id?: number
    applicantId: number
    emailEnabled?: boolean
    emailJobMatches?: boolean
    emailApplicationStatus?: boolean
    emailInterviews?: boolean
    emailMarketing?: boolean
    smsEnabled?: boolean
    smsApplicationStatus?: boolean
    smsInterviews?: boolean
    smsUrgent?: boolean
    pushEnabled?: boolean
    pushJobMatches?: boolean
    pushApplicationStatus?: boolean
    pushInterviews?: boolean
    profileVisible?: boolean
    autoApply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsUpdateInput = {
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailJobMatches?: BoolFieldUpdateOperationsInput | boolean
    emailApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    emailInterviews?: BoolFieldUpdateOperationsInput | boolean
    emailMarketing?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    smsInterviews?: BoolFieldUpdateOperationsInput | boolean
    smsUrgent?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushJobMatches?: BoolFieldUpdateOperationsInput | boolean
    pushApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    pushInterviews?: BoolFieldUpdateOperationsInput | boolean
    profileVisible?: BoolFieldUpdateOperationsInput | boolean
    autoApply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutNotificationSettingsNestedInput
  }

  export type NotificationSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailJobMatches?: BoolFieldUpdateOperationsInput | boolean
    emailApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    emailInterviews?: BoolFieldUpdateOperationsInput | boolean
    emailMarketing?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    smsInterviews?: BoolFieldUpdateOperationsInput | boolean
    smsUrgent?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushJobMatches?: BoolFieldUpdateOperationsInput | boolean
    pushApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    pushInterviews?: BoolFieldUpdateOperationsInput | boolean
    profileVisible?: BoolFieldUpdateOperationsInput | boolean
    autoApply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsCreateManyInput = {
    id?: number
    applicantId: number
    emailEnabled?: boolean
    emailJobMatches?: boolean
    emailApplicationStatus?: boolean
    emailInterviews?: boolean
    emailMarketing?: boolean
    smsEnabled?: boolean
    smsApplicationStatus?: boolean
    smsInterviews?: boolean
    smsUrgent?: boolean
    pushEnabled?: boolean
    pushJobMatches?: boolean
    pushApplicationStatus?: boolean
    pushInterviews?: boolean
    profileVisible?: boolean
    autoApply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsUpdateManyMutationInput = {
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailJobMatches?: BoolFieldUpdateOperationsInput | boolean
    emailApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    emailInterviews?: BoolFieldUpdateOperationsInput | boolean
    emailMarketing?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    smsInterviews?: BoolFieldUpdateOperationsInput | boolean
    smsUrgent?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushJobMatches?: BoolFieldUpdateOperationsInput | boolean
    pushApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    pushInterviews?: BoolFieldUpdateOperationsInput | boolean
    profileVisible?: BoolFieldUpdateOperationsInput | boolean
    autoApply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailJobMatches?: BoolFieldUpdateOperationsInput | boolean
    emailApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    emailInterviews?: BoolFieldUpdateOperationsInput | boolean
    emailMarketing?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    smsInterviews?: BoolFieldUpdateOperationsInput | boolean
    smsUrgent?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushJobMatches?: BoolFieldUpdateOperationsInput | boolean
    pushApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    pushInterviews?: BoolFieldUpdateOperationsInput | boolean
    profileVisible?: BoolFieldUpdateOperationsInput | boolean
    autoApply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketTrendCreateInput = {
    industry: string
    metric: string
    value: number
    period: string
    date: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type MarketTrendUncheckedCreateInput = {
    id?: number
    industry: string
    metric: string
    value: number
    period: string
    date: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type MarketTrendUpdateInput = {
    industry?: StringFieldUpdateOperationsInput | string
    metric?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    period?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketTrendUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    industry?: StringFieldUpdateOperationsInput | string
    metric?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    period?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketTrendCreateManyInput = {
    id?: number
    industry: string
    metric: string
    value: number
    period: string
    date: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type MarketTrendUpdateManyMutationInput = {
    industry?: StringFieldUpdateOperationsInput | string
    metric?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    period?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketTrendUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    industry?: StringFieldUpdateOperationsInput | string
    metric?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    period?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentCreateInput = {
    consentType: string
    granted: boolean
    grantedAt?: Date | string | null
    revokedAt?: Date | string | null
    purpose?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutConsentsInput
  }

  export type UserConsentUncheckedCreateInput = {
    id?: number
    userId: number
    consentType: string
    granted: boolean
    grantedAt?: Date | string | null
    revokedAt?: Date | string | null
    purpose?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserConsentUpdateInput = {
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    grantedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutConsentsNestedInput
  }

  export type UserConsentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    grantedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentCreateManyInput = {
    id?: number
    userId: number
    consentType: string
    granted: boolean
    grantedAt?: Date | string | null
    revokedAt?: Date | string | null
    purpose?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserConsentUpdateManyMutationInput = {
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    grantedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    grantedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    action: string
    details?: string | null
    timestamp?: Date | string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: number
    userId?: number | null
    action: string
    details?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: number
    userId?: number | null
    action: string
    details?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymizedDataCreateInput = {
    anonymousId: string
    originalUserId?: number | null
    anonymizedData: string
    createdAt?: Date | string
  }

  export type AnonymizedDataUncheckedCreateInput = {
    id?: number
    anonymousId: string
    originalUserId?: number | null
    anonymizedData: string
    createdAt?: Date | string
  }

  export type AnonymizedDataUpdateInput = {
    anonymousId?: StringFieldUpdateOperationsInput | string
    originalUserId?: NullableIntFieldUpdateOperationsInput | number | null
    anonymizedData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymizedDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    anonymousId?: StringFieldUpdateOperationsInput | string
    originalUserId?: NullableIntFieldUpdateOperationsInput | number | null
    anonymizedData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymizedDataCreateManyInput = {
    id?: number
    anonymousId: string
    originalUserId?: number | null
    anonymizedData: string
    createdAt?: Date | string
  }

  export type AnonymizedDataUpdateManyMutationInput = {
    anonymousId?: StringFieldUpdateOperationsInput | string
    originalUserId?: NullableIntFieldUpdateOperationsInput | number | null
    anonymizedData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnonymizedDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    anonymousId?: StringFieldUpdateOperationsInput | string
    originalUserId?: NullableIntFieldUpdateOperationsInput | number | null
    anonymizedData?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewCreateInput = {
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutInterviewsInput
    job?: JobCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateInput = {
    id?: number
    applicationId: number
    jobId?: number | null
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewUpdateInput = {
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutInterviewsNestedInput
    job?: JobUpdateOneWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    jobId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewCreateManyInput = {
    id?: number
    applicationId: number
    jobId?: number | null
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewUpdateManyMutationInput = {
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    jobId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateInput = {
    to: string
    subject: string
    message: string
    employerId?: number | null
    applicantId?: number | null
    status?: string
    sentAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
    application?: ApplicationCreateNestedOneWithoutEmailLogsInput
  }

  export type EmailLogUncheckedCreateInput = {
    id?: number
    to: string
    subject: string
    message: string
    applicationId?: number | null
    employerId?: number | null
    applicantId?: number | null
    status?: string
    sentAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type EmailLogUpdateInput = {
    to?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneWithoutEmailLogsNestedInput
  }

  export type EmailLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    to?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogCreateManyInput = {
    id?: number
    to: string
    subject: string
    message: string
    applicationId?: number | null
    employerId?: number | null
    applicantId?: number | null
    status?: string
    sentAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type EmailLogUpdateManyMutationInput = {
    to?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    to?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ApplicantListRelationFilter = {
    every?: ApplicantWhereInput
    some?: ApplicantWhereInput
    none?: ApplicantWhereInput
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ApplicantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCategoryOrderByRelevanceInput = {
    fields: JobCategoryOrderByRelevanceFieldEnum | JobCategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type JobCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobCategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JobCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobCategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type JobRequirementListRelationFilter = {
    every?: JobRequirementWhereInput
    some?: JobRequirementWhereInput
    none?: JobRequirementWhereInput
  }

  export type ApplicantSkillListRelationFilter = {
    every?: ApplicantSkillWhereInput
    some?: ApplicantSkillWhereInput
    none?: ApplicantSkillWhereInput
  }

  export type SkillDemandListRelationFilter = {
    every?: SkillDemandWhereInput
    some?: SkillDemandWhereInput
    none?: SkillDemandWhereInput
  }

  export type JobRequirementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicantSkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillDemandOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SkillMasterOrderByRelevanceInput = {
    fields: SkillMasterOrderByRelevanceFieldEnum | SkillMasterOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SkillMasterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMasterAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SkillMasterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMasterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    category?: SortOrder
    description?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SkillMasterSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AcademicQualificationListRelationFilter = {
    every?: AcademicQualificationWhereInput
    some?: AcademicQualificationWhereInput
    none?: AcademicQualificationWhereInput
  }

  export type AcademicQualificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryOrderByRelevanceInput = {
    fields: CountryOrderByRelevanceFieldEnum | CountryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CountryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
  }

  export type CountrySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ApplicantNullableScalarRelationFilter = {
    is?: ApplicantWhereInput | null
    isNot?: ApplicantWhereInput | null
  }

  export type EmployerNullableScalarRelationFilter = {
    is?: EmployerWhereInput | null
    isNot?: EmployerWhereInput | null
  }

  export type ChatRoomListRelationFilter = {
    every?: ChatRoomWhereInput
    some?: ChatRoomWhereInput
    none?: ChatRoomWhereInput
  }

  export type ChatMessageListRelationFilter = {
    every?: ChatMessageWhereInput
    some?: ChatMessageWhereInput
    none?: ChatMessageWhereInput
  }

  export type UserConsentListRelationFilter = {
    every?: UserConsentWhereInput
    some?: UserConsentWhereInput
    none?: UserConsentWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type ChatRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChatMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserConsentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    lastLogin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ApplicationListRelationFilter = {
    every?: ApplicationWhereInput
    some?: ApplicationWhereInput
    none?: ApplicationWhereInput
  }

  export type WorkExperienceListRelationFilter = {
    every?: WorkExperienceWhereInput
    some?: WorkExperienceWhereInput
    none?: WorkExperienceWhereInput
  }

  export type LanguageProficiencyListRelationFilter = {
    every?: LanguageProficiencyWhereInput
    some?: LanguageProficiencyWhereInput
    none?: LanguageProficiencyWhereInput
  }

  export type ComputerSkillListRelationFilter = {
    every?: ComputerSkillWhereInput
    some?: ComputerSkillWhereInput
    none?: ComputerSkillWhereInput
  }

  export type GeneralSkillListRelationFilter = {
    every?: GeneralSkillWhereInput
    some?: GeneralSkillWhereInput
    none?: GeneralSkillWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type JobCategoryListRelationFilter = {
    every?: JobCategoryWhereInput
    some?: JobCategoryWhereInput
    none?: JobCategoryWhereInput
  }

  export type NotificationSettingsNullableScalarRelationFilter = {
    is?: NotificationSettingsWhereInput | null
    isNot?: NotificationSettingsWhereInput | null
  }

  export type ApplicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkExperienceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LanguageProficiencyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComputerSkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GeneralSkillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicantOrderByRelevanceInput = {
    fields: ApplicantOrderByRelevanceFieldEnum | ApplicantOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ApplicantCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    nida?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    userId?: SortOrder
    profileCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ApplicantMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    nida?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    userId?: SortOrder
    profileCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    nida?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    dateOfBirth?: SortOrder
    gender?: SortOrder
    userId?: SortOrder
    profileCompleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EmployerOrderByRelevanceInput = {
    fields: EmployerOrderByRelevanceFieldEnum | EmployerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmployerCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    website?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployerAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EmployerMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    website?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployerMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    industry?: SortOrder
    companySize?: SortOrder
    website?: SortOrder
    address?: SortOrder
    phone?: SortOrder
    description?: SortOrder
    userId?: SortOrder
    isVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmployerSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[]
    notIn?: $Enums.JobStatus[]
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type EmployerScalarRelationFilter = {
    is?: EmployerWhereInput
    isNot?: EmployerWhereInput
  }

  export type InterviewListRelationFilter = {
    every?: InterviewWhereInput
    some?: InterviewWhereInput
    none?: InterviewWhereInput
  }

  export type InterviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobOrderByRelevanceInput = {
    fields: JobOrderByRelevanceFieldEnum | JobOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    status?: SortOrder
    applicationCount?: SortOrder
    viewCount?: SortOrder
    employerId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    applicationCount?: SortOrder
    viewCount?: SortOrder
    employerId?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    status?: SortOrder
    applicationCount?: SortOrder
    viewCount?: SortOrder
    employerId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    location?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    currency?: SortOrder
    employmentType?: SortOrder
    experienceLevel?: SortOrder
    status?: SortOrder
    applicationCount?: SortOrder
    viewCount?: SortOrder
    employerId?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
    salaryMin?: SortOrder
    salaryMax?: SortOrder
    applicationCount?: SortOrder
    viewCount?: SortOrder
    employerId?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[]
    notIn?: $Enums.JobStatus[]
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type EnumImportanceLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportanceLevel | EnumImportanceLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImportanceLevel[]
    notIn?: $Enums.ImportanceLevel[]
    not?: NestedEnumImportanceLevelFilter<$PrismaModel> | $Enums.ImportanceLevel
  }

  export type EnumProficiencyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ProficiencyLevel | EnumProficiencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProficiencyLevel[]
    notIn?: $Enums.ProficiencyLevel[]
    not?: NestedEnumProficiencyLevelFilter<$PrismaModel> | $Enums.ProficiencyLevel
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type JobScalarRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type SkillMasterScalarRelationFilter = {
    is?: SkillMasterWhereInput
    isNot?: SkillMasterWhereInput
  }

  export type JobRequirementOrderByRelevanceInput = {
    fields: JobRequirementOrderByRelevanceFieldEnum | JobRequirementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type JobRequirementJobIdSkillMasterIdCompoundUniqueInput = {
    jobId: number
    skillMasterId: number
  }

  export type JobRequirementCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    skillMasterId?: SortOrder
    importance?: SortOrder
    proficiencyLevel?: SortOrder
    yearsRequired?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobRequirementAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    skillMasterId?: SortOrder
    yearsRequired?: SortOrder
  }

  export type JobRequirementMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    skillMasterId?: SortOrder
    importance?: SortOrder
    proficiencyLevel?: SortOrder
    yearsRequired?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobRequirementMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    skillMasterId?: SortOrder
    importance?: SortOrder
    proficiencyLevel?: SortOrder
    yearsRequired?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobRequirementSumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    skillMasterId?: SortOrder
    yearsRequired?: SortOrder
  }

  export type EnumImportanceLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportanceLevel | EnumImportanceLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImportanceLevel[]
    notIn?: $Enums.ImportanceLevel[]
    not?: NestedEnumImportanceLevelWithAggregatesFilter<$PrismaModel> | $Enums.ImportanceLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImportanceLevelFilter<$PrismaModel>
    _max?: NestedEnumImportanceLevelFilter<$PrismaModel>
  }

  export type EnumProficiencyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProficiencyLevel | EnumProficiencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProficiencyLevel[]
    notIn?: $Enums.ProficiencyLevel[]
    not?: NestedEnumProficiencyLevelWithAggregatesFilter<$PrismaModel> | $Enums.ProficiencyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProficiencyLevelFilter<$PrismaModel>
    _max?: NestedEnumProficiencyLevelFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ApplicantScalarRelationFilter = {
    is?: ApplicantWhereInput
    isNot?: ApplicantWhereInput
  }

  export type ApplicantSkillOrderByRelevanceInput = {
    fields: ApplicantSkillOrderByRelevanceFieldEnum | ApplicantSkillOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ApplicantSkillApplicantIdSkillMasterIdCompoundUniqueInput = {
    applicantId: number
    skillMasterId: number
  }

  export type ApplicantSkillCountOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    skillMasterId?: SortOrder
    proficiency?: SortOrder
    yearsExperience?: SortOrder
    lastUsed?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantSkillAvgOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    skillMasterId?: SortOrder
    yearsExperience?: SortOrder
  }

  export type ApplicantSkillMaxOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    skillMasterId?: SortOrder
    proficiency?: SortOrder
    yearsExperience?: SortOrder
    lastUsed?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantSkillMinOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    skillMasterId?: SortOrder
    proficiency?: SortOrder
    yearsExperience?: SortOrder
    lastUsed?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicantSkillSumOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    skillMasterId?: SortOrder
    yearsExperience?: SortOrder
  }

  export type EnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[]
    notIn?: $Enums.ApplicationStatus[]
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type EmailLogListRelationFilter = {
    every?: EmailLogWhereInput
    some?: EmailLogWhereInput
    none?: EmailLogWhereInput
  }

  export type EmailLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApplicationOrderByRelevanceInput = {
    fields: ApplicationOrderByRelevanceFieldEnum | ApplicationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ApplicationApplicantIdJobIdCompoundUniqueInput = {
    applicantId: number
    jobId: number
  }

  export type ApplicationCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    coverLetter?: SortOrder
    appliedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationAvgOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    reviewedBy?: SortOrder
  }

  export type ApplicationMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    coverLetter?: SortOrder
    appliedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    coverLetter?: SortOrder
    appliedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    rejectionReason?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApplicationSumOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    applicantId?: SortOrder
    reviewedBy?: SortOrder
  }

  export type EnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[]
    notIn?: $Enums.ApplicationStatus[]
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type ApplicationNullableScalarRelationFilter = {
    is?: ApplicationWhereInput | null
    isNot?: ApplicationWhereInput | null
  }

  export type NotificationOrderByRelevanceInput = {
    fields: NotificationOrderByRelevanceFieldEnum | NotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    expiresAt?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
    applicationId?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
    applicationId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    expiresAt?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
    applicationId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    readAt?: SortOrder
    expiresAt?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
    applicationId?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    employerId?: SortOrder
    applicationId?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type CountryScalarRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type AcademicQualificationOrderByRelevanceInput = {
    fields: AcademicQualificationOrderByRelevanceFieldEnum | AcademicQualificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AcademicQualificationCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    countryId?: SortOrder
    institution?: SortOrder
    fieldOfStudy?: SortOrder
    grade?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCompleted?: SortOrder
    certificateUrl?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicQualificationAvgOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
    applicantId?: SortOrder
  }

  export type AcademicQualificationMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    countryId?: SortOrder
    institution?: SortOrder
    fieldOfStudy?: SortOrder
    grade?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCompleted?: SortOrder
    certificateUrl?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicQualificationMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    countryId?: SortOrder
    institution?: SortOrder
    fieldOfStudy?: SortOrder
    grade?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCompleted?: SortOrder
    certificateUrl?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AcademicQualificationSumOrderByAggregateInput = {
    id?: SortOrder
    countryId?: SortOrder
    applicantId?: SortOrder
  }

  export type WorkExperienceOrderByRelevanceInput = {
    fields: WorkExperienceOrderByRelevanceFieldEnum | WorkExperienceOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type WorkExperienceCountOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    jobTitle?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    responsibilities?: SortOrder
    achievements?: SortOrder
    supervisorName?: SortOrder
    supervisorContact?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkExperienceAvgOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type WorkExperienceMaxOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    jobTitle?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    responsibilities?: SortOrder
    achievements?: SortOrder
    supervisorName?: SortOrder
    supervisorContact?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkExperienceMinOrderByAggregateInput = {
    id?: SortOrder
    companyName?: SortOrder
    jobTitle?: SortOrder
    industry?: SortOrder
    location?: SortOrder
    employmentType?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    isCurrent?: SortOrder
    responsibilities?: SortOrder
    achievements?: SortOrder
    supervisorName?: SortOrder
    supervisorContact?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WorkExperienceSumOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type LanguageProficiencyOrderByRelevanceInput = {
    fields: LanguageProficiencyOrderByRelevanceFieldEnum | LanguageProficiencyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type LanguageProficiencyCountOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    speakLevel?: SortOrder
    readLevel?: SortOrder
    writeLevel?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageProficiencyAvgOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type LanguageProficiencyMaxOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    speakLevel?: SortOrder
    readLevel?: SortOrder
    writeLevel?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageProficiencyMinOrderByAggregateInput = {
    id?: SortOrder
    language?: SortOrder
    speakLevel?: SortOrder
    readLevel?: SortOrder
    writeLevel?: SortOrder
    isCertified?: SortOrder
    certificationName?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LanguageProficiencySumOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type ComputerSkillOrderByRelevanceInput = {
    fields: ComputerSkillOrderByRelevanceFieldEnum | ComputerSkillOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ComputerSkillCountOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
  }

  export type ComputerSkillAvgOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type ComputerSkillMaxOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
  }

  export type ComputerSkillMinOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
  }

  export type ComputerSkillSumOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type GeneralSkillOrderByRelevanceInput = {
    fields: GeneralSkillOrderByRelevanceFieldEnum | GeneralSkillOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GeneralSkillCountOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    description?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralSkillAvgOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type GeneralSkillMaxOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    description?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralSkillMinOrderByAggregateInput = {
    id?: SortOrder
    skill?: SortOrder
    description?: SortOrder
    proficiency?: SortOrder
    applicantId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GeneralSkillSumOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SkillDemandOrderByRelevanceInput = {
    fields: SkillDemandOrderByRelevanceFieldEnum | SkillDemandOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SkillDemandCountOrderByAggregateInput = {
    id?: SortOrder
    skillMasterId?: SortOrder
    demandScore?: SortOrder
    growth?: SortOrder
    industry?: SortOrder
    region?: SortOrder
    period?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillDemandAvgOrderByAggregateInput = {
    id?: SortOrder
    skillMasterId?: SortOrder
    demandScore?: SortOrder
    growth?: SortOrder
  }

  export type SkillDemandMaxOrderByAggregateInput = {
    id?: SortOrder
    skillMasterId?: SortOrder
    demandScore?: SortOrder
    growth?: SortOrder
    industry?: SortOrder
    region?: SortOrder
    period?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillDemandMinOrderByAggregateInput = {
    id?: SortOrder
    skillMasterId?: SortOrder
    demandScore?: SortOrder
    growth?: SortOrder
    industry?: SortOrder
    region?: SortOrder
    period?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type SkillDemandSumOrderByAggregateInput = {
    id?: SortOrder
    skillMasterId?: SortOrder
    demandScore?: SortOrder
    growth?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ChatRoomOrderByRelevanceInput = {
    fields: ChatRoomOrderByRelevanceFieldEnum | ChatRoomOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChatRoomCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    topic?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrder
  }

  export type ChatRoomAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
  }

  export type ChatRoomMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    topic?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrder
  }

  export type ChatRoomMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
    topic?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    endedAt?: SortOrder
  }

  export type ChatRoomSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    agentId?: SortOrder
  }

  export type ChatRoomScalarRelationFilter = {
    is?: ChatRoomWhereInput
    isNot?: ChatRoomWhereInput
  }

  export type ChatMessageOrderByRelevanceInput = {
    fields: ChatMessageOrderByRelevanceFieldEnum | ChatMessageOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ChatMessageCountOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    timestamp?: SortOrder
  }

  export type ChatMessageAvgOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
  }

  export type ChatMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    timestamp?: SortOrder
  }

  export type ChatMessageMinOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    type?: SortOrder
    isRead?: SortOrder
    readAt?: SortOrder
    timestamp?: SortOrder
  }

  export type ChatMessageSumOrderByAggregateInput = {
    id?: SortOrder
    roomId?: SortOrder
    senderId?: SortOrder
  }

  export type NotificationSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    emailEnabled?: SortOrder
    emailJobMatches?: SortOrder
    emailApplicationStatus?: SortOrder
    emailInterviews?: SortOrder
    emailMarketing?: SortOrder
    smsEnabled?: SortOrder
    smsApplicationStatus?: SortOrder
    smsInterviews?: SortOrder
    smsUrgent?: SortOrder
    pushEnabled?: SortOrder
    pushJobMatches?: SortOrder
    pushApplicationStatus?: SortOrder
    pushInterviews?: SortOrder
    profileVisible?: SortOrder
    autoApply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type NotificationSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    emailEnabled?: SortOrder
    emailJobMatches?: SortOrder
    emailApplicationStatus?: SortOrder
    emailInterviews?: SortOrder
    emailMarketing?: SortOrder
    smsEnabled?: SortOrder
    smsApplicationStatus?: SortOrder
    smsInterviews?: SortOrder
    smsUrgent?: SortOrder
    pushEnabled?: SortOrder
    pushJobMatches?: SortOrder
    pushApplicationStatus?: SortOrder
    pushInterviews?: SortOrder
    profileVisible?: SortOrder
    autoApply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
    emailEnabled?: SortOrder
    emailJobMatches?: SortOrder
    emailApplicationStatus?: SortOrder
    emailInterviews?: SortOrder
    emailMarketing?: SortOrder
    smsEnabled?: SortOrder
    smsApplicationStatus?: SortOrder
    smsInterviews?: SortOrder
    smsUrgent?: SortOrder
    pushEnabled?: SortOrder
    pushJobMatches?: SortOrder
    pushApplicationStatus?: SortOrder
    pushInterviews?: SortOrder
    profileVisible?: SortOrder
    autoApply?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    applicantId?: SortOrder
  }

  export type MarketTrendOrderByRelevanceInput = {
    fields: MarketTrendOrderByRelevanceFieldEnum | MarketTrendOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MarketTrendCountOrderByAggregateInput = {
    id?: SortOrder
    industry?: SortOrder
    metric?: SortOrder
    value?: SortOrder
    period?: SortOrder
    date?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type MarketTrendAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type MarketTrendMaxOrderByAggregateInput = {
    id?: SortOrder
    industry?: SortOrder
    metric?: SortOrder
    value?: SortOrder
    period?: SortOrder
    date?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type MarketTrendMinOrderByAggregateInput = {
    id?: SortOrder
    industry?: SortOrder
    metric?: SortOrder
    value?: SortOrder
    period?: SortOrder
    date?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
  }

  export type MarketTrendSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type UserConsentOrderByRelevanceInput = {
    fields: UserConsentOrderByRelevanceFieldEnum | UserConsentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserConsentUserId_consentTypeCompoundUniqueInput = {
    userId: number
    consentType: string
  }

  export type UserConsentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrder
    purpose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserConsentAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserConsentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrder
    purpose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserConsentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    consentType?: SortOrder
    granted?: SortOrder
    grantedAt?: SortOrder
    revokedAt?: SortOrder
    purpose?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserConsentSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AuditLogOrderByRelevanceInput = {
    fields: AuditLogOrderByRelevanceFieldEnum | AuditLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AnonymizedDataOrderByRelevanceInput = {
    fields: AnonymizedDataOrderByRelevanceFieldEnum | AnonymizedDataOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AnonymizedDataCountOrderByAggregateInput = {
    id?: SortOrder
    anonymousId?: SortOrder
    originalUserId?: SortOrder
    anonymizedData?: SortOrder
    createdAt?: SortOrder
  }

  export type AnonymizedDataAvgOrderByAggregateInput = {
    id?: SortOrder
    originalUserId?: SortOrder
  }

  export type AnonymizedDataMaxOrderByAggregateInput = {
    id?: SortOrder
    anonymousId?: SortOrder
    originalUserId?: SortOrder
    anonymizedData?: SortOrder
    createdAt?: SortOrder
  }

  export type AnonymizedDataMinOrderByAggregateInput = {
    id?: SortOrder
    anonymousId?: SortOrder
    originalUserId?: SortOrder
    anonymizedData?: SortOrder
    createdAt?: SortOrder
  }

  export type AnonymizedDataSumOrderByAggregateInput = {
    id?: SortOrder
    originalUserId?: SortOrder
  }

  export type ApplicationScalarRelationFilter = {
    is?: ApplicationWhereInput
    isNot?: ApplicationWhereInput
  }

  export type JobNullableScalarRelationFilter = {
    is?: JobWhereInput | null
    isNot?: JobWhereInput | null
  }

  export type InterviewOrderByRelevanceInput = {
    fields: InterviewOrderByRelevanceFieldEnum | InterviewOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InterviewCountOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    interviewers?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InterviewAvgOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobId?: SortOrder
    duration?: SortOrder
  }

  export type InterviewMaxOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    interviewers?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InterviewMinOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobId?: SortOrder
    scheduledAt?: SortOrder
    duration?: SortOrder
    location?: SortOrder
    type?: SortOrder
    notes?: SortOrder
    interviewers?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InterviewSumOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    jobId?: SortOrder
    duration?: SortOrder
  }

  export type EmailLogOrderByRelevanceInput = {
    fields: EmailLogOrderByRelevanceFieldEnum | EmailLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EmailLogCountOrderByAggregateInput = {
    id?: SortOrder
    to?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    applicationId?: SortOrder
    employerId?: SortOrder
    applicantId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailLogAvgOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    employerId?: SortOrder
    applicantId?: SortOrder
  }

  export type EmailLogMaxOrderByAggregateInput = {
    id?: SortOrder
    to?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    applicationId?: SortOrder
    employerId?: SortOrder
    applicantId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailLogMinOrderByAggregateInput = {
    id?: SortOrder
    to?: SortOrder
    subject?: SortOrder
    message?: SortOrder
    applicationId?: SortOrder
    employerId?: SortOrder
    applicantId?: SortOrder
    status?: SortOrder
    sentAt?: SortOrder
    error?: SortOrder
    createdAt?: SortOrder
  }

  export type EmailLogSumOrderByAggregateInput = {
    id?: SortOrder
    applicationId?: SortOrder
    employerId?: SortOrder
    applicantId?: SortOrder
  }

  export type ApplicantCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ApplicantCreateWithoutCategoriesInput, ApplicantUncheckedCreateWithoutCategoriesInput> | ApplicantCreateWithoutCategoriesInput[] | ApplicantUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ApplicantCreateOrConnectWithoutCategoriesInput | ApplicantCreateOrConnectWithoutCategoriesInput[]
    connect?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<JobCreateWithoutCategoriesInput, JobUncheckedCreateWithoutCategoriesInput> | JobCreateWithoutCategoriesInput[] | JobUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCategoriesInput | JobCreateOrConnectWithoutCategoriesInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type ApplicantUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<ApplicantCreateWithoutCategoriesInput, ApplicantUncheckedCreateWithoutCategoriesInput> | ApplicantCreateWithoutCategoriesInput[] | ApplicantUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ApplicantCreateOrConnectWithoutCategoriesInput | ApplicantCreateOrConnectWithoutCategoriesInput[]
    connect?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<JobCreateWithoutCategoriesInput, JobUncheckedCreateWithoutCategoriesInput> | JobCreateWithoutCategoriesInput[] | JobUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCategoriesInput | JobCreateOrConnectWithoutCategoriesInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ApplicantUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ApplicantCreateWithoutCategoriesInput, ApplicantUncheckedCreateWithoutCategoriesInput> | ApplicantCreateWithoutCategoriesInput[] | ApplicantUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ApplicantCreateOrConnectWithoutCategoriesInput | ApplicantCreateOrConnectWithoutCategoriesInput[]
    upsert?: ApplicantUpsertWithWhereUniqueWithoutCategoriesInput | ApplicantUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    disconnect?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    delete?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    connect?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    update?: ApplicantUpdateWithWhereUniqueWithoutCategoriesInput | ApplicantUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ApplicantUpdateManyWithWhereWithoutCategoriesInput | ApplicantUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ApplicantScalarWhereInput | ApplicantScalarWhereInput[]
  }

  export type JobUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<JobCreateWithoutCategoriesInput, JobUncheckedCreateWithoutCategoriesInput> | JobCreateWithoutCategoriesInput[] | JobUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCategoriesInput | JobCreateOrConnectWithoutCategoriesInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCategoriesInput | JobUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCategoriesInput | JobUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCategoriesInput | JobUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ApplicantUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<ApplicantCreateWithoutCategoriesInput, ApplicantUncheckedCreateWithoutCategoriesInput> | ApplicantCreateWithoutCategoriesInput[] | ApplicantUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: ApplicantCreateOrConnectWithoutCategoriesInput | ApplicantCreateOrConnectWithoutCategoriesInput[]
    upsert?: ApplicantUpsertWithWhereUniqueWithoutCategoriesInput | ApplicantUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    disconnect?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    delete?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    connect?: ApplicantWhereUniqueInput | ApplicantWhereUniqueInput[]
    update?: ApplicantUpdateWithWhereUniqueWithoutCategoriesInput | ApplicantUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: ApplicantUpdateManyWithWhereWithoutCategoriesInput | ApplicantUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: ApplicantScalarWhereInput | ApplicantScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<JobCreateWithoutCategoriesInput, JobUncheckedCreateWithoutCategoriesInput> | JobCreateWithoutCategoriesInput[] | JobUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: JobCreateOrConnectWithoutCategoriesInput | JobCreateOrConnectWithoutCategoriesInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutCategoriesInput | JobUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutCategoriesInput | JobUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: JobUpdateManyWithWhereWithoutCategoriesInput | JobUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type JobRequirementCreateNestedManyWithoutSkillMasterInput = {
    create?: XOR<JobRequirementCreateWithoutSkillMasterInput, JobRequirementUncheckedCreateWithoutSkillMasterInput> | JobRequirementCreateWithoutSkillMasterInput[] | JobRequirementUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutSkillMasterInput | JobRequirementCreateOrConnectWithoutSkillMasterInput[]
    createMany?: JobRequirementCreateManySkillMasterInputEnvelope
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
  }

  export type ApplicantSkillCreateNestedManyWithoutSkillMasterInput = {
    create?: XOR<ApplicantSkillCreateWithoutSkillMasterInput, ApplicantSkillUncheckedCreateWithoutSkillMasterInput> | ApplicantSkillCreateWithoutSkillMasterInput[] | ApplicantSkillUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutSkillMasterInput | ApplicantSkillCreateOrConnectWithoutSkillMasterInput[]
    createMany?: ApplicantSkillCreateManySkillMasterInputEnvelope
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
  }

  export type SkillDemandCreateNestedManyWithoutSkillMasterInput = {
    create?: XOR<SkillDemandCreateWithoutSkillMasterInput, SkillDemandUncheckedCreateWithoutSkillMasterInput> | SkillDemandCreateWithoutSkillMasterInput[] | SkillDemandUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: SkillDemandCreateOrConnectWithoutSkillMasterInput | SkillDemandCreateOrConnectWithoutSkillMasterInput[]
    createMany?: SkillDemandCreateManySkillMasterInputEnvelope
    connect?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
  }

  export type JobRequirementUncheckedCreateNestedManyWithoutSkillMasterInput = {
    create?: XOR<JobRequirementCreateWithoutSkillMasterInput, JobRequirementUncheckedCreateWithoutSkillMasterInput> | JobRequirementCreateWithoutSkillMasterInput[] | JobRequirementUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutSkillMasterInput | JobRequirementCreateOrConnectWithoutSkillMasterInput[]
    createMany?: JobRequirementCreateManySkillMasterInputEnvelope
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
  }

  export type ApplicantSkillUncheckedCreateNestedManyWithoutSkillMasterInput = {
    create?: XOR<ApplicantSkillCreateWithoutSkillMasterInput, ApplicantSkillUncheckedCreateWithoutSkillMasterInput> | ApplicantSkillCreateWithoutSkillMasterInput[] | ApplicantSkillUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutSkillMasterInput | ApplicantSkillCreateOrConnectWithoutSkillMasterInput[]
    createMany?: ApplicantSkillCreateManySkillMasterInputEnvelope
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
  }

  export type SkillDemandUncheckedCreateNestedManyWithoutSkillMasterInput = {
    create?: XOR<SkillDemandCreateWithoutSkillMasterInput, SkillDemandUncheckedCreateWithoutSkillMasterInput> | SkillDemandCreateWithoutSkillMasterInput[] | SkillDemandUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: SkillDemandCreateOrConnectWithoutSkillMasterInput | SkillDemandCreateOrConnectWithoutSkillMasterInput[]
    createMany?: SkillDemandCreateManySkillMasterInputEnvelope
    connect?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
  }

  export type JobRequirementUpdateManyWithoutSkillMasterNestedInput = {
    create?: XOR<JobRequirementCreateWithoutSkillMasterInput, JobRequirementUncheckedCreateWithoutSkillMasterInput> | JobRequirementCreateWithoutSkillMasterInput[] | JobRequirementUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutSkillMasterInput | JobRequirementCreateOrConnectWithoutSkillMasterInput[]
    upsert?: JobRequirementUpsertWithWhereUniqueWithoutSkillMasterInput | JobRequirementUpsertWithWhereUniqueWithoutSkillMasterInput[]
    createMany?: JobRequirementCreateManySkillMasterInputEnvelope
    set?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    disconnect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    delete?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    update?: JobRequirementUpdateWithWhereUniqueWithoutSkillMasterInput | JobRequirementUpdateWithWhereUniqueWithoutSkillMasterInput[]
    updateMany?: JobRequirementUpdateManyWithWhereWithoutSkillMasterInput | JobRequirementUpdateManyWithWhereWithoutSkillMasterInput[]
    deleteMany?: JobRequirementScalarWhereInput | JobRequirementScalarWhereInput[]
  }

  export type ApplicantSkillUpdateManyWithoutSkillMasterNestedInput = {
    create?: XOR<ApplicantSkillCreateWithoutSkillMasterInput, ApplicantSkillUncheckedCreateWithoutSkillMasterInput> | ApplicantSkillCreateWithoutSkillMasterInput[] | ApplicantSkillUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutSkillMasterInput | ApplicantSkillCreateOrConnectWithoutSkillMasterInput[]
    upsert?: ApplicantSkillUpsertWithWhereUniqueWithoutSkillMasterInput | ApplicantSkillUpsertWithWhereUniqueWithoutSkillMasterInput[]
    createMany?: ApplicantSkillCreateManySkillMasterInputEnvelope
    set?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    disconnect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    delete?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    update?: ApplicantSkillUpdateWithWhereUniqueWithoutSkillMasterInput | ApplicantSkillUpdateWithWhereUniqueWithoutSkillMasterInput[]
    updateMany?: ApplicantSkillUpdateManyWithWhereWithoutSkillMasterInput | ApplicantSkillUpdateManyWithWhereWithoutSkillMasterInput[]
    deleteMany?: ApplicantSkillScalarWhereInput | ApplicantSkillScalarWhereInput[]
  }

  export type SkillDemandUpdateManyWithoutSkillMasterNestedInput = {
    create?: XOR<SkillDemandCreateWithoutSkillMasterInput, SkillDemandUncheckedCreateWithoutSkillMasterInput> | SkillDemandCreateWithoutSkillMasterInput[] | SkillDemandUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: SkillDemandCreateOrConnectWithoutSkillMasterInput | SkillDemandCreateOrConnectWithoutSkillMasterInput[]
    upsert?: SkillDemandUpsertWithWhereUniqueWithoutSkillMasterInput | SkillDemandUpsertWithWhereUniqueWithoutSkillMasterInput[]
    createMany?: SkillDemandCreateManySkillMasterInputEnvelope
    set?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    disconnect?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    delete?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    connect?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    update?: SkillDemandUpdateWithWhereUniqueWithoutSkillMasterInput | SkillDemandUpdateWithWhereUniqueWithoutSkillMasterInput[]
    updateMany?: SkillDemandUpdateManyWithWhereWithoutSkillMasterInput | SkillDemandUpdateManyWithWhereWithoutSkillMasterInput[]
    deleteMany?: SkillDemandScalarWhereInput | SkillDemandScalarWhereInput[]
  }

  export type JobRequirementUncheckedUpdateManyWithoutSkillMasterNestedInput = {
    create?: XOR<JobRequirementCreateWithoutSkillMasterInput, JobRequirementUncheckedCreateWithoutSkillMasterInput> | JobRequirementCreateWithoutSkillMasterInput[] | JobRequirementUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutSkillMasterInput | JobRequirementCreateOrConnectWithoutSkillMasterInput[]
    upsert?: JobRequirementUpsertWithWhereUniqueWithoutSkillMasterInput | JobRequirementUpsertWithWhereUniqueWithoutSkillMasterInput[]
    createMany?: JobRequirementCreateManySkillMasterInputEnvelope
    set?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    disconnect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    delete?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    update?: JobRequirementUpdateWithWhereUniqueWithoutSkillMasterInput | JobRequirementUpdateWithWhereUniqueWithoutSkillMasterInput[]
    updateMany?: JobRequirementUpdateManyWithWhereWithoutSkillMasterInput | JobRequirementUpdateManyWithWhereWithoutSkillMasterInput[]
    deleteMany?: JobRequirementScalarWhereInput | JobRequirementScalarWhereInput[]
  }

  export type ApplicantSkillUncheckedUpdateManyWithoutSkillMasterNestedInput = {
    create?: XOR<ApplicantSkillCreateWithoutSkillMasterInput, ApplicantSkillUncheckedCreateWithoutSkillMasterInput> | ApplicantSkillCreateWithoutSkillMasterInput[] | ApplicantSkillUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutSkillMasterInput | ApplicantSkillCreateOrConnectWithoutSkillMasterInput[]
    upsert?: ApplicantSkillUpsertWithWhereUniqueWithoutSkillMasterInput | ApplicantSkillUpsertWithWhereUniqueWithoutSkillMasterInput[]
    createMany?: ApplicantSkillCreateManySkillMasterInputEnvelope
    set?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    disconnect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    delete?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    update?: ApplicantSkillUpdateWithWhereUniqueWithoutSkillMasterInput | ApplicantSkillUpdateWithWhereUniqueWithoutSkillMasterInput[]
    updateMany?: ApplicantSkillUpdateManyWithWhereWithoutSkillMasterInput | ApplicantSkillUpdateManyWithWhereWithoutSkillMasterInput[]
    deleteMany?: ApplicantSkillScalarWhereInput | ApplicantSkillScalarWhereInput[]
  }

  export type SkillDemandUncheckedUpdateManyWithoutSkillMasterNestedInput = {
    create?: XOR<SkillDemandCreateWithoutSkillMasterInput, SkillDemandUncheckedCreateWithoutSkillMasterInput> | SkillDemandCreateWithoutSkillMasterInput[] | SkillDemandUncheckedCreateWithoutSkillMasterInput[]
    connectOrCreate?: SkillDemandCreateOrConnectWithoutSkillMasterInput | SkillDemandCreateOrConnectWithoutSkillMasterInput[]
    upsert?: SkillDemandUpsertWithWhereUniqueWithoutSkillMasterInput | SkillDemandUpsertWithWhereUniqueWithoutSkillMasterInput[]
    createMany?: SkillDemandCreateManySkillMasterInputEnvelope
    set?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    disconnect?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    delete?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    connect?: SkillDemandWhereUniqueInput | SkillDemandWhereUniqueInput[]
    update?: SkillDemandUpdateWithWhereUniqueWithoutSkillMasterInput | SkillDemandUpdateWithWhereUniqueWithoutSkillMasterInput[]
    updateMany?: SkillDemandUpdateManyWithWhereWithoutSkillMasterInput | SkillDemandUpdateManyWithWhereWithoutSkillMasterInput[]
    deleteMany?: SkillDemandScalarWhereInput | SkillDemandScalarWhereInput[]
  }

  export type AcademicQualificationCreateNestedManyWithoutCountryInput = {
    create?: XOR<AcademicQualificationCreateWithoutCountryInput, AcademicQualificationUncheckedCreateWithoutCountryInput> | AcademicQualificationCreateWithoutCountryInput[] | AcademicQualificationUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutCountryInput | AcademicQualificationCreateOrConnectWithoutCountryInput[]
    createMany?: AcademicQualificationCreateManyCountryInputEnvelope
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
  }

  export type AcademicQualificationUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<AcademicQualificationCreateWithoutCountryInput, AcademicQualificationUncheckedCreateWithoutCountryInput> | AcademicQualificationCreateWithoutCountryInput[] | AcademicQualificationUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutCountryInput | AcademicQualificationCreateOrConnectWithoutCountryInput[]
    createMany?: AcademicQualificationCreateManyCountryInputEnvelope
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
  }

  export type AcademicQualificationUpdateManyWithoutCountryNestedInput = {
    create?: XOR<AcademicQualificationCreateWithoutCountryInput, AcademicQualificationUncheckedCreateWithoutCountryInput> | AcademicQualificationCreateWithoutCountryInput[] | AcademicQualificationUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutCountryInput | AcademicQualificationCreateOrConnectWithoutCountryInput[]
    upsert?: AcademicQualificationUpsertWithWhereUniqueWithoutCountryInput | AcademicQualificationUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: AcademicQualificationCreateManyCountryInputEnvelope
    set?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    disconnect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    delete?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    update?: AcademicQualificationUpdateWithWhereUniqueWithoutCountryInput | AcademicQualificationUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: AcademicQualificationUpdateManyWithWhereWithoutCountryInput | AcademicQualificationUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: AcademicQualificationScalarWhereInput | AcademicQualificationScalarWhereInput[]
  }

  export type AcademicQualificationUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<AcademicQualificationCreateWithoutCountryInput, AcademicQualificationUncheckedCreateWithoutCountryInput> | AcademicQualificationCreateWithoutCountryInput[] | AcademicQualificationUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutCountryInput | AcademicQualificationCreateOrConnectWithoutCountryInput[]
    upsert?: AcademicQualificationUpsertWithWhereUniqueWithoutCountryInput | AcademicQualificationUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: AcademicQualificationCreateManyCountryInputEnvelope
    set?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    disconnect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    delete?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    update?: AcademicQualificationUpdateWithWhereUniqueWithoutCountryInput | AcademicQualificationUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: AcademicQualificationUpdateManyWithWhereWithoutCountryInput | AcademicQualificationUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: AcademicQualificationScalarWhereInput | AcademicQualificationScalarWhereInput[]
  }

  export type ApplicantCreateNestedOneWithoutUserInput = {
    create?: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutUserInput
    connect?: ApplicantWhereUniqueInput
  }

  export type EmployerCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutUserInput
    connect?: EmployerWhereUniqueInput
  }

  export type ChatRoomCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatRoomCreateWithoutUserInput, ChatRoomUncheckedCreateWithoutUserInput> | ChatRoomCreateWithoutUserInput[] | ChatRoomUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutUserInput | ChatRoomCreateOrConnectWithoutUserInput[]
    createMany?: ChatRoomCreateManyUserInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatRoomCreateNestedManyWithoutAgentInput = {
    create?: XOR<ChatRoomCreateWithoutAgentInput, ChatRoomUncheckedCreateWithoutAgentInput> | ChatRoomCreateWithoutAgentInput[] | ChatRoomUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutAgentInput | ChatRoomCreateOrConnectWithoutAgentInput[]
    createMany?: ChatRoomCreateManyAgentInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatMessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type UserConsentCreateNestedManyWithoutUserInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type ApplicantUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutUserInput
    connect?: ApplicantWhereUniqueInput
  }

  export type EmployerUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutUserInput
    connect?: EmployerWhereUniqueInput
  }

  export type ChatRoomUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatRoomCreateWithoutUserInput, ChatRoomUncheckedCreateWithoutUserInput> | ChatRoomCreateWithoutUserInput[] | ChatRoomUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutUserInput | ChatRoomCreateOrConnectWithoutUserInput[]
    createMany?: ChatRoomCreateManyUserInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatRoomUncheckedCreateNestedManyWithoutAgentInput = {
    create?: XOR<ChatRoomCreateWithoutAgentInput, ChatRoomUncheckedCreateWithoutAgentInput> | ChatRoomCreateWithoutAgentInput[] | ChatRoomUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutAgentInput | ChatRoomCreateOrConnectWithoutAgentInput[]
    createMany?: ChatRoomCreateManyAgentInputEnvelope
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type UserConsentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ApplicantUpdateOneWithoutUserNestedInput = {
    create?: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutUserInput
    upsert?: ApplicantUpsertWithoutUserInput
    disconnect?: ApplicantWhereInput | boolean
    delete?: ApplicantWhereInput | boolean
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutUserInput, ApplicantUpdateWithoutUserInput>, ApplicantUncheckedUpdateWithoutUserInput>
  }

  export type EmployerUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutUserInput
    upsert?: EmployerUpsertWithoutUserInput
    disconnect?: EmployerWhereInput | boolean
    delete?: EmployerWhereInput | boolean
    connect?: EmployerWhereUniqueInput
    update?: XOR<XOR<EmployerUpdateToOneWithWhereWithoutUserInput, EmployerUpdateWithoutUserInput>, EmployerUncheckedUpdateWithoutUserInput>
  }

  export type ChatRoomUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatRoomCreateWithoutUserInput, ChatRoomUncheckedCreateWithoutUserInput> | ChatRoomCreateWithoutUserInput[] | ChatRoomUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutUserInput | ChatRoomCreateOrConnectWithoutUserInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutUserInput | ChatRoomUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatRoomCreateManyUserInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutUserInput | ChatRoomUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutUserInput | ChatRoomUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatRoomUpdateManyWithoutAgentNestedInput = {
    create?: XOR<ChatRoomCreateWithoutAgentInput, ChatRoomUncheckedCreateWithoutAgentInput> | ChatRoomCreateWithoutAgentInput[] | ChatRoomUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutAgentInput | ChatRoomCreateOrConnectWithoutAgentInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutAgentInput | ChatRoomUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: ChatRoomCreateManyAgentInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutAgentInput | ChatRoomUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutAgentInput | ChatRoomUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatMessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSenderInput | ChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSenderInput | ChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSenderInput | ChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type UserConsentUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    upsert?: UserConsentUpsertWithWhereUniqueWithoutUserInput | UserConsentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    set?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    disconnect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    delete?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    update?: UserConsentUpdateWithWhereUniqueWithoutUserInput | UserConsentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserConsentUpdateManyWithWhereWithoutUserInput | UserConsentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type ApplicantUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutUserInput
    upsert?: ApplicantUpsertWithoutUserInput
    disconnect?: ApplicantWhereInput | boolean
    delete?: ApplicantWhereInput | boolean
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutUserInput, ApplicantUpdateWithoutUserInput>, ApplicantUncheckedUpdateWithoutUserInput>
  }

  export type EmployerUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutUserInput
    upsert?: EmployerUpsertWithoutUserInput
    disconnect?: EmployerWhereInput | boolean
    delete?: EmployerWhereInput | boolean
    connect?: EmployerWhereUniqueInput
    update?: XOR<XOR<EmployerUpdateToOneWithWhereWithoutUserInput, EmployerUpdateWithoutUserInput>, EmployerUncheckedUpdateWithoutUserInput>
  }

  export type ChatRoomUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatRoomCreateWithoutUserInput, ChatRoomUncheckedCreateWithoutUserInput> | ChatRoomCreateWithoutUserInput[] | ChatRoomUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutUserInput | ChatRoomCreateOrConnectWithoutUserInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutUserInput | ChatRoomUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatRoomCreateManyUserInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutUserInput | ChatRoomUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutUserInput | ChatRoomUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatRoomUncheckedUpdateManyWithoutAgentNestedInput = {
    create?: XOR<ChatRoomCreateWithoutAgentInput, ChatRoomUncheckedCreateWithoutAgentInput> | ChatRoomCreateWithoutAgentInput[] | ChatRoomUncheckedCreateWithoutAgentInput[]
    connectOrCreate?: ChatRoomCreateOrConnectWithoutAgentInput | ChatRoomCreateOrConnectWithoutAgentInput[]
    upsert?: ChatRoomUpsertWithWhereUniqueWithoutAgentInput | ChatRoomUpsertWithWhereUniqueWithoutAgentInput[]
    createMany?: ChatRoomCreateManyAgentInputEnvelope
    set?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    disconnect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    delete?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    connect?: ChatRoomWhereUniqueInput | ChatRoomWhereUniqueInput[]
    update?: ChatRoomUpdateWithWhereUniqueWithoutAgentInput | ChatRoomUpdateWithWhereUniqueWithoutAgentInput[]
    updateMany?: ChatRoomUpdateManyWithWhereWithoutAgentInput | ChatRoomUpdateManyWithWhereWithoutAgentInput[]
    deleteMany?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput> | ChatMessageCreateWithoutSenderInput[] | ChatMessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutSenderInput | ChatMessageCreateOrConnectWithoutSenderInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutSenderInput | ChatMessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: ChatMessageCreateManySenderInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutSenderInput | ChatMessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutSenderInput | ChatMessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type UserConsentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput> | UserConsentCreateWithoutUserInput[] | UserConsentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserConsentCreateOrConnectWithoutUserInput | UserConsentCreateOrConnectWithoutUserInput[]
    upsert?: UserConsentUpsertWithWhereUniqueWithoutUserInput | UserConsentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserConsentCreateManyUserInputEnvelope
    set?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    disconnect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    delete?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    connect?: UserConsentWhereUniqueInput | UserConsentWhereUniqueInput[]
    update?: UserConsentUpdateWithWhereUniqueWithoutUserInput | UserConsentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserConsentUpdateManyWithWhereWithoutUserInput | UserConsentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutApplicantInput = {
    create?: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicantInput
    connect?: UserWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type AcademicQualificationCreateNestedManyWithoutApplicantInput = {
    create?: XOR<AcademicQualificationCreateWithoutApplicantInput, AcademicQualificationUncheckedCreateWithoutApplicantInput> | AcademicQualificationCreateWithoutApplicantInput[] | AcademicQualificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutApplicantInput | AcademicQualificationCreateOrConnectWithoutApplicantInput[]
    createMany?: AcademicQualificationCreateManyApplicantInputEnvelope
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
  }

  export type WorkExperienceCreateNestedManyWithoutApplicantInput = {
    create?: XOR<WorkExperienceCreateWithoutApplicantInput, WorkExperienceUncheckedCreateWithoutApplicantInput> | WorkExperienceCreateWithoutApplicantInput[] | WorkExperienceUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutApplicantInput | WorkExperienceCreateOrConnectWithoutApplicantInput[]
    createMany?: WorkExperienceCreateManyApplicantInputEnvelope
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
  }

  export type LanguageProficiencyCreateNestedManyWithoutApplicantInput = {
    create?: XOR<LanguageProficiencyCreateWithoutApplicantInput, LanguageProficiencyUncheckedCreateWithoutApplicantInput> | LanguageProficiencyCreateWithoutApplicantInput[] | LanguageProficiencyUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LanguageProficiencyCreateOrConnectWithoutApplicantInput | LanguageProficiencyCreateOrConnectWithoutApplicantInput[]
    createMany?: LanguageProficiencyCreateManyApplicantInputEnvelope
    connect?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
  }

  export type ComputerSkillCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ComputerSkillCreateWithoutApplicantInput, ComputerSkillUncheckedCreateWithoutApplicantInput> | ComputerSkillCreateWithoutApplicantInput[] | ComputerSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ComputerSkillCreateOrConnectWithoutApplicantInput | ComputerSkillCreateOrConnectWithoutApplicantInput[]
    createMany?: ComputerSkillCreateManyApplicantInputEnvelope
    connect?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
  }

  export type ApplicantSkillCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ApplicantSkillCreateWithoutApplicantInput, ApplicantSkillUncheckedCreateWithoutApplicantInput> | ApplicantSkillCreateWithoutApplicantInput[] | ApplicantSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutApplicantInput | ApplicantSkillCreateOrConnectWithoutApplicantInput[]
    createMany?: ApplicantSkillCreateManyApplicantInputEnvelope
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
  }

  export type GeneralSkillCreateNestedManyWithoutApplicantInput = {
    create?: XOR<GeneralSkillCreateWithoutApplicantInput, GeneralSkillUncheckedCreateWithoutApplicantInput> | GeneralSkillCreateWithoutApplicantInput[] | GeneralSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: GeneralSkillCreateOrConnectWithoutApplicantInput | GeneralSkillCreateOrConnectWithoutApplicantInput[]
    createMany?: GeneralSkillCreateManyApplicantInputEnvelope
    connect?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutApplicantInput = {
    create?: XOR<NotificationCreateWithoutApplicantInput, NotificationUncheckedCreateWithoutApplicantInput> | NotificationCreateWithoutApplicantInput[] | NotificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicantInput | NotificationCreateOrConnectWithoutApplicantInput[]
    createMany?: NotificationCreateManyApplicantInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type JobCategoryCreateNestedManyWithoutApplicantsInput = {
    create?: XOR<JobCategoryCreateWithoutApplicantsInput, JobCategoryUncheckedCreateWithoutApplicantsInput> | JobCategoryCreateWithoutApplicantsInput[] | JobCategoryUncheckedCreateWithoutApplicantsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutApplicantsInput | JobCategoryCreateOrConnectWithoutApplicantsInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
  }

  export type NotificationSettingsCreateNestedOneWithoutApplicantInput = {
    create?: XOR<NotificationSettingsCreateWithoutApplicantInput, NotificationSettingsUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutApplicantInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type ApplicationUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<AcademicQualificationCreateWithoutApplicantInput, AcademicQualificationUncheckedCreateWithoutApplicantInput> | AcademicQualificationCreateWithoutApplicantInput[] | AcademicQualificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutApplicantInput | AcademicQualificationCreateOrConnectWithoutApplicantInput[]
    createMany?: AcademicQualificationCreateManyApplicantInputEnvelope
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
  }

  export type WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<WorkExperienceCreateWithoutApplicantInput, WorkExperienceUncheckedCreateWithoutApplicantInput> | WorkExperienceCreateWithoutApplicantInput[] | WorkExperienceUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutApplicantInput | WorkExperienceCreateOrConnectWithoutApplicantInput[]
    createMany?: WorkExperienceCreateManyApplicantInputEnvelope
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
  }

  export type LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<LanguageProficiencyCreateWithoutApplicantInput, LanguageProficiencyUncheckedCreateWithoutApplicantInput> | LanguageProficiencyCreateWithoutApplicantInput[] | LanguageProficiencyUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LanguageProficiencyCreateOrConnectWithoutApplicantInput | LanguageProficiencyCreateOrConnectWithoutApplicantInput[]
    createMany?: LanguageProficiencyCreateManyApplicantInputEnvelope
    connect?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
  }

  export type ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ComputerSkillCreateWithoutApplicantInput, ComputerSkillUncheckedCreateWithoutApplicantInput> | ComputerSkillCreateWithoutApplicantInput[] | ComputerSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ComputerSkillCreateOrConnectWithoutApplicantInput | ComputerSkillCreateOrConnectWithoutApplicantInput[]
    createMany?: ComputerSkillCreateManyApplicantInputEnvelope
    connect?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
  }

  export type ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<ApplicantSkillCreateWithoutApplicantInput, ApplicantSkillUncheckedCreateWithoutApplicantInput> | ApplicantSkillCreateWithoutApplicantInput[] | ApplicantSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutApplicantInput | ApplicantSkillCreateOrConnectWithoutApplicantInput[]
    createMany?: ApplicantSkillCreateManyApplicantInputEnvelope
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
  }

  export type GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<GeneralSkillCreateWithoutApplicantInput, GeneralSkillUncheckedCreateWithoutApplicantInput> | GeneralSkillCreateWithoutApplicantInput[] | GeneralSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: GeneralSkillCreateOrConnectWithoutApplicantInput | GeneralSkillCreateOrConnectWithoutApplicantInput[]
    createMany?: GeneralSkillCreateManyApplicantInputEnvelope
    connect?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutApplicantInput = {
    create?: XOR<NotificationCreateWithoutApplicantInput, NotificationUncheckedCreateWithoutApplicantInput> | NotificationCreateWithoutApplicantInput[] | NotificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicantInput | NotificationCreateOrConnectWithoutApplicantInput[]
    createMany?: NotificationCreateManyApplicantInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput = {
    create?: XOR<JobCategoryCreateWithoutApplicantsInput, JobCategoryUncheckedCreateWithoutApplicantsInput> | JobCategoryCreateWithoutApplicantsInput[] | JobCategoryUncheckedCreateWithoutApplicantsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutApplicantsInput | JobCategoryCreateOrConnectWithoutApplicantsInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
  }

  export type NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput = {
    create?: XOR<NotificationSettingsCreateWithoutApplicantInput, NotificationSettingsUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutApplicantInput
    connect?: NotificationSettingsWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutApplicantNestedInput = {
    create?: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: UserCreateOrConnectWithoutApplicantInput
    upsert?: UserUpsertWithoutApplicantInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApplicantInput, UserUpdateWithoutApplicantInput>, UserUncheckedUpdateWithoutApplicantInput>
  }

  export type ApplicationUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutApplicantInput | ApplicationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutApplicantInput | ApplicationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutApplicantInput | ApplicationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type AcademicQualificationUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<AcademicQualificationCreateWithoutApplicantInput, AcademicQualificationUncheckedCreateWithoutApplicantInput> | AcademicQualificationCreateWithoutApplicantInput[] | AcademicQualificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutApplicantInput | AcademicQualificationCreateOrConnectWithoutApplicantInput[]
    upsert?: AcademicQualificationUpsertWithWhereUniqueWithoutApplicantInput | AcademicQualificationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: AcademicQualificationCreateManyApplicantInputEnvelope
    set?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    disconnect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    delete?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    update?: AcademicQualificationUpdateWithWhereUniqueWithoutApplicantInput | AcademicQualificationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: AcademicQualificationUpdateManyWithWhereWithoutApplicantInput | AcademicQualificationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: AcademicQualificationScalarWhereInput | AcademicQualificationScalarWhereInput[]
  }

  export type WorkExperienceUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<WorkExperienceCreateWithoutApplicantInput, WorkExperienceUncheckedCreateWithoutApplicantInput> | WorkExperienceCreateWithoutApplicantInput[] | WorkExperienceUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutApplicantInput | WorkExperienceCreateOrConnectWithoutApplicantInput[]
    upsert?: WorkExperienceUpsertWithWhereUniqueWithoutApplicantInput | WorkExperienceUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: WorkExperienceCreateManyApplicantInputEnvelope
    set?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    disconnect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    delete?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    update?: WorkExperienceUpdateWithWhereUniqueWithoutApplicantInput | WorkExperienceUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: WorkExperienceUpdateManyWithWhereWithoutApplicantInput | WorkExperienceUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
  }

  export type LanguageProficiencyUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<LanguageProficiencyCreateWithoutApplicantInput, LanguageProficiencyUncheckedCreateWithoutApplicantInput> | LanguageProficiencyCreateWithoutApplicantInput[] | LanguageProficiencyUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LanguageProficiencyCreateOrConnectWithoutApplicantInput | LanguageProficiencyCreateOrConnectWithoutApplicantInput[]
    upsert?: LanguageProficiencyUpsertWithWhereUniqueWithoutApplicantInput | LanguageProficiencyUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: LanguageProficiencyCreateManyApplicantInputEnvelope
    set?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    disconnect?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    delete?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    connect?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    update?: LanguageProficiencyUpdateWithWhereUniqueWithoutApplicantInput | LanguageProficiencyUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: LanguageProficiencyUpdateManyWithWhereWithoutApplicantInput | LanguageProficiencyUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: LanguageProficiencyScalarWhereInput | LanguageProficiencyScalarWhereInput[]
  }

  export type ComputerSkillUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ComputerSkillCreateWithoutApplicantInput, ComputerSkillUncheckedCreateWithoutApplicantInput> | ComputerSkillCreateWithoutApplicantInput[] | ComputerSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ComputerSkillCreateOrConnectWithoutApplicantInput | ComputerSkillCreateOrConnectWithoutApplicantInput[]
    upsert?: ComputerSkillUpsertWithWhereUniqueWithoutApplicantInput | ComputerSkillUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ComputerSkillCreateManyApplicantInputEnvelope
    set?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    disconnect?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    delete?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    connect?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    update?: ComputerSkillUpdateWithWhereUniqueWithoutApplicantInput | ComputerSkillUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ComputerSkillUpdateManyWithWhereWithoutApplicantInput | ComputerSkillUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ComputerSkillScalarWhereInput | ComputerSkillScalarWhereInput[]
  }

  export type ApplicantSkillUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ApplicantSkillCreateWithoutApplicantInput, ApplicantSkillUncheckedCreateWithoutApplicantInput> | ApplicantSkillCreateWithoutApplicantInput[] | ApplicantSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutApplicantInput | ApplicantSkillCreateOrConnectWithoutApplicantInput[]
    upsert?: ApplicantSkillUpsertWithWhereUniqueWithoutApplicantInput | ApplicantSkillUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ApplicantSkillCreateManyApplicantInputEnvelope
    set?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    disconnect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    delete?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    update?: ApplicantSkillUpdateWithWhereUniqueWithoutApplicantInput | ApplicantSkillUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ApplicantSkillUpdateManyWithWhereWithoutApplicantInput | ApplicantSkillUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ApplicantSkillScalarWhereInput | ApplicantSkillScalarWhereInput[]
  }

  export type GeneralSkillUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<GeneralSkillCreateWithoutApplicantInput, GeneralSkillUncheckedCreateWithoutApplicantInput> | GeneralSkillCreateWithoutApplicantInput[] | GeneralSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: GeneralSkillCreateOrConnectWithoutApplicantInput | GeneralSkillCreateOrConnectWithoutApplicantInput[]
    upsert?: GeneralSkillUpsertWithWhereUniqueWithoutApplicantInput | GeneralSkillUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: GeneralSkillCreateManyApplicantInputEnvelope
    set?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    disconnect?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    delete?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    connect?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    update?: GeneralSkillUpdateWithWhereUniqueWithoutApplicantInput | GeneralSkillUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: GeneralSkillUpdateManyWithWhereWithoutApplicantInput | GeneralSkillUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: GeneralSkillScalarWhereInput | GeneralSkillScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<NotificationCreateWithoutApplicantInput, NotificationUncheckedCreateWithoutApplicantInput> | NotificationCreateWithoutApplicantInput[] | NotificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicantInput | NotificationCreateOrConnectWithoutApplicantInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutApplicantInput | NotificationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: NotificationCreateManyApplicantInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutApplicantInput | NotificationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutApplicantInput | NotificationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type JobCategoryUpdateManyWithoutApplicantsNestedInput = {
    create?: XOR<JobCategoryCreateWithoutApplicantsInput, JobCategoryUncheckedCreateWithoutApplicantsInput> | JobCategoryCreateWithoutApplicantsInput[] | JobCategoryUncheckedCreateWithoutApplicantsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutApplicantsInput | JobCategoryCreateOrConnectWithoutApplicantsInput[]
    upsert?: JobCategoryUpsertWithWhereUniqueWithoutApplicantsInput | JobCategoryUpsertWithWhereUniqueWithoutApplicantsInput[]
    set?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    disconnect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    delete?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    update?: JobCategoryUpdateWithWhereUniqueWithoutApplicantsInput | JobCategoryUpdateWithWhereUniqueWithoutApplicantsInput[]
    updateMany?: JobCategoryUpdateManyWithWhereWithoutApplicantsInput | JobCategoryUpdateManyWithWhereWithoutApplicantsInput[]
    deleteMany?: JobCategoryScalarWhereInput | JobCategoryScalarWhereInput[]
  }

  export type NotificationSettingsUpdateOneWithoutApplicantNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutApplicantInput, NotificationSettingsUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutApplicantInput
    upsert?: NotificationSettingsUpsertWithoutApplicantInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutApplicantInput, NotificationSettingsUpdateWithoutApplicantInput>, NotificationSettingsUncheckedUpdateWithoutApplicantInput>
  }

  export type ApplicationUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput> | ApplicationCreateWithoutApplicantInput[] | ApplicationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutApplicantInput | ApplicationCreateOrConnectWithoutApplicantInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutApplicantInput | ApplicationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ApplicationCreateManyApplicantInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutApplicantInput | ApplicationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutApplicantInput | ApplicationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<AcademicQualificationCreateWithoutApplicantInput, AcademicQualificationUncheckedCreateWithoutApplicantInput> | AcademicQualificationCreateWithoutApplicantInput[] | AcademicQualificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: AcademicQualificationCreateOrConnectWithoutApplicantInput | AcademicQualificationCreateOrConnectWithoutApplicantInput[]
    upsert?: AcademicQualificationUpsertWithWhereUniqueWithoutApplicantInput | AcademicQualificationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: AcademicQualificationCreateManyApplicantInputEnvelope
    set?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    disconnect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    delete?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    connect?: AcademicQualificationWhereUniqueInput | AcademicQualificationWhereUniqueInput[]
    update?: AcademicQualificationUpdateWithWhereUniqueWithoutApplicantInput | AcademicQualificationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: AcademicQualificationUpdateManyWithWhereWithoutApplicantInput | AcademicQualificationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: AcademicQualificationScalarWhereInput | AcademicQualificationScalarWhereInput[]
  }

  export type WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<WorkExperienceCreateWithoutApplicantInput, WorkExperienceUncheckedCreateWithoutApplicantInput> | WorkExperienceCreateWithoutApplicantInput[] | WorkExperienceUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: WorkExperienceCreateOrConnectWithoutApplicantInput | WorkExperienceCreateOrConnectWithoutApplicantInput[]
    upsert?: WorkExperienceUpsertWithWhereUniqueWithoutApplicantInput | WorkExperienceUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: WorkExperienceCreateManyApplicantInputEnvelope
    set?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    disconnect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    delete?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    connect?: WorkExperienceWhereUniqueInput | WorkExperienceWhereUniqueInput[]
    update?: WorkExperienceUpdateWithWhereUniqueWithoutApplicantInput | WorkExperienceUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: WorkExperienceUpdateManyWithWhereWithoutApplicantInput | WorkExperienceUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
  }

  export type LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<LanguageProficiencyCreateWithoutApplicantInput, LanguageProficiencyUncheckedCreateWithoutApplicantInput> | LanguageProficiencyCreateWithoutApplicantInput[] | LanguageProficiencyUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: LanguageProficiencyCreateOrConnectWithoutApplicantInput | LanguageProficiencyCreateOrConnectWithoutApplicantInput[]
    upsert?: LanguageProficiencyUpsertWithWhereUniqueWithoutApplicantInput | LanguageProficiencyUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: LanguageProficiencyCreateManyApplicantInputEnvelope
    set?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    disconnect?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    delete?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    connect?: LanguageProficiencyWhereUniqueInput | LanguageProficiencyWhereUniqueInput[]
    update?: LanguageProficiencyUpdateWithWhereUniqueWithoutApplicantInput | LanguageProficiencyUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: LanguageProficiencyUpdateManyWithWhereWithoutApplicantInput | LanguageProficiencyUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: LanguageProficiencyScalarWhereInput | LanguageProficiencyScalarWhereInput[]
  }

  export type ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ComputerSkillCreateWithoutApplicantInput, ComputerSkillUncheckedCreateWithoutApplicantInput> | ComputerSkillCreateWithoutApplicantInput[] | ComputerSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ComputerSkillCreateOrConnectWithoutApplicantInput | ComputerSkillCreateOrConnectWithoutApplicantInput[]
    upsert?: ComputerSkillUpsertWithWhereUniqueWithoutApplicantInput | ComputerSkillUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ComputerSkillCreateManyApplicantInputEnvelope
    set?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    disconnect?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    delete?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    connect?: ComputerSkillWhereUniqueInput | ComputerSkillWhereUniqueInput[]
    update?: ComputerSkillUpdateWithWhereUniqueWithoutApplicantInput | ComputerSkillUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ComputerSkillUpdateManyWithWhereWithoutApplicantInput | ComputerSkillUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ComputerSkillScalarWhereInput | ComputerSkillScalarWhereInput[]
  }

  export type ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<ApplicantSkillCreateWithoutApplicantInput, ApplicantSkillUncheckedCreateWithoutApplicantInput> | ApplicantSkillCreateWithoutApplicantInput[] | ApplicantSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: ApplicantSkillCreateOrConnectWithoutApplicantInput | ApplicantSkillCreateOrConnectWithoutApplicantInput[]
    upsert?: ApplicantSkillUpsertWithWhereUniqueWithoutApplicantInput | ApplicantSkillUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: ApplicantSkillCreateManyApplicantInputEnvelope
    set?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    disconnect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    delete?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    connect?: ApplicantSkillWhereUniqueInput | ApplicantSkillWhereUniqueInput[]
    update?: ApplicantSkillUpdateWithWhereUniqueWithoutApplicantInput | ApplicantSkillUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: ApplicantSkillUpdateManyWithWhereWithoutApplicantInput | ApplicantSkillUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: ApplicantSkillScalarWhereInput | ApplicantSkillScalarWhereInput[]
  }

  export type GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<GeneralSkillCreateWithoutApplicantInput, GeneralSkillUncheckedCreateWithoutApplicantInput> | GeneralSkillCreateWithoutApplicantInput[] | GeneralSkillUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: GeneralSkillCreateOrConnectWithoutApplicantInput | GeneralSkillCreateOrConnectWithoutApplicantInput[]
    upsert?: GeneralSkillUpsertWithWhereUniqueWithoutApplicantInput | GeneralSkillUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: GeneralSkillCreateManyApplicantInputEnvelope
    set?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    disconnect?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    delete?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    connect?: GeneralSkillWhereUniqueInput | GeneralSkillWhereUniqueInput[]
    update?: GeneralSkillUpdateWithWhereUniqueWithoutApplicantInput | GeneralSkillUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: GeneralSkillUpdateManyWithWhereWithoutApplicantInput | GeneralSkillUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: GeneralSkillScalarWhereInput | GeneralSkillScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutApplicantNestedInput = {
    create?: XOR<NotificationCreateWithoutApplicantInput, NotificationUncheckedCreateWithoutApplicantInput> | NotificationCreateWithoutApplicantInput[] | NotificationUncheckedCreateWithoutApplicantInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicantInput | NotificationCreateOrConnectWithoutApplicantInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutApplicantInput | NotificationUpsertWithWhereUniqueWithoutApplicantInput[]
    createMany?: NotificationCreateManyApplicantInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutApplicantInput | NotificationUpdateWithWhereUniqueWithoutApplicantInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutApplicantInput | NotificationUpdateManyWithWhereWithoutApplicantInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput = {
    create?: XOR<JobCategoryCreateWithoutApplicantsInput, JobCategoryUncheckedCreateWithoutApplicantsInput> | JobCategoryCreateWithoutApplicantsInput[] | JobCategoryUncheckedCreateWithoutApplicantsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutApplicantsInput | JobCategoryCreateOrConnectWithoutApplicantsInput[]
    upsert?: JobCategoryUpsertWithWhereUniqueWithoutApplicantsInput | JobCategoryUpsertWithWhereUniqueWithoutApplicantsInput[]
    set?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    disconnect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    delete?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    update?: JobCategoryUpdateWithWhereUniqueWithoutApplicantsInput | JobCategoryUpdateWithWhereUniqueWithoutApplicantsInput[]
    updateMany?: JobCategoryUpdateManyWithWhereWithoutApplicantsInput | JobCategoryUpdateManyWithWhereWithoutApplicantsInput[]
    deleteMany?: JobCategoryScalarWhereInput | JobCategoryScalarWhereInput[]
  }

  export type NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput = {
    create?: XOR<NotificationSettingsCreateWithoutApplicantInput, NotificationSettingsUncheckedCreateWithoutApplicantInput>
    connectOrCreate?: NotificationSettingsCreateOrConnectWithoutApplicantInput
    upsert?: NotificationSettingsUpsertWithoutApplicantInput
    disconnect?: NotificationSettingsWhereInput | boolean
    delete?: NotificationSettingsWhereInput | boolean
    connect?: NotificationSettingsWhereUniqueInput
    update?: XOR<XOR<NotificationSettingsUpdateToOneWithWhereWithoutApplicantInput, NotificationSettingsUpdateWithoutApplicantInput>, NotificationSettingsUncheckedUpdateWithoutApplicantInput>
  }

  export type UserCreateNestedOneWithoutEmployerInput = {
    create?: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInput
    connect?: UserWhereUniqueInput
  }

  export type JobCreateNestedManyWithoutEmployerInput = {
    create?: XOR<JobCreateWithoutEmployerInput, JobUncheckedCreateWithoutEmployerInput> | JobCreateWithoutEmployerInput[] | JobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutEmployerInput | JobCreateOrConnectWithoutEmployerInput[]
    createMany?: JobCreateManyEmployerInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutEmployerInput = {
    create?: XOR<NotificationCreateWithoutEmployerInput, NotificationUncheckedCreateWithoutEmployerInput> | NotificationCreateWithoutEmployerInput[] | NotificationUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutEmployerInput | NotificationCreateOrConnectWithoutEmployerInput[]
    createMany?: NotificationCreateManyEmployerInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutEmployerInput = {
    create?: XOR<JobCreateWithoutEmployerInput, JobUncheckedCreateWithoutEmployerInput> | JobCreateWithoutEmployerInput[] | JobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutEmployerInput | JobCreateOrConnectWithoutEmployerInput[]
    createMany?: JobCreateManyEmployerInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutEmployerInput = {
    create?: XOR<NotificationCreateWithoutEmployerInput, NotificationUncheckedCreateWithoutEmployerInput> | NotificationCreateWithoutEmployerInput[] | NotificationUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutEmployerInput | NotificationCreateOrConnectWithoutEmployerInput[]
    createMany?: NotificationCreateManyEmployerInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutEmployerNestedInput = {
    create?: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    connectOrCreate?: UserCreateOrConnectWithoutEmployerInput
    upsert?: UserUpsertWithoutEmployerInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEmployerInput, UserUpdateWithoutEmployerInput>, UserUncheckedUpdateWithoutEmployerInput>
  }

  export type JobUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<JobCreateWithoutEmployerInput, JobUncheckedCreateWithoutEmployerInput> | JobCreateWithoutEmployerInput[] | JobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutEmployerInput | JobCreateOrConnectWithoutEmployerInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutEmployerInput | JobUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: JobCreateManyEmployerInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutEmployerInput | JobUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: JobUpdateManyWithWhereWithoutEmployerInput | JobUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<NotificationCreateWithoutEmployerInput, NotificationUncheckedCreateWithoutEmployerInput> | NotificationCreateWithoutEmployerInput[] | NotificationUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutEmployerInput | NotificationCreateOrConnectWithoutEmployerInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutEmployerInput | NotificationUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: NotificationCreateManyEmployerInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutEmployerInput | NotificationUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutEmployerInput | NotificationUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<JobCreateWithoutEmployerInput, JobUncheckedCreateWithoutEmployerInput> | JobCreateWithoutEmployerInput[] | JobUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: JobCreateOrConnectWithoutEmployerInput | JobCreateOrConnectWithoutEmployerInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutEmployerInput | JobUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: JobCreateManyEmployerInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutEmployerInput | JobUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: JobUpdateManyWithWhereWithoutEmployerInput | JobUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutEmployerNestedInput = {
    create?: XOR<NotificationCreateWithoutEmployerInput, NotificationUncheckedCreateWithoutEmployerInput> | NotificationCreateWithoutEmployerInput[] | NotificationUncheckedCreateWithoutEmployerInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutEmployerInput | NotificationCreateOrConnectWithoutEmployerInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutEmployerInput | NotificationUpsertWithWhereUniqueWithoutEmployerInput[]
    createMany?: NotificationCreateManyEmployerInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutEmployerInput | NotificationUpdateWithWhereUniqueWithoutEmployerInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutEmployerInput | NotificationUpdateManyWithWhereWithoutEmployerInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type EmployerCreateNestedOneWithoutJobsInput = {
    create?: XOR<EmployerCreateWithoutJobsInput, EmployerUncheckedCreateWithoutJobsInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutJobsInput
    connect?: EmployerWhereUniqueInput
  }

  export type ApplicationCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type JobCategoryCreateNestedManyWithoutJobsInput = {
    create?: XOR<JobCategoryCreateWithoutJobsInput, JobCategoryUncheckedCreateWithoutJobsInput> | JobCategoryCreateWithoutJobsInput[] | JobCategoryUncheckedCreateWithoutJobsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobsInput | JobCategoryCreateOrConnectWithoutJobsInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
  }

  export type JobRequirementCreateNestedManyWithoutJobInput = {
    create?: XOR<JobRequirementCreateWithoutJobInput, JobRequirementUncheckedCreateWithoutJobInput> | JobRequirementCreateWithoutJobInput[] | JobRequirementUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutJobInput | JobRequirementCreateOrConnectWithoutJobInput[]
    createMany?: JobRequirementCreateManyJobInputEnvelope
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
  }

  export type InterviewCreateNestedManyWithoutJobInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type ApplicationUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
  }

  export type JobCategoryUncheckedCreateNestedManyWithoutJobsInput = {
    create?: XOR<JobCategoryCreateWithoutJobsInput, JobCategoryUncheckedCreateWithoutJobsInput> | JobCategoryCreateWithoutJobsInput[] | JobCategoryUncheckedCreateWithoutJobsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobsInput | JobCategoryCreateOrConnectWithoutJobsInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
  }

  export type JobRequirementUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<JobRequirementCreateWithoutJobInput, JobRequirementUncheckedCreateWithoutJobInput> | JobRequirementCreateWithoutJobInput[] | JobRequirementUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutJobInput | JobRequirementCreateOrConnectWithoutJobInput[]
    createMany?: JobRequirementCreateManyJobInputEnvelope
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
  }

  export type InterviewUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type EmployerUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<EmployerCreateWithoutJobsInput, EmployerUncheckedCreateWithoutJobsInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutJobsInput
    upsert?: EmployerUpsertWithoutJobsInput
    connect?: EmployerWhereUniqueInput
    update?: XOR<XOR<EmployerUpdateToOneWithWhereWithoutJobsInput, EmployerUpdateWithoutJobsInput>, EmployerUncheckedUpdateWithoutJobsInput>
  }

  export type ApplicationUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInput | ApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInput | ApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInput | ApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type JobCategoryUpdateManyWithoutJobsNestedInput = {
    create?: XOR<JobCategoryCreateWithoutJobsInput, JobCategoryUncheckedCreateWithoutJobsInput> | JobCategoryCreateWithoutJobsInput[] | JobCategoryUncheckedCreateWithoutJobsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobsInput | JobCategoryCreateOrConnectWithoutJobsInput[]
    upsert?: JobCategoryUpsertWithWhereUniqueWithoutJobsInput | JobCategoryUpsertWithWhereUniqueWithoutJobsInput[]
    set?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    disconnect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    delete?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    update?: JobCategoryUpdateWithWhereUniqueWithoutJobsInput | JobCategoryUpdateWithWhereUniqueWithoutJobsInput[]
    updateMany?: JobCategoryUpdateManyWithWhereWithoutJobsInput | JobCategoryUpdateManyWithWhereWithoutJobsInput[]
    deleteMany?: JobCategoryScalarWhereInput | JobCategoryScalarWhereInput[]
  }

  export type JobRequirementUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobRequirementCreateWithoutJobInput, JobRequirementUncheckedCreateWithoutJobInput> | JobRequirementCreateWithoutJobInput[] | JobRequirementUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutJobInput | JobRequirementCreateOrConnectWithoutJobInput[]
    upsert?: JobRequirementUpsertWithWhereUniqueWithoutJobInput | JobRequirementUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobRequirementCreateManyJobInputEnvelope
    set?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    disconnect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    delete?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    update?: JobRequirementUpdateWithWhereUniqueWithoutJobInput | JobRequirementUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobRequirementUpdateManyWithWhereWithoutJobInput | JobRequirementUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobRequirementScalarWhereInput | JobRequirementScalarWhereInput[]
  }

  export type InterviewUpdateManyWithoutJobNestedInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutJobInput | InterviewUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutJobInput | InterviewUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutJobInput | InterviewUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type ApplicationUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput> | ApplicationCreateWithoutJobInput[] | ApplicationUncheckedCreateWithoutJobInput[]
    connectOrCreate?: ApplicationCreateOrConnectWithoutJobInput | ApplicationCreateOrConnectWithoutJobInput[]
    upsert?: ApplicationUpsertWithWhereUniqueWithoutJobInput | ApplicationUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: ApplicationCreateManyJobInputEnvelope
    set?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    disconnect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    delete?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    connect?: ApplicationWhereUniqueInput | ApplicationWhereUniqueInput[]
    update?: ApplicationUpdateWithWhereUniqueWithoutJobInput | ApplicationUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: ApplicationUpdateManyWithWhereWithoutJobInput | ApplicationUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
  }

  export type JobCategoryUncheckedUpdateManyWithoutJobsNestedInput = {
    create?: XOR<JobCategoryCreateWithoutJobsInput, JobCategoryUncheckedCreateWithoutJobsInput> | JobCategoryCreateWithoutJobsInput[] | JobCategoryUncheckedCreateWithoutJobsInput[]
    connectOrCreate?: JobCategoryCreateOrConnectWithoutJobsInput | JobCategoryCreateOrConnectWithoutJobsInput[]
    upsert?: JobCategoryUpsertWithWhereUniqueWithoutJobsInput | JobCategoryUpsertWithWhereUniqueWithoutJobsInput[]
    set?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    disconnect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    delete?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    connect?: JobCategoryWhereUniqueInput | JobCategoryWhereUniqueInput[]
    update?: JobCategoryUpdateWithWhereUniqueWithoutJobsInput | JobCategoryUpdateWithWhereUniqueWithoutJobsInput[]
    updateMany?: JobCategoryUpdateManyWithWhereWithoutJobsInput | JobCategoryUpdateManyWithWhereWithoutJobsInput[]
    deleteMany?: JobCategoryScalarWhereInput | JobCategoryScalarWhereInput[]
  }

  export type JobRequirementUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<JobRequirementCreateWithoutJobInput, JobRequirementUncheckedCreateWithoutJobInput> | JobRequirementCreateWithoutJobInput[] | JobRequirementUncheckedCreateWithoutJobInput[]
    connectOrCreate?: JobRequirementCreateOrConnectWithoutJobInput | JobRequirementCreateOrConnectWithoutJobInput[]
    upsert?: JobRequirementUpsertWithWhereUniqueWithoutJobInput | JobRequirementUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: JobRequirementCreateManyJobInputEnvelope
    set?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    disconnect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    delete?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    connect?: JobRequirementWhereUniqueInput | JobRequirementWhereUniqueInput[]
    update?: JobRequirementUpdateWithWhereUniqueWithoutJobInput | JobRequirementUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: JobRequirementUpdateManyWithWhereWithoutJobInput | JobRequirementUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: JobRequirementScalarWhereInput | JobRequirementScalarWhereInput[]
  }

  export type InterviewUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput> | InterviewCreateWithoutJobInput[] | InterviewUncheckedCreateWithoutJobInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutJobInput | InterviewCreateOrConnectWithoutJobInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutJobInput | InterviewUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: InterviewCreateManyJobInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutJobInput | InterviewUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutJobInput | InterviewUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutRequirementsInput = {
    create?: XOR<JobCreateWithoutRequirementsInput, JobUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: JobCreateOrConnectWithoutRequirementsInput
    connect?: JobWhereUniqueInput
  }

  export type SkillMasterCreateNestedOneWithoutJobRequirementsInput = {
    create?: XOR<SkillMasterCreateWithoutJobRequirementsInput, SkillMasterUncheckedCreateWithoutJobRequirementsInput>
    connectOrCreate?: SkillMasterCreateOrConnectWithoutJobRequirementsInput
    connect?: SkillMasterWhereUniqueInput
  }

  export type EnumImportanceLevelFieldUpdateOperationsInput = {
    set?: $Enums.ImportanceLevel
  }

  export type EnumProficiencyLevelFieldUpdateOperationsInput = {
    set?: $Enums.ProficiencyLevel
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type JobUpdateOneRequiredWithoutRequirementsNestedInput = {
    create?: XOR<JobCreateWithoutRequirementsInput, JobUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: JobCreateOrConnectWithoutRequirementsInput
    upsert?: JobUpsertWithoutRequirementsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutRequirementsInput, JobUpdateWithoutRequirementsInput>, JobUncheckedUpdateWithoutRequirementsInput>
  }

  export type SkillMasterUpdateOneRequiredWithoutJobRequirementsNestedInput = {
    create?: XOR<SkillMasterCreateWithoutJobRequirementsInput, SkillMasterUncheckedCreateWithoutJobRequirementsInput>
    connectOrCreate?: SkillMasterCreateOrConnectWithoutJobRequirementsInput
    upsert?: SkillMasterUpsertWithoutJobRequirementsInput
    connect?: SkillMasterWhereUniqueInput
    update?: XOR<XOR<SkillMasterUpdateToOneWithWhereWithoutJobRequirementsInput, SkillMasterUpdateWithoutJobRequirementsInput>, SkillMasterUncheckedUpdateWithoutJobRequirementsInput>
  }

  export type ApplicantCreateNestedOneWithoutSkillsInput = {
    create?: XOR<ApplicantCreateWithoutSkillsInput, ApplicantUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutSkillsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type SkillMasterCreateNestedOneWithoutApplicantSkillsInput = {
    create?: XOR<SkillMasterCreateWithoutApplicantSkillsInput, SkillMasterUncheckedCreateWithoutApplicantSkillsInput>
    connectOrCreate?: SkillMasterCreateOrConnectWithoutApplicantSkillsInput
    connect?: SkillMasterWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutSkillsNestedInput = {
    create?: XOR<ApplicantCreateWithoutSkillsInput, ApplicantUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutSkillsInput
    upsert?: ApplicantUpsertWithoutSkillsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutSkillsInput, ApplicantUpdateWithoutSkillsInput>, ApplicantUncheckedUpdateWithoutSkillsInput>
  }

  export type SkillMasterUpdateOneRequiredWithoutApplicantSkillsNestedInput = {
    create?: XOR<SkillMasterCreateWithoutApplicantSkillsInput, SkillMasterUncheckedCreateWithoutApplicantSkillsInput>
    connectOrCreate?: SkillMasterCreateOrConnectWithoutApplicantSkillsInput
    upsert?: SkillMasterUpsertWithoutApplicantSkillsInput
    connect?: SkillMasterWhereUniqueInput
    update?: XOR<XOR<SkillMasterUpdateToOneWithWhereWithoutApplicantSkillsInput, SkillMasterUpdateWithoutApplicantSkillsInput>, SkillMasterUncheckedUpdateWithoutApplicantSkillsInput>
  }

  export type JobCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    connect?: JobWhereUniqueInput
  }

  export type ApplicantCreateNestedOneWithoutApplicationsInput = {
    create?: XOR<ApplicantCreateWithoutApplicationsInput, ApplicantUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutApplicationsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type NotificationCreateNestedManyWithoutApplicationInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type InterviewCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type EmailLogCreateNestedManyWithoutApplicationInput = {
    create?: XOR<EmailLogCreateWithoutApplicationInput, EmailLogUncheckedCreateWithoutApplicationInput> | EmailLogCreateWithoutApplicationInput[] | EmailLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutApplicationInput | EmailLogCreateOrConnectWithoutApplicationInput[]
    createMany?: EmailLogCreateManyApplicationInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type InterviewUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
  }

  export type EmailLogUncheckedCreateNestedManyWithoutApplicationInput = {
    create?: XOR<EmailLogCreateWithoutApplicationInput, EmailLogUncheckedCreateWithoutApplicationInput> | EmailLogCreateWithoutApplicationInput[] | EmailLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutApplicationInput | EmailLogCreateOrConnectWithoutApplicationInput[]
    createMany?: EmailLogCreateManyApplicationInputEnvelope
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
  }

  export type EnumApplicationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApplicationStatus
  }

  export type JobUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: JobCreateOrConnectWithoutApplicationsInput
    upsert?: JobUpsertWithoutApplicationsInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutApplicationsInput, JobUpdateWithoutApplicationsInput>, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type ApplicantUpdateOneRequiredWithoutApplicationsNestedInput = {
    create?: XOR<ApplicantCreateWithoutApplicationsInput, ApplicantUncheckedCreateWithoutApplicationsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutApplicationsInput
    upsert?: ApplicantUpsertWithoutApplicationsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutApplicationsInput, ApplicantUpdateWithoutApplicationsInput>, ApplicantUncheckedUpdateWithoutApplicationsInput>
  }

  export type NotificationUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutApplicationInput | NotificationUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutApplicationInput | NotificationUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutApplicationInput | NotificationUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type InterviewUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutApplicationInput | InterviewUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutApplicationInput | InterviewUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutApplicationInput | InterviewUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type EmailLogUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<EmailLogCreateWithoutApplicationInput, EmailLogUncheckedCreateWithoutApplicationInput> | EmailLogCreateWithoutApplicationInput[] | EmailLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutApplicationInput | EmailLogCreateOrConnectWithoutApplicationInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutApplicationInput | EmailLogUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: EmailLogCreateManyApplicationInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutApplicationInput | EmailLogUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutApplicationInput | EmailLogUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput> | NotificationCreateWithoutApplicationInput[] | NotificationUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutApplicationInput | NotificationCreateOrConnectWithoutApplicationInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutApplicationInput | NotificationUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: NotificationCreateManyApplicationInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutApplicationInput | NotificationUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutApplicationInput | NotificationUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type InterviewUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput> | InterviewCreateWithoutApplicationInput[] | InterviewUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: InterviewCreateOrConnectWithoutApplicationInput | InterviewCreateOrConnectWithoutApplicationInput[]
    upsert?: InterviewUpsertWithWhereUniqueWithoutApplicationInput | InterviewUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: InterviewCreateManyApplicationInputEnvelope
    set?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    disconnect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    delete?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    connect?: InterviewWhereUniqueInput | InterviewWhereUniqueInput[]
    update?: InterviewUpdateWithWhereUniqueWithoutApplicationInput | InterviewUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: InterviewUpdateManyWithWhereWithoutApplicationInput | InterviewUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
  }

  export type EmailLogUncheckedUpdateManyWithoutApplicationNestedInput = {
    create?: XOR<EmailLogCreateWithoutApplicationInput, EmailLogUncheckedCreateWithoutApplicationInput> | EmailLogCreateWithoutApplicationInput[] | EmailLogUncheckedCreateWithoutApplicationInput[]
    connectOrCreate?: EmailLogCreateOrConnectWithoutApplicationInput | EmailLogCreateOrConnectWithoutApplicationInput[]
    upsert?: EmailLogUpsertWithWhereUniqueWithoutApplicationInput | EmailLogUpsertWithWhereUniqueWithoutApplicationInput[]
    createMany?: EmailLogCreateManyApplicationInputEnvelope
    set?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    disconnect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    delete?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    connect?: EmailLogWhereUniqueInput | EmailLogWhereUniqueInput[]
    update?: EmailLogUpdateWithWhereUniqueWithoutApplicationInput | EmailLogUpdateWithWhereUniqueWithoutApplicationInput[]
    updateMany?: EmailLogUpdateManyWithWhereWithoutApplicationInput | EmailLogUpdateManyWithWhereWithoutApplicationInput[]
    deleteMany?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
  }

  export type ApplicantCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ApplicantCreateWithoutNotificationsInput, ApplicantUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutNotificationsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type EmployerCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<EmployerCreateWithoutNotificationsInput, EmployerUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutNotificationsInput
    connect?: EmployerWhereUniqueInput
  }

  export type ApplicationCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutNotificationsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type ApplicantUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ApplicantCreateWithoutNotificationsInput, ApplicantUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutNotificationsInput
    upsert?: ApplicantUpsertWithoutNotificationsInput
    disconnect?: ApplicantWhereInput | boolean
    delete?: ApplicantWhereInput | boolean
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutNotificationsInput, ApplicantUpdateWithoutNotificationsInput>, ApplicantUncheckedUpdateWithoutNotificationsInput>
  }

  export type EmployerUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<EmployerCreateWithoutNotificationsInput, EmployerUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: EmployerCreateOrConnectWithoutNotificationsInput
    upsert?: EmployerUpsertWithoutNotificationsInput
    disconnect?: EmployerWhereInput | boolean
    delete?: EmployerWhereInput | boolean
    connect?: EmployerWhereUniqueInput
    update?: XOR<XOR<EmployerUpdateToOneWithWhereWithoutNotificationsInput, EmployerUpdateWithoutNotificationsInput>, EmployerUncheckedUpdateWithoutNotificationsInput>
  }

  export type ApplicationUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutNotificationsInput
    upsert?: ApplicationUpsertWithoutNotificationsInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutNotificationsInput, ApplicationUpdateWithoutNotificationsInput>, ApplicationUncheckedUpdateWithoutNotificationsInput>
  }

  export type ApplicantCreateNestedOneWithoutQualificationsInput = {
    create?: XOR<ApplicantCreateWithoutQualificationsInput, ApplicantUncheckedCreateWithoutQualificationsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutQualificationsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type CountryCreateNestedOneWithoutQualificationsInput = {
    create?: XOR<CountryCreateWithoutQualificationsInput, CountryUncheckedCreateWithoutQualificationsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutQualificationsInput
    connect?: CountryWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutQualificationsNestedInput = {
    create?: XOR<ApplicantCreateWithoutQualificationsInput, ApplicantUncheckedCreateWithoutQualificationsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutQualificationsInput
    upsert?: ApplicantUpsertWithoutQualificationsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutQualificationsInput, ApplicantUpdateWithoutQualificationsInput>, ApplicantUncheckedUpdateWithoutQualificationsInput>
  }

  export type CountryUpdateOneRequiredWithoutQualificationsNestedInput = {
    create?: XOR<CountryCreateWithoutQualificationsInput, CountryUncheckedCreateWithoutQualificationsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutQualificationsInput
    upsert?: CountryUpsertWithoutQualificationsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutQualificationsInput, CountryUpdateWithoutQualificationsInput>, CountryUncheckedUpdateWithoutQualificationsInput>
  }

  export type ApplicantCreateNestedOneWithoutExperiencesInput = {
    create?: XOR<ApplicantCreateWithoutExperiencesInput, ApplicantUncheckedCreateWithoutExperiencesInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutExperiencesInput
    connect?: ApplicantWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutExperiencesNestedInput = {
    create?: XOR<ApplicantCreateWithoutExperiencesInput, ApplicantUncheckedCreateWithoutExperiencesInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutExperiencesInput
    upsert?: ApplicantUpsertWithoutExperiencesInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutExperiencesInput, ApplicantUpdateWithoutExperiencesInput>, ApplicantUncheckedUpdateWithoutExperiencesInput>
  }

  export type ApplicantCreateNestedOneWithoutLanguagesInput = {
    create?: XOR<ApplicantCreateWithoutLanguagesInput, ApplicantUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutLanguagesInput
    connect?: ApplicantWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutLanguagesNestedInput = {
    create?: XOR<ApplicantCreateWithoutLanguagesInput, ApplicantUncheckedCreateWithoutLanguagesInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutLanguagesInput
    upsert?: ApplicantUpsertWithoutLanguagesInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutLanguagesInput, ApplicantUpdateWithoutLanguagesInput>, ApplicantUncheckedUpdateWithoutLanguagesInput>
  }

  export type ApplicantCreateNestedOneWithoutComputerSkillsInput = {
    create?: XOR<ApplicantCreateWithoutComputerSkillsInput, ApplicantUncheckedCreateWithoutComputerSkillsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutComputerSkillsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutComputerSkillsNestedInput = {
    create?: XOR<ApplicantCreateWithoutComputerSkillsInput, ApplicantUncheckedCreateWithoutComputerSkillsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutComputerSkillsInput
    upsert?: ApplicantUpsertWithoutComputerSkillsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutComputerSkillsInput, ApplicantUpdateWithoutComputerSkillsInput>, ApplicantUncheckedUpdateWithoutComputerSkillsInput>
  }

  export type ApplicantCreateNestedOneWithoutGeneralSkillsInput = {
    create?: XOR<ApplicantCreateWithoutGeneralSkillsInput, ApplicantUncheckedCreateWithoutGeneralSkillsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutGeneralSkillsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutGeneralSkillsNestedInput = {
    create?: XOR<ApplicantCreateWithoutGeneralSkillsInput, ApplicantUncheckedCreateWithoutGeneralSkillsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutGeneralSkillsInput
    upsert?: ApplicantUpsertWithoutGeneralSkillsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutGeneralSkillsInput, ApplicantUpdateWithoutGeneralSkillsInput>, ApplicantUncheckedUpdateWithoutGeneralSkillsInput>
  }

  export type SkillMasterCreateNestedOneWithoutSkillDemandsInput = {
    create?: XOR<SkillMasterCreateWithoutSkillDemandsInput, SkillMasterUncheckedCreateWithoutSkillDemandsInput>
    connectOrCreate?: SkillMasterCreateOrConnectWithoutSkillDemandsInput
    connect?: SkillMasterWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SkillMasterUpdateOneRequiredWithoutSkillDemandsNestedInput = {
    create?: XOR<SkillMasterCreateWithoutSkillDemandsInput, SkillMasterUncheckedCreateWithoutSkillDemandsInput>
    connectOrCreate?: SkillMasterCreateOrConnectWithoutSkillDemandsInput
    upsert?: SkillMasterUpsertWithoutSkillDemandsInput
    connect?: SkillMasterWhereUniqueInput
    update?: XOR<XOR<SkillMasterUpdateToOneWithWhereWithoutSkillDemandsInput, SkillMasterUpdateWithoutSkillDemandsInput>, SkillMasterUncheckedUpdateWithoutSkillDemandsInput>
  }

  export type UserCreateNestedOneWithoutChatRoomsInput = {
    create?: XOR<UserCreateWithoutChatRoomsInput, UserUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatRoomsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAgentChatsInput = {
    create?: XOR<UserCreateWithoutAgentChatsInput, UserUncheckedCreateWithoutAgentChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgentChatsInput
    connect?: UserWhereUniqueInput
  }

  export type ChatMessageCreateNestedManyWithoutRoomInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type ChatMessageUncheckedCreateNestedManyWithoutRoomInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutChatRoomsNestedInput = {
    create?: XOR<UserCreateWithoutChatRoomsInput, UserUncheckedCreateWithoutChatRoomsInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatRoomsInput
    upsert?: UserUpsertWithoutChatRoomsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatRoomsInput, UserUpdateWithoutChatRoomsInput>, UserUncheckedUpdateWithoutChatRoomsInput>
  }

  export type UserUpdateOneWithoutAgentChatsNestedInput = {
    create?: XOR<UserCreateWithoutAgentChatsInput, UserUncheckedCreateWithoutAgentChatsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAgentChatsInput
    upsert?: UserUpsertWithoutAgentChatsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAgentChatsInput, UserUpdateWithoutAgentChatsInput>, UserUncheckedUpdateWithoutAgentChatsInput>
  }

  export type ChatMessageUpdateManyWithoutRoomNestedInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutRoomInput | ChatMessageUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutRoomInput | ChatMessageUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutRoomInput | ChatMessageUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatMessageUncheckedUpdateManyWithoutRoomNestedInput = {
    create?: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput> | ChatMessageCreateWithoutRoomInput[] | ChatMessageUncheckedCreateWithoutRoomInput[]
    connectOrCreate?: ChatMessageCreateOrConnectWithoutRoomInput | ChatMessageCreateOrConnectWithoutRoomInput[]
    upsert?: ChatMessageUpsertWithWhereUniqueWithoutRoomInput | ChatMessageUpsertWithWhereUniqueWithoutRoomInput[]
    createMany?: ChatMessageCreateManyRoomInputEnvelope
    set?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    disconnect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    delete?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    connect?: ChatMessageWhereUniqueInput | ChatMessageWhereUniqueInput[]
    update?: ChatMessageUpdateWithWhereUniqueWithoutRoomInput | ChatMessageUpdateWithWhereUniqueWithoutRoomInput[]
    updateMany?: ChatMessageUpdateManyWithWhereWithoutRoomInput | ChatMessageUpdateManyWithWhereWithoutRoomInput[]
    deleteMany?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
  }

  export type ChatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutChatMessagesInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    connect?: UserWhereUniqueInput
  }

  export type ChatRoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ChatRoomCreateOrConnectWithoutMessagesInput
    upsert?: ChatRoomUpsertWithoutMessagesInput
    connect?: ChatRoomWhereUniqueInput
    update?: XOR<XOR<ChatRoomUpdateToOneWithWhereWithoutMessagesInput, ChatRoomUpdateWithoutMessagesInput>, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type UserUpdateOneWithoutChatMessagesNestedInput = {
    create?: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    connectOrCreate?: UserCreateOrConnectWithoutChatMessagesInput
    upsert?: UserUpsertWithoutChatMessagesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutChatMessagesInput, UserUpdateWithoutChatMessagesInput>, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type ApplicantCreateNestedOneWithoutNotificationSettingsInput = {
    create?: XOR<ApplicantCreateWithoutNotificationSettingsInput, ApplicantUncheckedCreateWithoutNotificationSettingsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutNotificationSettingsInput
    connect?: ApplicantWhereUniqueInput
  }

  export type ApplicantUpdateOneRequiredWithoutNotificationSettingsNestedInput = {
    create?: XOR<ApplicantCreateWithoutNotificationSettingsInput, ApplicantUncheckedCreateWithoutNotificationSettingsInput>
    connectOrCreate?: ApplicantCreateOrConnectWithoutNotificationSettingsInput
    upsert?: ApplicantUpsertWithoutNotificationSettingsInput
    connect?: ApplicantWhereUniqueInput
    update?: XOR<XOR<ApplicantUpdateToOneWithWhereWithoutNotificationSettingsInput, ApplicantUpdateWithoutNotificationSettingsInput>, ApplicantUncheckedUpdateWithoutNotificationSettingsInput>
  }

  export type UserCreateNestedOneWithoutConsentsInput = {
    create?: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsentsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutConsentsNestedInput = {
    create?: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutConsentsInput
    upsert?: UserUpsertWithoutConsentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutConsentsInput, UserUpdateWithoutConsentsInput>, UserUncheckedUpdateWithoutConsentsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ApplicationCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInterviewsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type JobCreateNestedOneWithoutInterviewsInput = {
    create?: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: JobCreateOrConnectWithoutInterviewsInput
    connect?: JobWhereUniqueInput
  }

  export type ApplicationUpdateOneRequiredWithoutInterviewsNestedInput = {
    create?: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutInterviewsInput
    upsert?: ApplicationUpsertWithoutInterviewsInput
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutInterviewsInput, ApplicationUpdateWithoutInterviewsInput>, ApplicationUncheckedUpdateWithoutInterviewsInput>
  }

  export type JobUpdateOneWithoutInterviewsNestedInput = {
    create?: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
    connectOrCreate?: JobCreateOrConnectWithoutInterviewsInput
    upsert?: JobUpsertWithoutInterviewsInput
    disconnect?: JobWhereInput | boolean
    delete?: JobWhereInput | boolean
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutInterviewsInput, JobUpdateWithoutInterviewsInput>, JobUncheckedUpdateWithoutInterviewsInput>
  }

  export type ApplicationCreateNestedOneWithoutEmailLogsInput = {
    create?: XOR<ApplicationCreateWithoutEmailLogsInput, ApplicationUncheckedCreateWithoutEmailLogsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutEmailLogsInput
    connect?: ApplicationWhereUniqueInput
  }

  export type ApplicationUpdateOneWithoutEmailLogsNestedInput = {
    create?: XOR<ApplicationCreateWithoutEmailLogsInput, ApplicationUncheckedCreateWithoutEmailLogsInput>
    connectOrCreate?: ApplicationCreateOrConnectWithoutEmailLogsInput
    upsert?: ApplicationUpsertWithoutEmailLogsInput
    disconnect?: ApplicationWhereInput | boolean
    delete?: ApplicationWhereInput | boolean
    connect?: ApplicationWhereUniqueInput
    update?: XOR<XOR<ApplicationUpdateToOneWithWhereWithoutEmailLogsInput, ApplicationUpdateWithoutEmailLogsInput>, ApplicationUncheckedUpdateWithoutEmailLogsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[]
    notIn?: $Enums.JobStatus[]
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[]
    notIn?: $Enums.JobStatus[]
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumImportanceLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportanceLevel | EnumImportanceLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImportanceLevel[]
    notIn?: $Enums.ImportanceLevel[]
    not?: NestedEnumImportanceLevelFilter<$PrismaModel> | $Enums.ImportanceLevel
  }

  export type NestedEnumProficiencyLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.ProficiencyLevel | EnumProficiencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProficiencyLevel[]
    notIn?: $Enums.ProficiencyLevel[]
    not?: NestedEnumProficiencyLevelFilter<$PrismaModel> | $Enums.ProficiencyLevel
  }

  export type NestedEnumImportanceLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ImportanceLevel | EnumImportanceLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ImportanceLevel[]
    notIn?: $Enums.ImportanceLevel[]
    not?: NestedEnumImportanceLevelWithAggregatesFilter<$PrismaModel> | $Enums.ImportanceLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumImportanceLevelFilter<$PrismaModel>
    _max?: NestedEnumImportanceLevelFilter<$PrismaModel>
  }

  export type NestedEnumProficiencyLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProficiencyLevel | EnumProficiencyLevelFieldRefInput<$PrismaModel>
    in?: $Enums.ProficiencyLevel[]
    notIn?: $Enums.ProficiencyLevel[]
    not?: NestedEnumProficiencyLevelWithAggregatesFilter<$PrismaModel> | $Enums.ProficiencyLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProficiencyLevelFilter<$PrismaModel>
    _max?: NestedEnumProficiencyLevelFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumApplicationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[]
    notIn?: $Enums.ApplicationStatus[]
    not?: NestedEnumApplicationStatusFilter<$PrismaModel> | $Enums.ApplicationStatus
  }

  export type NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApplicationStatus | EnumApplicationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApplicationStatus[]
    notIn?: $Enums.ApplicationStatus[]
    not?: NestedEnumApplicationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApplicationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApplicationStatusFilter<$PrismaModel>
    _max?: NestedEnumApplicationStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[]
    notIn?: $Enums.NotificationType[]
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ApplicantCreateWithoutCategoriesInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutCategoriesInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutCategoriesInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutCategoriesInput, ApplicantUncheckedCreateWithoutCategoriesInput>
  }

  export type JobCreateWithoutCategoriesInput = {
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    requirements?: JobRequirementCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutCategoriesInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    employerId: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    requirements?: JobRequirementUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutCategoriesInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutCategoriesInput, JobUncheckedCreateWithoutCategoriesInput>
  }

  export type ApplicantUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: ApplicantWhereUniqueInput
    update: XOR<ApplicantUpdateWithoutCategoriesInput, ApplicantUncheckedUpdateWithoutCategoriesInput>
    create: XOR<ApplicantCreateWithoutCategoriesInput, ApplicantUncheckedCreateWithoutCategoriesInput>
  }

  export type ApplicantUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: ApplicantWhereUniqueInput
    data: XOR<ApplicantUpdateWithoutCategoriesInput, ApplicantUncheckedUpdateWithoutCategoriesInput>
  }

  export type ApplicantUpdateManyWithWhereWithoutCategoriesInput = {
    where: ApplicantScalarWhereInput
    data: XOR<ApplicantUpdateManyMutationInput, ApplicantUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type ApplicantScalarWhereInput = {
    AND?: ApplicantScalarWhereInput | ApplicantScalarWhereInput[]
    OR?: ApplicantScalarWhereInput[]
    NOT?: ApplicantScalarWhereInput | ApplicantScalarWhereInput[]
    id?: IntFilter<"Applicant"> | number
    fullName?: StringFilter<"Applicant"> | string
    nida?: StringFilter<"Applicant"> | string
    phone?: StringNullableFilter<"Applicant"> | string | null
    address?: StringNullableFilter<"Applicant"> | string | null
    dateOfBirth?: DateTimeNullableFilter<"Applicant"> | Date | string | null
    gender?: StringNullableFilter<"Applicant"> | string | null
    userId?: IntFilter<"Applicant"> | number
    profileCompleted?: BoolFilter<"Applicant"> | boolean
    createdAt?: DateTimeFilter<"Applicant"> | Date | string
    updatedAt?: DateTimeFilter<"Applicant"> | Date | string
  }

  export type JobUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutCategoriesInput, JobUncheckedUpdateWithoutCategoriesInput>
    create: XOR<JobCreateWithoutCategoriesInput, JobUncheckedCreateWithoutCategoriesInput>
  }

  export type JobUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutCategoriesInput, JobUncheckedUpdateWithoutCategoriesInput>
  }

  export type JobUpdateManyWithWhereWithoutCategoriesInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: IntFilter<"Job"> | number
    title?: StringFilter<"Job"> | string
    description?: StringFilter<"Job"> | string
    location?: StringNullableFilter<"Job"> | string | null
    salaryMin?: DecimalNullableFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    salaryMax?: DecimalNullableFilter<"Job"> | Decimal | DecimalJsLike | number | string | null
    currency?: StringNullableFilter<"Job"> | string | null
    employmentType?: StringNullableFilter<"Job"> | string | null
    experienceLevel?: StringNullableFilter<"Job"> | string | null
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    applicationCount?: IntFilter<"Job"> | number
    viewCount?: IntFilter<"Job"> | number
    employerId?: IntFilter<"Job"> | number
    expiresAt?: DateTimeNullableFilter<"Job"> | Date | string | null
    createdAt?: DateTimeFilter<"Job"> | Date | string
    updatedAt?: DateTimeFilter<"Job"> | Date | string
  }

  export type JobRequirementCreateWithoutSkillMasterInput = {
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutRequirementsInput
  }

  export type JobRequirementUncheckedCreateWithoutSkillMasterInput = {
    id?: number
    jobId: number
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobRequirementCreateOrConnectWithoutSkillMasterInput = {
    where: JobRequirementWhereUniqueInput
    create: XOR<JobRequirementCreateWithoutSkillMasterInput, JobRequirementUncheckedCreateWithoutSkillMasterInput>
  }

  export type JobRequirementCreateManySkillMasterInputEnvelope = {
    data: JobRequirementCreateManySkillMasterInput | JobRequirementCreateManySkillMasterInput[]
    skipDuplicates?: boolean
  }

  export type ApplicantSkillCreateWithoutSkillMasterInput = {
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutSkillsInput
  }

  export type ApplicantSkillUncheckedCreateWithoutSkillMasterInput = {
    id?: number
    applicantId: number
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicantSkillCreateOrConnectWithoutSkillMasterInput = {
    where: ApplicantSkillWhereUniqueInput
    create: XOR<ApplicantSkillCreateWithoutSkillMasterInput, ApplicantSkillUncheckedCreateWithoutSkillMasterInput>
  }

  export type ApplicantSkillCreateManySkillMasterInputEnvelope = {
    data: ApplicantSkillCreateManySkillMasterInput | ApplicantSkillCreateManySkillMasterInput[]
    skipDuplicates?: boolean
  }

  export type SkillDemandCreateWithoutSkillMasterInput = {
    demandScore: number
    growth: number
    industry?: string | null
    region?: string | null
    period: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type SkillDemandUncheckedCreateWithoutSkillMasterInput = {
    id?: number
    demandScore: number
    growth: number
    industry?: string | null
    region?: string | null
    period: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type SkillDemandCreateOrConnectWithoutSkillMasterInput = {
    where: SkillDemandWhereUniqueInput
    create: XOR<SkillDemandCreateWithoutSkillMasterInput, SkillDemandUncheckedCreateWithoutSkillMasterInput>
  }

  export type SkillDemandCreateManySkillMasterInputEnvelope = {
    data: SkillDemandCreateManySkillMasterInput | SkillDemandCreateManySkillMasterInput[]
    skipDuplicates?: boolean
  }

  export type JobRequirementUpsertWithWhereUniqueWithoutSkillMasterInput = {
    where: JobRequirementWhereUniqueInput
    update: XOR<JobRequirementUpdateWithoutSkillMasterInput, JobRequirementUncheckedUpdateWithoutSkillMasterInput>
    create: XOR<JobRequirementCreateWithoutSkillMasterInput, JobRequirementUncheckedCreateWithoutSkillMasterInput>
  }

  export type JobRequirementUpdateWithWhereUniqueWithoutSkillMasterInput = {
    where: JobRequirementWhereUniqueInput
    data: XOR<JobRequirementUpdateWithoutSkillMasterInput, JobRequirementUncheckedUpdateWithoutSkillMasterInput>
  }

  export type JobRequirementUpdateManyWithWhereWithoutSkillMasterInput = {
    where: JobRequirementScalarWhereInput
    data: XOR<JobRequirementUpdateManyMutationInput, JobRequirementUncheckedUpdateManyWithoutSkillMasterInput>
  }

  export type JobRequirementScalarWhereInput = {
    AND?: JobRequirementScalarWhereInput | JobRequirementScalarWhereInput[]
    OR?: JobRequirementScalarWhereInput[]
    NOT?: JobRequirementScalarWhereInput | JobRequirementScalarWhereInput[]
    id?: IntFilter<"JobRequirement"> | number
    jobId?: IntFilter<"JobRequirement"> | number
    skillMasterId?: IntFilter<"JobRequirement"> | number
    importance?: EnumImportanceLevelFilter<"JobRequirement"> | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFilter<"JobRequirement"> | $Enums.ProficiencyLevel
    yearsRequired?: IntNullableFilter<"JobRequirement"> | number | null
    description?: StringNullableFilter<"JobRequirement"> | string | null
    createdAt?: DateTimeFilter<"JobRequirement"> | Date | string
    updatedAt?: DateTimeFilter<"JobRequirement"> | Date | string
  }

  export type ApplicantSkillUpsertWithWhereUniqueWithoutSkillMasterInput = {
    where: ApplicantSkillWhereUniqueInput
    update: XOR<ApplicantSkillUpdateWithoutSkillMasterInput, ApplicantSkillUncheckedUpdateWithoutSkillMasterInput>
    create: XOR<ApplicantSkillCreateWithoutSkillMasterInput, ApplicantSkillUncheckedCreateWithoutSkillMasterInput>
  }

  export type ApplicantSkillUpdateWithWhereUniqueWithoutSkillMasterInput = {
    where: ApplicantSkillWhereUniqueInput
    data: XOR<ApplicantSkillUpdateWithoutSkillMasterInput, ApplicantSkillUncheckedUpdateWithoutSkillMasterInput>
  }

  export type ApplicantSkillUpdateManyWithWhereWithoutSkillMasterInput = {
    where: ApplicantSkillScalarWhereInput
    data: XOR<ApplicantSkillUpdateManyMutationInput, ApplicantSkillUncheckedUpdateManyWithoutSkillMasterInput>
  }

  export type ApplicantSkillScalarWhereInput = {
    AND?: ApplicantSkillScalarWhereInput | ApplicantSkillScalarWhereInput[]
    OR?: ApplicantSkillScalarWhereInput[]
    NOT?: ApplicantSkillScalarWhereInput | ApplicantSkillScalarWhereInput[]
    id?: IntFilter<"ApplicantSkill"> | number
    applicantId?: IntFilter<"ApplicantSkill"> | number
    skillMasterId?: IntFilter<"ApplicantSkill"> | number
    proficiency?: EnumProficiencyLevelFilter<"ApplicantSkill"> | $Enums.ProficiencyLevel
    yearsExperience?: IntNullableFilter<"ApplicantSkill"> | number | null
    lastUsed?: DateTimeNullableFilter<"ApplicantSkill"> | Date | string | null
    isCertified?: BoolFilter<"ApplicantSkill"> | boolean
    certificationName?: StringNullableFilter<"ApplicantSkill"> | string | null
    createdAt?: DateTimeFilter<"ApplicantSkill"> | Date | string
    updatedAt?: DateTimeFilter<"ApplicantSkill"> | Date | string
  }

  export type SkillDemandUpsertWithWhereUniqueWithoutSkillMasterInput = {
    where: SkillDemandWhereUniqueInput
    update: XOR<SkillDemandUpdateWithoutSkillMasterInput, SkillDemandUncheckedUpdateWithoutSkillMasterInput>
    create: XOR<SkillDemandCreateWithoutSkillMasterInput, SkillDemandUncheckedCreateWithoutSkillMasterInput>
  }

  export type SkillDemandUpdateWithWhereUniqueWithoutSkillMasterInput = {
    where: SkillDemandWhereUniqueInput
    data: XOR<SkillDemandUpdateWithoutSkillMasterInput, SkillDemandUncheckedUpdateWithoutSkillMasterInput>
  }

  export type SkillDemandUpdateManyWithWhereWithoutSkillMasterInput = {
    where: SkillDemandScalarWhereInput
    data: XOR<SkillDemandUpdateManyMutationInput, SkillDemandUncheckedUpdateManyWithoutSkillMasterInput>
  }

  export type SkillDemandScalarWhereInput = {
    AND?: SkillDemandScalarWhereInput | SkillDemandScalarWhereInput[]
    OR?: SkillDemandScalarWhereInput[]
    NOT?: SkillDemandScalarWhereInput | SkillDemandScalarWhereInput[]
    id?: IntFilter<"SkillDemand"> | number
    skillMasterId?: IntFilter<"SkillDemand"> | number
    demandScore?: FloatFilter<"SkillDemand"> | number
    growth?: FloatFilter<"SkillDemand"> | number
    industry?: StringNullableFilter<"SkillDemand"> | string | null
    region?: StringNullableFilter<"SkillDemand"> | string | null
    period?: DateTimeFilter<"SkillDemand"> | Date | string
    source?: StringNullableFilter<"SkillDemand"> | string | null
    createdAt?: DateTimeFilter<"SkillDemand"> | Date | string
  }

  export type AcademicQualificationCreateWithoutCountryInput = {
    level: string
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutQualificationsInput
  }

  export type AcademicQualificationUncheckedCreateWithoutCountryInput = {
    id?: number
    level: string
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicQualificationCreateOrConnectWithoutCountryInput = {
    where: AcademicQualificationWhereUniqueInput
    create: XOR<AcademicQualificationCreateWithoutCountryInput, AcademicQualificationUncheckedCreateWithoutCountryInput>
  }

  export type AcademicQualificationCreateManyCountryInputEnvelope = {
    data: AcademicQualificationCreateManyCountryInput | AcademicQualificationCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type AcademicQualificationUpsertWithWhereUniqueWithoutCountryInput = {
    where: AcademicQualificationWhereUniqueInput
    update: XOR<AcademicQualificationUpdateWithoutCountryInput, AcademicQualificationUncheckedUpdateWithoutCountryInput>
    create: XOR<AcademicQualificationCreateWithoutCountryInput, AcademicQualificationUncheckedCreateWithoutCountryInput>
  }

  export type AcademicQualificationUpdateWithWhereUniqueWithoutCountryInput = {
    where: AcademicQualificationWhereUniqueInput
    data: XOR<AcademicQualificationUpdateWithoutCountryInput, AcademicQualificationUncheckedUpdateWithoutCountryInput>
  }

  export type AcademicQualificationUpdateManyWithWhereWithoutCountryInput = {
    where: AcademicQualificationScalarWhereInput
    data: XOR<AcademicQualificationUpdateManyMutationInput, AcademicQualificationUncheckedUpdateManyWithoutCountryInput>
  }

  export type AcademicQualificationScalarWhereInput = {
    AND?: AcademicQualificationScalarWhereInput | AcademicQualificationScalarWhereInput[]
    OR?: AcademicQualificationScalarWhereInput[]
    NOT?: AcademicQualificationScalarWhereInput | AcademicQualificationScalarWhereInput[]
    id?: IntFilter<"AcademicQualification"> | number
    level?: StringFilter<"AcademicQualification"> | string
    countryId?: IntFilter<"AcademicQualification"> | number
    institution?: StringFilter<"AcademicQualification"> | string
    fieldOfStudy?: StringFilter<"AcademicQualification"> | string
    grade?: StringNullableFilter<"AcademicQualification"> | string | null
    startDate?: DateTimeFilter<"AcademicQualification"> | Date | string
    endDate?: DateTimeNullableFilter<"AcademicQualification"> | Date | string | null
    isCompleted?: BoolFilter<"AcademicQualification"> | boolean
    certificateUrl?: StringNullableFilter<"AcademicQualification"> | string | null
    applicantId?: IntFilter<"AcademicQualification"> | number
    createdAt?: DateTimeFilter<"AcademicQualification"> | Date | string
    updatedAt?: DateTimeFilter<"AcademicQualification"> | Date | string
  }

  export type ApplicantCreateWithoutUserInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutUserInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutUserInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
  }

  export type EmployerCreateWithoutUserInput = {
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobCreateNestedManyWithoutEmployerInput
    notifications?: NotificationCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUncheckedCreateWithoutUserInput = {
    id?: number
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutEmployerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type EmployerCreateOrConnectWithoutUserInput = {
    where: EmployerWhereUniqueInput
    create: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
  }

  export type ChatRoomCreateWithoutUserInput = {
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    agent?: UserCreateNestedOneWithoutAgentChatsInput
    messages?: ChatMessageCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutUserInput = {
    id?: number
    agentId?: number | null
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    messages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutUserInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutUserInput, ChatRoomUncheckedCreateWithoutUserInput>
  }

  export type ChatRoomCreateManyUserInputEnvelope = {
    data: ChatRoomCreateManyUserInput | ChatRoomCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatRoomCreateWithoutAgentInput = {
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    user: UserCreateNestedOneWithoutChatRoomsInput
    messages?: ChatMessageCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomUncheckedCreateWithoutAgentInput = {
    id?: number
    userId: number
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    messages?: ChatMessageUncheckedCreateNestedManyWithoutRoomInput
  }

  export type ChatRoomCreateOrConnectWithoutAgentInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutAgentInput, ChatRoomUncheckedCreateWithoutAgentInput>
  }

  export type ChatRoomCreateManyAgentInputEnvelope = {
    data: ChatRoomCreateManyAgentInput | ChatRoomCreateManyAgentInput[]
    skipDuplicates?: boolean
  }

  export type ChatMessageCreateWithoutSenderInput = {
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
    room: ChatRoomCreateNestedOneWithoutMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutSenderInput = {
    id?: number
    roomId: number
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutSenderInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type ChatMessageCreateManySenderInputEnvelope = {
    data: ChatMessageCreateManySenderInput | ChatMessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type UserConsentCreateWithoutUserInput = {
    consentType: string
    granted: boolean
    grantedAt?: Date | string | null
    revokedAt?: Date | string | null
    purpose?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserConsentUncheckedCreateWithoutUserInput = {
    id?: number
    consentType: string
    granted: boolean
    grantedAt?: Date | string | null
    revokedAt?: Date | string | null
    purpose?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserConsentCreateOrConnectWithoutUserInput = {
    where: UserConsentWhereUniqueInput
    create: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput>
  }

  export type UserConsentCreateManyUserInputEnvelope = {
    data: UserConsentCreateManyUserInput | UserConsentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    action: string
    details?: string | null
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: number
    action: string
    details?: string | null
    timestamp?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ApplicantUpsertWithoutUserInput = {
    update: XOR<ApplicantUpdateWithoutUserInput, ApplicantUncheckedUpdateWithoutUserInput>
    create: XOR<ApplicantCreateWithoutUserInput, ApplicantUncheckedCreateWithoutUserInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutUserInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutUserInput, ApplicantUncheckedUpdateWithoutUserInput>
  }

  export type ApplicantUpdateWithoutUserInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type EmployerUpsertWithoutUserInput = {
    update: XOR<EmployerUpdateWithoutUserInput, EmployerUncheckedUpdateWithoutUserInput>
    create: XOR<EmployerCreateWithoutUserInput, EmployerUncheckedCreateWithoutUserInput>
    where?: EmployerWhereInput
  }

  export type EmployerUpdateToOneWithWhereWithoutUserInput = {
    where?: EmployerWhereInput
    data: XOR<EmployerUpdateWithoutUserInput, EmployerUncheckedUpdateWithoutUserInput>
  }

  export type EmployerUpdateWithoutUserInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUpdateManyWithoutEmployerNestedInput
    notifications?: NotificationUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutEmployerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type ChatRoomUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatRoomWhereUniqueInput
    update: XOR<ChatRoomUpdateWithoutUserInput, ChatRoomUncheckedUpdateWithoutUserInput>
    create: XOR<ChatRoomCreateWithoutUserInput, ChatRoomUncheckedCreateWithoutUserInput>
  }

  export type ChatRoomUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatRoomWhereUniqueInput
    data: XOR<ChatRoomUpdateWithoutUserInput, ChatRoomUncheckedUpdateWithoutUserInput>
  }

  export type ChatRoomUpdateManyWithWhereWithoutUserInput = {
    where: ChatRoomScalarWhereInput
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatRoomScalarWhereInput = {
    AND?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    OR?: ChatRoomScalarWhereInput[]
    NOT?: ChatRoomScalarWhereInput | ChatRoomScalarWhereInput[]
    id?: IntFilter<"ChatRoom"> | number
    userId?: IntFilter<"ChatRoom"> | number
    agentId?: IntNullableFilter<"ChatRoom"> | number | null
    topic?: StringNullableFilter<"ChatRoom"> | string | null
    status?: StringFilter<"ChatRoom"> | string
    createdAt?: DateTimeFilter<"ChatRoom"> | Date | string
    endedAt?: DateTimeNullableFilter<"ChatRoom"> | Date | string | null
  }

  export type ChatRoomUpsertWithWhereUniqueWithoutAgentInput = {
    where: ChatRoomWhereUniqueInput
    update: XOR<ChatRoomUpdateWithoutAgentInput, ChatRoomUncheckedUpdateWithoutAgentInput>
    create: XOR<ChatRoomCreateWithoutAgentInput, ChatRoomUncheckedCreateWithoutAgentInput>
  }

  export type ChatRoomUpdateWithWhereUniqueWithoutAgentInput = {
    where: ChatRoomWhereUniqueInput
    data: XOR<ChatRoomUpdateWithoutAgentInput, ChatRoomUncheckedUpdateWithoutAgentInput>
  }

  export type ChatRoomUpdateManyWithWhereWithoutAgentInput = {
    where: ChatRoomScalarWhereInput
    data: XOR<ChatRoomUpdateManyMutationInput, ChatRoomUncheckedUpdateManyWithoutAgentInput>
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutSenderInput, ChatMessageUncheckedUpdateWithoutSenderInput>
    create: XOR<ChatMessageCreateWithoutSenderInput, ChatMessageUncheckedCreateWithoutSenderInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutSenderInput, ChatMessageUncheckedUpdateWithoutSenderInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutSenderInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type ChatMessageScalarWhereInput = {
    AND?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    OR?: ChatMessageScalarWhereInput[]
    NOT?: ChatMessageScalarWhereInput | ChatMessageScalarWhereInput[]
    id?: IntFilter<"ChatMessage"> | number
    roomId?: IntFilter<"ChatMessage"> | number
    senderId?: IntNullableFilter<"ChatMessage"> | number | null
    message?: StringFilter<"ChatMessage"> | string
    type?: StringFilter<"ChatMessage"> | string
    isRead?: BoolFilter<"ChatMessage"> | boolean
    readAt?: DateTimeNullableFilter<"ChatMessage"> | Date | string | null
    timestamp?: DateTimeFilter<"ChatMessage"> | Date | string
  }

  export type UserConsentUpsertWithWhereUniqueWithoutUserInput = {
    where: UserConsentWhereUniqueInput
    update: XOR<UserConsentUpdateWithoutUserInput, UserConsentUncheckedUpdateWithoutUserInput>
    create: XOR<UserConsentCreateWithoutUserInput, UserConsentUncheckedCreateWithoutUserInput>
  }

  export type UserConsentUpdateWithWhereUniqueWithoutUserInput = {
    where: UserConsentWhereUniqueInput
    data: XOR<UserConsentUpdateWithoutUserInput, UserConsentUncheckedUpdateWithoutUserInput>
  }

  export type UserConsentUpdateManyWithWhereWithoutUserInput = {
    where: UserConsentScalarWhereInput
    data: XOR<UserConsentUpdateManyMutationInput, UserConsentUncheckedUpdateManyWithoutUserInput>
  }

  export type UserConsentScalarWhereInput = {
    AND?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
    OR?: UserConsentScalarWhereInput[]
    NOT?: UserConsentScalarWhereInput | UserConsentScalarWhereInput[]
    id?: IntFilter<"UserConsent"> | number
    userId?: IntFilter<"UserConsent"> | number
    consentType?: StringFilter<"UserConsent"> | string
    granted?: BoolFilter<"UserConsent"> | boolean
    grantedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    revokedAt?: DateTimeNullableFilter<"UserConsent"> | Date | string | null
    purpose?: StringNullableFilter<"UserConsent"> | string | null
    createdAt?: DateTimeFilter<"UserConsent"> | Date | string
    updatedAt?: DateTimeFilter<"UserConsent"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: IntFilter<"AuditLog"> | number
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    details?: StringNullableFilter<"AuditLog"> | string | null
    timestamp?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type UserCreateWithoutApplicantInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employer?: EmployerCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApplicantInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employer?: EmployerUncheckedCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomUncheckedCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApplicantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
  }

  export type ApplicationCreateWithoutApplicantInput = {
    status?: $Enums.ApplicationStatus
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutApplicationsInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutApplicantInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    jobId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutApplicantInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput>
  }

  export type ApplicationCreateManyApplicantInputEnvelope = {
    data: ApplicationCreateManyApplicantInput | ApplicationCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type AcademicQualificationCreateWithoutApplicantInput = {
    level: string
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    country: CountryCreateNestedOneWithoutQualificationsInput
  }

  export type AcademicQualificationUncheckedCreateWithoutApplicantInput = {
    id?: number
    level: string
    countryId: number
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicQualificationCreateOrConnectWithoutApplicantInput = {
    where: AcademicQualificationWhereUniqueInput
    create: XOR<AcademicQualificationCreateWithoutApplicantInput, AcademicQualificationUncheckedCreateWithoutApplicantInput>
  }

  export type AcademicQualificationCreateManyApplicantInputEnvelope = {
    data: AcademicQualificationCreateManyApplicantInput | AcademicQualificationCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type WorkExperienceCreateWithoutApplicantInput = {
    companyName: string
    jobTitle: string
    industry?: string | null
    location?: string | null
    employmentType?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCurrent?: boolean
    responsibilities?: string | null
    achievements?: string | null
    supervisorName?: string | null
    supervisorContact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkExperienceUncheckedCreateWithoutApplicantInput = {
    id?: number
    companyName: string
    jobTitle: string
    industry?: string | null
    location?: string | null
    employmentType?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCurrent?: boolean
    responsibilities?: string | null
    achievements?: string | null
    supervisorName?: string | null
    supervisorContact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkExperienceCreateOrConnectWithoutApplicantInput = {
    where: WorkExperienceWhereUniqueInput
    create: XOR<WorkExperienceCreateWithoutApplicantInput, WorkExperienceUncheckedCreateWithoutApplicantInput>
  }

  export type WorkExperienceCreateManyApplicantInputEnvelope = {
    data: WorkExperienceCreateManyApplicantInput | WorkExperienceCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type LanguageProficiencyCreateWithoutApplicantInput = {
    language: string
    speakLevel: string
    readLevel: string
    writeLevel: string
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageProficiencyUncheckedCreateWithoutApplicantInput = {
    id?: number
    language: string
    speakLevel: string
    readLevel: string
    writeLevel: string
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageProficiencyCreateOrConnectWithoutApplicantInput = {
    where: LanguageProficiencyWhereUniqueInput
    create: XOR<LanguageProficiencyCreateWithoutApplicantInput, LanguageProficiencyUncheckedCreateWithoutApplicantInput>
  }

  export type LanguageProficiencyCreateManyApplicantInputEnvelope = {
    data: LanguageProficiencyCreateManyApplicantInput | LanguageProficiencyCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type ComputerSkillCreateWithoutApplicantInput = {
    skill: string
    proficiency: string
    createdAt?: Date | string
  }

  export type ComputerSkillUncheckedCreateWithoutApplicantInput = {
    id?: number
    skill: string
    proficiency: string
    createdAt?: Date | string
  }

  export type ComputerSkillCreateOrConnectWithoutApplicantInput = {
    where: ComputerSkillWhereUniqueInput
    create: XOR<ComputerSkillCreateWithoutApplicantInput, ComputerSkillUncheckedCreateWithoutApplicantInput>
  }

  export type ComputerSkillCreateManyApplicantInputEnvelope = {
    data: ComputerSkillCreateManyApplicantInput | ComputerSkillCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type ApplicantSkillCreateWithoutApplicantInput = {
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillMaster: SkillMasterCreateNestedOneWithoutApplicantSkillsInput
  }

  export type ApplicantSkillUncheckedCreateWithoutApplicantInput = {
    id?: number
    skillMasterId: number
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicantSkillCreateOrConnectWithoutApplicantInput = {
    where: ApplicantSkillWhereUniqueInput
    create: XOR<ApplicantSkillCreateWithoutApplicantInput, ApplicantSkillUncheckedCreateWithoutApplicantInput>
  }

  export type ApplicantSkillCreateManyApplicantInputEnvelope = {
    data: ApplicantSkillCreateManyApplicantInput | ApplicantSkillCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type GeneralSkillCreateWithoutApplicantInput = {
    skill: string
    description?: string | null
    proficiency: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSkillUncheckedCreateWithoutApplicantInput = {
    id?: number
    skill: string
    description?: string | null
    proficiency: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSkillCreateOrConnectWithoutApplicantInput = {
    where: GeneralSkillWhereUniqueInput
    create: XOR<GeneralSkillCreateWithoutApplicantInput, GeneralSkillUncheckedCreateWithoutApplicantInput>
  }

  export type GeneralSkillCreateManyApplicantInputEnvelope = {
    data: GeneralSkillCreateManyApplicantInput | GeneralSkillCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutApplicantInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    employer?: EmployerCreateNestedOneWithoutNotificationsInput
    application?: ApplicationCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutApplicantInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    employerId?: number | null
    applicationId?: number | null
  }

  export type NotificationCreateOrConnectWithoutApplicantInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutApplicantInput, NotificationUncheckedCreateWithoutApplicantInput>
  }

  export type NotificationCreateManyApplicantInputEnvelope = {
    data: NotificationCreateManyApplicantInput | NotificationCreateManyApplicantInput[]
    skipDuplicates?: boolean
  }

  export type JobCategoryCreateWithoutApplicantsInput = {
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobCreateNestedManyWithoutCategoriesInput
  }

  export type JobCategoryUncheckedCreateWithoutApplicantsInput = {
    id?: number
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type JobCategoryCreateOrConnectWithoutApplicantsInput = {
    where: JobCategoryWhereUniqueInput
    create: XOR<JobCategoryCreateWithoutApplicantsInput, JobCategoryUncheckedCreateWithoutApplicantsInput>
  }

  export type NotificationSettingsCreateWithoutApplicantInput = {
    emailEnabled?: boolean
    emailJobMatches?: boolean
    emailApplicationStatus?: boolean
    emailInterviews?: boolean
    emailMarketing?: boolean
    smsEnabled?: boolean
    smsApplicationStatus?: boolean
    smsInterviews?: boolean
    smsUrgent?: boolean
    pushEnabled?: boolean
    pushJobMatches?: boolean
    pushApplicationStatus?: boolean
    pushInterviews?: boolean
    profileVisible?: boolean
    autoApply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsUncheckedCreateWithoutApplicantInput = {
    id?: number
    emailEnabled?: boolean
    emailJobMatches?: boolean
    emailApplicationStatus?: boolean
    emailInterviews?: boolean
    emailMarketing?: boolean
    smsEnabled?: boolean
    smsApplicationStatus?: boolean
    smsInterviews?: boolean
    smsUrgent?: boolean
    pushEnabled?: boolean
    pushJobMatches?: boolean
    pushApplicationStatus?: boolean
    pushInterviews?: boolean
    profileVisible?: boolean
    autoApply?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationSettingsCreateOrConnectWithoutApplicantInput = {
    where: NotificationSettingsWhereUniqueInput
    create: XOR<NotificationSettingsCreateWithoutApplicantInput, NotificationSettingsUncheckedCreateWithoutApplicantInput>
  }

  export type UserUpsertWithoutApplicantInput = {
    update: XOR<UserUpdateWithoutApplicantInput, UserUncheckedUpdateWithoutApplicantInput>
    create: XOR<UserCreateWithoutApplicantInput, UserUncheckedCreateWithoutApplicantInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApplicantInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApplicantInput, UserUncheckedUpdateWithoutApplicantInput>
  }

  export type UserUpdateWithoutApplicantInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUncheckedUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUncheckedUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutApplicantInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutApplicantInput, ApplicationUncheckedUpdateWithoutApplicantInput>
    create: XOR<ApplicationCreateWithoutApplicantInput, ApplicationUncheckedCreateWithoutApplicantInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutApplicantInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutApplicantInput, ApplicationUncheckedUpdateWithoutApplicantInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutApplicantInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutApplicantInput>
  }

  export type ApplicationScalarWhereInput = {
    AND?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    OR?: ApplicationScalarWhereInput[]
    NOT?: ApplicationScalarWhereInput | ApplicationScalarWhereInput[]
    id?: IntFilter<"Application"> | number
    status?: EnumApplicationStatusFilter<"Application"> | $Enums.ApplicationStatus
    jobId?: IntFilter<"Application"> | number
    applicantId?: IntFilter<"Application"> | number
    coverLetter?: StringNullableFilter<"Application"> | string | null
    appliedAt?: DateTimeFilter<"Application"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"Application"> | Date | string | null
    reviewedBy?: IntNullableFilter<"Application"> | number | null
    rejectionReason?: StringNullableFilter<"Application"> | string | null
    notes?: StringNullableFilter<"Application"> | string | null
    createdAt?: DateTimeFilter<"Application"> | Date | string
    updatedAt?: DateTimeFilter<"Application"> | Date | string
  }

  export type AcademicQualificationUpsertWithWhereUniqueWithoutApplicantInput = {
    where: AcademicQualificationWhereUniqueInput
    update: XOR<AcademicQualificationUpdateWithoutApplicantInput, AcademicQualificationUncheckedUpdateWithoutApplicantInput>
    create: XOR<AcademicQualificationCreateWithoutApplicantInput, AcademicQualificationUncheckedCreateWithoutApplicantInput>
  }

  export type AcademicQualificationUpdateWithWhereUniqueWithoutApplicantInput = {
    where: AcademicQualificationWhereUniqueInput
    data: XOR<AcademicQualificationUpdateWithoutApplicantInput, AcademicQualificationUncheckedUpdateWithoutApplicantInput>
  }

  export type AcademicQualificationUpdateManyWithWhereWithoutApplicantInput = {
    where: AcademicQualificationScalarWhereInput
    data: XOR<AcademicQualificationUpdateManyMutationInput, AcademicQualificationUncheckedUpdateManyWithoutApplicantInput>
  }

  export type WorkExperienceUpsertWithWhereUniqueWithoutApplicantInput = {
    where: WorkExperienceWhereUniqueInput
    update: XOR<WorkExperienceUpdateWithoutApplicantInput, WorkExperienceUncheckedUpdateWithoutApplicantInput>
    create: XOR<WorkExperienceCreateWithoutApplicantInput, WorkExperienceUncheckedCreateWithoutApplicantInput>
  }

  export type WorkExperienceUpdateWithWhereUniqueWithoutApplicantInput = {
    where: WorkExperienceWhereUniqueInput
    data: XOR<WorkExperienceUpdateWithoutApplicantInput, WorkExperienceUncheckedUpdateWithoutApplicantInput>
  }

  export type WorkExperienceUpdateManyWithWhereWithoutApplicantInput = {
    where: WorkExperienceScalarWhereInput
    data: XOR<WorkExperienceUpdateManyMutationInput, WorkExperienceUncheckedUpdateManyWithoutApplicantInput>
  }

  export type WorkExperienceScalarWhereInput = {
    AND?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
    OR?: WorkExperienceScalarWhereInput[]
    NOT?: WorkExperienceScalarWhereInput | WorkExperienceScalarWhereInput[]
    id?: IntFilter<"WorkExperience"> | number
    companyName?: StringFilter<"WorkExperience"> | string
    jobTitle?: StringFilter<"WorkExperience"> | string
    industry?: StringNullableFilter<"WorkExperience"> | string | null
    location?: StringNullableFilter<"WorkExperience"> | string | null
    employmentType?: StringNullableFilter<"WorkExperience"> | string | null
    startDate?: DateTimeFilter<"WorkExperience"> | Date | string
    endDate?: DateTimeNullableFilter<"WorkExperience"> | Date | string | null
    isCurrent?: BoolFilter<"WorkExperience"> | boolean
    responsibilities?: StringNullableFilter<"WorkExperience"> | string | null
    achievements?: StringNullableFilter<"WorkExperience"> | string | null
    supervisorName?: StringNullableFilter<"WorkExperience"> | string | null
    supervisorContact?: StringNullableFilter<"WorkExperience"> | string | null
    applicantId?: IntFilter<"WorkExperience"> | number
    createdAt?: DateTimeFilter<"WorkExperience"> | Date | string
    updatedAt?: DateTimeFilter<"WorkExperience"> | Date | string
  }

  export type LanguageProficiencyUpsertWithWhereUniqueWithoutApplicantInput = {
    where: LanguageProficiencyWhereUniqueInput
    update: XOR<LanguageProficiencyUpdateWithoutApplicantInput, LanguageProficiencyUncheckedUpdateWithoutApplicantInput>
    create: XOR<LanguageProficiencyCreateWithoutApplicantInput, LanguageProficiencyUncheckedCreateWithoutApplicantInput>
  }

  export type LanguageProficiencyUpdateWithWhereUniqueWithoutApplicantInput = {
    where: LanguageProficiencyWhereUniqueInput
    data: XOR<LanguageProficiencyUpdateWithoutApplicantInput, LanguageProficiencyUncheckedUpdateWithoutApplicantInput>
  }

  export type LanguageProficiencyUpdateManyWithWhereWithoutApplicantInput = {
    where: LanguageProficiencyScalarWhereInput
    data: XOR<LanguageProficiencyUpdateManyMutationInput, LanguageProficiencyUncheckedUpdateManyWithoutApplicantInput>
  }

  export type LanguageProficiencyScalarWhereInput = {
    AND?: LanguageProficiencyScalarWhereInput | LanguageProficiencyScalarWhereInput[]
    OR?: LanguageProficiencyScalarWhereInput[]
    NOT?: LanguageProficiencyScalarWhereInput | LanguageProficiencyScalarWhereInput[]
    id?: IntFilter<"LanguageProficiency"> | number
    language?: StringFilter<"LanguageProficiency"> | string
    speakLevel?: StringFilter<"LanguageProficiency"> | string
    readLevel?: StringFilter<"LanguageProficiency"> | string
    writeLevel?: StringFilter<"LanguageProficiency"> | string
    isCertified?: BoolFilter<"LanguageProficiency"> | boolean
    certificationName?: StringNullableFilter<"LanguageProficiency"> | string | null
    applicantId?: IntFilter<"LanguageProficiency"> | number
    createdAt?: DateTimeFilter<"LanguageProficiency"> | Date | string
    updatedAt?: DateTimeFilter<"LanguageProficiency"> | Date | string
  }

  export type ComputerSkillUpsertWithWhereUniqueWithoutApplicantInput = {
    where: ComputerSkillWhereUniqueInput
    update: XOR<ComputerSkillUpdateWithoutApplicantInput, ComputerSkillUncheckedUpdateWithoutApplicantInput>
    create: XOR<ComputerSkillCreateWithoutApplicantInput, ComputerSkillUncheckedCreateWithoutApplicantInput>
  }

  export type ComputerSkillUpdateWithWhereUniqueWithoutApplicantInput = {
    where: ComputerSkillWhereUniqueInput
    data: XOR<ComputerSkillUpdateWithoutApplicantInput, ComputerSkillUncheckedUpdateWithoutApplicantInput>
  }

  export type ComputerSkillUpdateManyWithWhereWithoutApplicantInput = {
    where: ComputerSkillScalarWhereInput
    data: XOR<ComputerSkillUpdateManyMutationInput, ComputerSkillUncheckedUpdateManyWithoutApplicantInput>
  }

  export type ComputerSkillScalarWhereInput = {
    AND?: ComputerSkillScalarWhereInput | ComputerSkillScalarWhereInput[]
    OR?: ComputerSkillScalarWhereInput[]
    NOT?: ComputerSkillScalarWhereInput | ComputerSkillScalarWhereInput[]
    id?: IntFilter<"ComputerSkill"> | number
    skill?: StringFilter<"ComputerSkill"> | string
    proficiency?: StringFilter<"ComputerSkill"> | string
    applicantId?: IntFilter<"ComputerSkill"> | number
    createdAt?: DateTimeFilter<"ComputerSkill"> | Date | string
  }

  export type ApplicantSkillUpsertWithWhereUniqueWithoutApplicantInput = {
    where: ApplicantSkillWhereUniqueInput
    update: XOR<ApplicantSkillUpdateWithoutApplicantInput, ApplicantSkillUncheckedUpdateWithoutApplicantInput>
    create: XOR<ApplicantSkillCreateWithoutApplicantInput, ApplicantSkillUncheckedCreateWithoutApplicantInput>
  }

  export type ApplicantSkillUpdateWithWhereUniqueWithoutApplicantInput = {
    where: ApplicantSkillWhereUniqueInput
    data: XOR<ApplicantSkillUpdateWithoutApplicantInput, ApplicantSkillUncheckedUpdateWithoutApplicantInput>
  }

  export type ApplicantSkillUpdateManyWithWhereWithoutApplicantInput = {
    where: ApplicantSkillScalarWhereInput
    data: XOR<ApplicantSkillUpdateManyMutationInput, ApplicantSkillUncheckedUpdateManyWithoutApplicantInput>
  }

  export type GeneralSkillUpsertWithWhereUniqueWithoutApplicantInput = {
    where: GeneralSkillWhereUniqueInput
    update: XOR<GeneralSkillUpdateWithoutApplicantInput, GeneralSkillUncheckedUpdateWithoutApplicantInput>
    create: XOR<GeneralSkillCreateWithoutApplicantInput, GeneralSkillUncheckedCreateWithoutApplicantInput>
  }

  export type GeneralSkillUpdateWithWhereUniqueWithoutApplicantInput = {
    where: GeneralSkillWhereUniqueInput
    data: XOR<GeneralSkillUpdateWithoutApplicantInput, GeneralSkillUncheckedUpdateWithoutApplicantInput>
  }

  export type GeneralSkillUpdateManyWithWhereWithoutApplicantInput = {
    where: GeneralSkillScalarWhereInput
    data: XOR<GeneralSkillUpdateManyMutationInput, GeneralSkillUncheckedUpdateManyWithoutApplicantInput>
  }

  export type GeneralSkillScalarWhereInput = {
    AND?: GeneralSkillScalarWhereInput | GeneralSkillScalarWhereInput[]
    OR?: GeneralSkillScalarWhereInput[]
    NOT?: GeneralSkillScalarWhereInput | GeneralSkillScalarWhereInput[]
    id?: IntFilter<"GeneralSkill"> | number
    skill?: StringFilter<"GeneralSkill"> | string
    description?: StringNullableFilter<"GeneralSkill"> | string | null
    proficiency?: StringFilter<"GeneralSkill"> | string
    applicantId?: IntFilter<"GeneralSkill"> | number
    createdAt?: DateTimeFilter<"GeneralSkill"> | Date | string
    updatedAt?: DateTimeFilter<"GeneralSkill"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutApplicantInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutApplicantInput, NotificationUncheckedUpdateWithoutApplicantInput>
    create: XOR<NotificationCreateWithoutApplicantInput, NotificationUncheckedCreateWithoutApplicantInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutApplicantInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutApplicantInput, NotificationUncheckedUpdateWithoutApplicantInput>
  }

  export type NotificationUpdateManyWithWhereWithoutApplicantInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutApplicantInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    isRead?: BoolFilter<"Notification"> | boolean
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    readAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    applicantId?: IntNullableFilter<"Notification"> | number | null
    employerId?: IntNullableFilter<"Notification"> | number | null
    applicationId?: IntNullableFilter<"Notification"> | number | null
  }

  export type JobCategoryUpsertWithWhereUniqueWithoutApplicantsInput = {
    where: JobCategoryWhereUniqueInput
    update: XOR<JobCategoryUpdateWithoutApplicantsInput, JobCategoryUncheckedUpdateWithoutApplicantsInput>
    create: XOR<JobCategoryCreateWithoutApplicantsInput, JobCategoryUncheckedCreateWithoutApplicantsInput>
  }

  export type JobCategoryUpdateWithWhereUniqueWithoutApplicantsInput = {
    where: JobCategoryWhereUniqueInput
    data: XOR<JobCategoryUpdateWithoutApplicantsInput, JobCategoryUncheckedUpdateWithoutApplicantsInput>
  }

  export type JobCategoryUpdateManyWithWhereWithoutApplicantsInput = {
    where: JobCategoryScalarWhereInput
    data: XOR<JobCategoryUpdateManyMutationInput, JobCategoryUncheckedUpdateManyWithoutApplicantsInput>
  }

  export type JobCategoryScalarWhereInput = {
    AND?: JobCategoryScalarWhereInput | JobCategoryScalarWhereInput[]
    OR?: JobCategoryScalarWhereInput[]
    NOT?: JobCategoryScalarWhereInput | JobCategoryScalarWhereInput[]
    id?: IntFilter<"JobCategory"> | number
    name?: StringFilter<"JobCategory"> | string
    description?: StringNullableFilter<"JobCategory"> | string | null
    isActive?: BoolFilter<"JobCategory"> | boolean
    createdAt?: DateTimeFilter<"JobCategory"> | Date | string
    updatedAt?: DateTimeFilter<"JobCategory"> | Date | string
  }

  export type NotificationSettingsUpsertWithoutApplicantInput = {
    update: XOR<NotificationSettingsUpdateWithoutApplicantInput, NotificationSettingsUncheckedUpdateWithoutApplicantInput>
    create: XOR<NotificationSettingsCreateWithoutApplicantInput, NotificationSettingsUncheckedCreateWithoutApplicantInput>
    where?: NotificationSettingsWhereInput
  }

  export type NotificationSettingsUpdateToOneWithWhereWithoutApplicantInput = {
    where?: NotificationSettingsWhereInput
    data: XOR<NotificationSettingsUpdateWithoutApplicantInput, NotificationSettingsUncheckedUpdateWithoutApplicantInput>
  }

  export type NotificationSettingsUpdateWithoutApplicantInput = {
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailJobMatches?: BoolFieldUpdateOperationsInput | boolean
    emailApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    emailInterviews?: BoolFieldUpdateOperationsInput | boolean
    emailMarketing?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    smsInterviews?: BoolFieldUpdateOperationsInput | boolean
    smsUrgent?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushJobMatches?: BoolFieldUpdateOperationsInput | boolean
    pushApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    pushInterviews?: BoolFieldUpdateOperationsInput | boolean
    profileVisible?: BoolFieldUpdateOperationsInput | boolean
    autoApply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationSettingsUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    emailEnabled?: BoolFieldUpdateOperationsInput | boolean
    emailJobMatches?: BoolFieldUpdateOperationsInput | boolean
    emailApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    emailInterviews?: BoolFieldUpdateOperationsInput | boolean
    emailMarketing?: BoolFieldUpdateOperationsInput | boolean
    smsEnabled?: BoolFieldUpdateOperationsInput | boolean
    smsApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    smsInterviews?: BoolFieldUpdateOperationsInput | boolean
    smsUrgent?: BoolFieldUpdateOperationsInput | boolean
    pushEnabled?: BoolFieldUpdateOperationsInput | boolean
    pushJobMatches?: BoolFieldUpdateOperationsInput | boolean
    pushApplicationStatus?: BoolFieldUpdateOperationsInput | boolean
    pushInterviews?: BoolFieldUpdateOperationsInput | boolean
    profileVisible?: BoolFieldUpdateOperationsInput | boolean
    autoApply?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutEmployerInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEmployerInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantUncheckedCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomUncheckedCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEmployerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
  }

  export type JobCreateWithoutEmployerInput = {
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationCreateNestedManyWithoutJobInput
    categories?: JobCategoryCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutEmployerInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutEmployerInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutEmployerInput, JobUncheckedCreateWithoutEmployerInput>
  }

  export type JobCreateManyEmployerInputEnvelope = {
    data: JobCreateManyEmployerInput | JobCreateManyEmployerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutEmployerInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicant?: ApplicantCreateNestedOneWithoutNotificationsInput
    application?: ApplicationCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutEmployerInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicantId?: number | null
    applicationId?: number | null
  }

  export type NotificationCreateOrConnectWithoutEmployerInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutEmployerInput, NotificationUncheckedCreateWithoutEmployerInput>
  }

  export type NotificationCreateManyEmployerInputEnvelope = {
    data: NotificationCreateManyEmployerInput | NotificationCreateManyEmployerInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutEmployerInput = {
    update: XOR<UserUpdateWithoutEmployerInput, UserUncheckedUpdateWithoutEmployerInput>
    create: XOR<UserCreateWithoutEmployerInput, UserUncheckedCreateWithoutEmployerInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEmployerInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEmployerInput, UserUncheckedUpdateWithoutEmployerInput>
  }

  export type UserUpdateWithoutEmployerInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEmployerInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUncheckedUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUncheckedUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JobUpsertWithWhereUniqueWithoutEmployerInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutEmployerInput, JobUncheckedUpdateWithoutEmployerInput>
    create: XOR<JobCreateWithoutEmployerInput, JobUncheckedCreateWithoutEmployerInput>
  }

  export type JobUpdateWithWhereUniqueWithoutEmployerInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutEmployerInput, JobUncheckedUpdateWithoutEmployerInput>
  }

  export type JobUpdateManyWithWhereWithoutEmployerInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutEmployerInput>
  }

  export type NotificationUpsertWithWhereUniqueWithoutEmployerInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutEmployerInput, NotificationUncheckedUpdateWithoutEmployerInput>
    create: XOR<NotificationCreateWithoutEmployerInput, NotificationUncheckedCreateWithoutEmployerInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutEmployerInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutEmployerInput, NotificationUncheckedUpdateWithoutEmployerInput>
  }

  export type NotificationUpdateManyWithWhereWithoutEmployerInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutEmployerInput>
  }

  export type EmployerCreateWithoutJobsInput = {
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEmployerInput
    notifications?: NotificationCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUncheckedCreateWithoutJobsInput = {
    id?: number
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    userId: number
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type EmployerCreateOrConnectWithoutJobsInput = {
    where: EmployerWhereUniqueInput
    create: XOR<EmployerCreateWithoutJobsInput, EmployerUncheckedCreateWithoutJobsInput>
  }

  export type ApplicationCreateWithoutJobInput = {
    status?: $Enums.ApplicationStatus
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant: ApplicantCreateNestedOneWithoutApplicationsInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutJobInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    applicantId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationCreateManyJobInputEnvelope = {
    data: ApplicationCreateManyJobInput | ApplicationCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type JobCategoryCreateWithoutJobsInput = {
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applicants?: ApplicantCreateNestedManyWithoutCategoriesInput
  }

  export type JobCategoryUncheckedCreateWithoutJobsInput = {
    id?: number
    name: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applicants?: ApplicantUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type JobCategoryCreateOrConnectWithoutJobsInput = {
    where: JobCategoryWhereUniqueInput
    create: XOR<JobCategoryCreateWithoutJobsInput, JobCategoryUncheckedCreateWithoutJobsInput>
  }

  export type JobRequirementCreateWithoutJobInput = {
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    skillMaster: SkillMasterCreateNestedOneWithoutJobRequirementsInput
  }

  export type JobRequirementUncheckedCreateWithoutJobInput = {
    id?: number
    skillMasterId: number
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobRequirementCreateOrConnectWithoutJobInput = {
    where: JobRequirementWhereUniqueInput
    create: XOR<JobRequirementCreateWithoutJobInput, JobRequirementUncheckedCreateWithoutJobInput>
  }

  export type JobRequirementCreateManyJobInputEnvelope = {
    data: JobRequirementCreateManyJobInput | JobRequirementCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type InterviewCreateWithoutJobInput = {
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    application: ApplicationCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateWithoutJobInput = {
    id?: number
    applicationId: number
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewCreateOrConnectWithoutJobInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput>
  }

  export type InterviewCreateManyJobInputEnvelope = {
    data: InterviewCreateManyJobInput | InterviewCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type EmployerUpsertWithoutJobsInput = {
    update: XOR<EmployerUpdateWithoutJobsInput, EmployerUncheckedUpdateWithoutJobsInput>
    create: XOR<EmployerCreateWithoutJobsInput, EmployerUncheckedCreateWithoutJobsInput>
    where?: EmployerWhereInput
  }

  export type EmployerUpdateToOneWithWhereWithoutJobsInput = {
    where?: EmployerWhereInput
    data: XOR<EmployerUpdateWithoutJobsInput, EmployerUncheckedUpdateWithoutJobsInput>
  }

  export type EmployerUpdateWithoutJobsInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmployerNestedInput
    notifications?: NotificationUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerUncheckedUpdateWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type ApplicationUpsertWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    update: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
    create: XOR<ApplicationCreateWithoutJobInput, ApplicationUncheckedCreateWithoutJobInput>
  }

  export type ApplicationUpdateWithWhereUniqueWithoutJobInput = {
    where: ApplicationWhereUniqueInput
    data: XOR<ApplicationUpdateWithoutJobInput, ApplicationUncheckedUpdateWithoutJobInput>
  }

  export type ApplicationUpdateManyWithWhereWithoutJobInput = {
    where: ApplicationScalarWhereInput
    data: XOR<ApplicationUpdateManyMutationInput, ApplicationUncheckedUpdateManyWithoutJobInput>
  }

  export type JobCategoryUpsertWithWhereUniqueWithoutJobsInput = {
    where: JobCategoryWhereUniqueInput
    update: XOR<JobCategoryUpdateWithoutJobsInput, JobCategoryUncheckedUpdateWithoutJobsInput>
    create: XOR<JobCategoryCreateWithoutJobsInput, JobCategoryUncheckedCreateWithoutJobsInput>
  }

  export type JobCategoryUpdateWithWhereUniqueWithoutJobsInput = {
    where: JobCategoryWhereUniqueInput
    data: XOR<JobCategoryUpdateWithoutJobsInput, JobCategoryUncheckedUpdateWithoutJobsInput>
  }

  export type JobCategoryUpdateManyWithWhereWithoutJobsInput = {
    where: JobCategoryScalarWhereInput
    data: XOR<JobCategoryUpdateManyMutationInput, JobCategoryUncheckedUpdateManyWithoutJobsInput>
  }

  export type JobRequirementUpsertWithWhereUniqueWithoutJobInput = {
    where: JobRequirementWhereUniqueInput
    update: XOR<JobRequirementUpdateWithoutJobInput, JobRequirementUncheckedUpdateWithoutJobInput>
    create: XOR<JobRequirementCreateWithoutJobInput, JobRequirementUncheckedCreateWithoutJobInput>
  }

  export type JobRequirementUpdateWithWhereUniqueWithoutJobInput = {
    where: JobRequirementWhereUniqueInput
    data: XOR<JobRequirementUpdateWithoutJobInput, JobRequirementUncheckedUpdateWithoutJobInput>
  }

  export type JobRequirementUpdateManyWithWhereWithoutJobInput = {
    where: JobRequirementScalarWhereInput
    data: XOR<JobRequirementUpdateManyMutationInput, JobRequirementUncheckedUpdateManyWithoutJobInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutJobInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutJobInput, InterviewUncheckedUpdateWithoutJobInput>
    create: XOR<InterviewCreateWithoutJobInput, InterviewUncheckedCreateWithoutJobInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutJobInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutJobInput, InterviewUncheckedUpdateWithoutJobInput>
  }

  export type InterviewUpdateManyWithWhereWithoutJobInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutJobInput>
  }

  export type InterviewScalarWhereInput = {
    AND?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
    OR?: InterviewScalarWhereInput[]
    NOT?: InterviewScalarWhereInput | InterviewScalarWhereInput[]
    id?: IntFilter<"Interview"> | number
    applicationId?: IntFilter<"Interview"> | number
    jobId?: IntNullableFilter<"Interview"> | number | null
    scheduledAt?: DateTimeFilter<"Interview"> | Date | string
    duration?: IntFilter<"Interview"> | number
    location?: StringNullableFilter<"Interview"> | string | null
    type?: StringFilter<"Interview"> | string
    notes?: StringNullableFilter<"Interview"> | string | null
    interviewers?: StringNullableFilter<"Interview"> | string | null
    status?: StringFilter<"Interview"> | string
    createdAt?: DateTimeFilter<"Interview"> | Date | string
    updatedAt?: DateTimeFilter<"Interview"> | Date | string
  }

  export type JobCreateWithoutRequirementsInput = {
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    categories?: JobCategoryCreateNestedManyWithoutJobsInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutRequirementsInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    employerId: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutJobsInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutRequirementsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutRequirementsInput, JobUncheckedCreateWithoutRequirementsInput>
  }

  export type SkillMasterCreateWithoutJobRequirementsInput = {
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applicantSkills?: ApplicantSkillCreateNestedManyWithoutSkillMasterInput
    skillDemands?: SkillDemandCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterUncheckedCreateWithoutJobRequirementsInput = {
    id?: number
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applicantSkills?: ApplicantSkillUncheckedCreateNestedManyWithoutSkillMasterInput
    skillDemands?: SkillDemandUncheckedCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterCreateOrConnectWithoutJobRequirementsInput = {
    where: SkillMasterWhereUniqueInput
    create: XOR<SkillMasterCreateWithoutJobRequirementsInput, SkillMasterUncheckedCreateWithoutJobRequirementsInput>
  }

  export type JobUpsertWithoutRequirementsInput = {
    update: XOR<JobUpdateWithoutRequirementsInput, JobUncheckedUpdateWithoutRequirementsInput>
    create: XOR<JobCreateWithoutRequirementsInput, JobUncheckedCreateWithoutRequirementsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutRequirementsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutRequirementsInput, JobUncheckedUpdateWithoutRequirementsInput>
  }

  export type JobUpdateWithoutRequirementsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUpdateManyWithoutJobsNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutRequirementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    employerId?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutJobsNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
  }

  export type SkillMasterUpsertWithoutJobRequirementsInput = {
    update: XOR<SkillMasterUpdateWithoutJobRequirementsInput, SkillMasterUncheckedUpdateWithoutJobRequirementsInput>
    create: XOR<SkillMasterCreateWithoutJobRequirementsInput, SkillMasterUncheckedCreateWithoutJobRequirementsInput>
    where?: SkillMasterWhereInput
  }

  export type SkillMasterUpdateToOneWithWhereWithoutJobRequirementsInput = {
    where?: SkillMasterWhereInput
    data: XOR<SkillMasterUpdateWithoutJobRequirementsInput, SkillMasterUncheckedUpdateWithoutJobRequirementsInput>
  }

  export type SkillMasterUpdateWithoutJobRequirementsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantSkills?: ApplicantSkillUpdateManyWithoutSkillMasterNestedInput
    skillDemands?: SkillDemandUpdateManyWithoutSkillMasterNestedInput
  }

  export type SkillMasterUncheckedUpdateWithoutJobRequirementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicantSkills?: ApplicantSkillUncheckedUpdateManyWithoutSkillMasterNestedInput
    skillDemands?: SkillDemandUncheckedUpdateManyWithoutSkillMasterNestedInput
  }

  export type ApplicantCreateWithoutSkillsInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutSkillsInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutSkillsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutSkillsInput, ApplicantUncheckedCreateWithoutSkillsInput>
  }

  export type SkillMasterCreateWithoutApplicantSkillsInput = {
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobRequirements?: JobRequirementCreateNestedManyWithoutSkillMasterInput
    skillDemands?: SkillDemandCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterUncheckedCreateWithoutApplicantSkillsInput = {
    id?: number
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobRequirements?: JobRequirementUncheckedCreateNestedManyWithoutSkillMasterInput
    skillDemands?: SkillDemandUncheckedCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterCreateOrConnectWithoutApplicantSkillsInput = {
    where: SkillMasterWhereUniqueInput
    create: XOR<SkillMasterCreateWithoutApplicantSkillsInput, SkillMasterUncheckedCreateWithoutApplicantSkillsInput>
  }

  export type ApplicantUpsertWithoutSkillsInput = {
    update: XOR<ApplicantUpdateWithoutSkillsInput, ApplicantUncheckedUpdateWithoutSkillsInput>
    create: XOR<ApplicantCreateWithoutSkillsInput, ApplicantUncheckedCreateWithoutSkillsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutSkillsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutSkillsInput, ApplicantUncheckedUpdateWithoutSkillsInput>
  }

  export type ApplicantUpdateWithoutSkillsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type SkillMasterUpsertWithoutApplicantSkillsInput = {
    update: XOR<SkillMasterUpdateWithoutApplicantSkillsInput, SkillMasterUncheckedUpdateWithoutApplicantSkillsInput>
    create: XOR<SkillMasterCreateWithoutApplicantSkillsInput, SkillMasterUncheckedCreateWithoutApplicantSkillsInput>
    where?: SkillMasterWhereInput
  }

  export type SkillMasterUpdateToOneWithWhereWithoutApplicantSkillsInput = {
    where?: SkillMasterWhereInput
    data: XOR<SkillMasterUpdateWithoutApplicantSkillsInput, SkillMasterUncheckedUpdateWithoutApplicantSkillsInput>
  }

  export type SkillMasterUpdateWithoutApplicantSkillsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobRequirements?: JobRequirementUpdateManyWithoutSkillMasterNestedInput
    skillDemands?: SkillDemandUpdateManyWithoutSkillMasterNestedInput
  }

  export type SkillMasterUncheckedUpdateWithoutApplicantSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobRequirements?: JobRequirementUncheckedUpdateManyWithoutSkillMasterNestedInput
    skillDemands?: SkillDemandUncheckedUpdateManyWithoutSkillMasterNestedInput
  }

  export type JobCreateWithoutApplicationsInput = {
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobsInput
    categories?: JobCategoryCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementCreateNestedManyWithoutJobInput
    interviews?: InterviewCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutApplicationsInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    employerId: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    categories?: JobCategoryUncheckedCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementUncheckedCreateNestedManyWithoutJobInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutApplicationsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
  }

  export type ApplicantCreateWithoutApplicationsInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutApplicationsInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutApplicationsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutApplicationsInput, ApplicantUncheckedCreateWithoutApplicationsInput>
  }

  export type NotificationCreateWithoutApplicationInput = {
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicant?: ApplicantCreateNestedOneWithoutNotificationsInput
    employer?: EmployerCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutApplicationInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicantId?: number | null
    employerId?: number | null
  }

  export type NotificationCreateOrConnectWithoutApplicationInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput>
  }

  export type NotificationCreateManyApplicationInputEnvelope = {
    data: NotificationCreateManyApplicationInput | NotificationCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type InterviewCreateWithoutApplicationInput = {
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    job?: JobCreateNestedOneWithoutInterviewsInput
  }

  export type InterviewUncheckedCreateWithoutApplicationInput = {
    id?: number
    jobId?: number | null
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewCreateOrConnectWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    create: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewCreateManyApplicationInputEnvelope = {
    data: InterviewCreateManyApplicationInput | InterviewCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type EmailLogCreateWithoutApplicationInput = {
    to: string
    subject: string
    message: string
    employerId?: number | null
    applicantId?: number | null
    status?: string
    sentAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type EmailLogUncheckedCreateWithoutApplicationInput = {
    id?: number
    to: string
    subject: string
    message: string
    employerId?: number | null
    applicantId?: number | null
    status?: string
    sentAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type EmailLogCreateOrConnectWithoutApplicationInput = {
    where: EmailLogWhereUniqueInput
    create: XOR<EmailLogCreateWithoutApplicationInput, EmailLogUncheckedCreateWithoutApplicationInput>
  }

  export type EmailLogCreateManyApplicationInputEnvelope = {
    data: EmailLogCreateManyApplicationInput | EmailLogCreateManyApplicationInput[]
    skipDuplicates?: boolean
  }

  export type JobUpsertWithoutApplicationsInput = {
    update: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
    create: XOR<JobCreateWithoutApplicationsInput, JobUncheckedCreateWithoutApplicationsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutApplicationsInput, JobUncheckedUpdateWithoutApplicationsInput>
  }

  export type JobUpdateWithoutApplicationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobsNestedInput
    categories?: JobCategoryUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    employerId?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    categories?: JobCategoryUncheckedUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
  }

  export type ApplicantUpsertWithoutApplicationsInput = {
    update: XOR<ApplicantUpdateWithoutApplicationsInput, ApplicantUncheckedUpdateWithoutApplicationsInput>
    create: XOR<ApplicantCreateWithoutApplicationsInput, ApplicantUncheckedCreateWithoutApplicationsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutApplicationsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutApplicationsInput, ApplicantUncheckedUpdateWithoutApplicationsInput>
  }

  export type ApplicantUpdateWithoutApplicationsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutApplicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type NotificationUpsertWithWhereUniqueWithoutApplicationInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutApplicationInput, NotificationUncheckedUpdateWithoutApplicationInput>
    create: XOR<NotificationCreateWithoutApplicationInput, NotificationUncheckedCreateWithoutApplicationInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutApplicationInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutApplicationInput, NotificationUncheckedUpdateWithoutApplicationInput>
  }

  export type NotificationUpdateManyWithWhereWithoutApplicationInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutApplicationInput>
  }

  export type InterviewUpsertWithWhereUniqueWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    update: XOR<InterviewUpdateWithoutApplicationInput, InterviewUncheckedUpdateWithoutApplicationInput>
    create: XOR<InterviewCreateWithoutApplicationInput, InterviewUncheckedCreateWithoutApplicationInput>
  }

  export type InterviewUpdateWithWhereUniqueWithoutApplicationInput = {
    where: InterviewWhereUniqueInput
    data: XOR<InterviewUpdateWithoutApplicationInput, InterviewUncheckedUpdateWithoutApplicationInput>
  }

  export type InterviewUpdateManyWithWhereWithoutApplicationInput = {
    where: InterviewScalarWhereInput
    data: XOR<InterviewUpdateManyMutationInput, InterviewUncheckedUpdateManyWithoutApplicationInput>
  }

  export type EmailLogUpsertWithWhereUniqueWithoutApplicationInput = {
    where: EmailLogWhereUniqueInput
    update: XOR<EmailLogUpdateWithoutApplicationInput, EmailLogUncheckedUpdateWithoutApplicationInput>
    create: XOR<EmailLogCreateWithoutApplicationInput, EmailLogUncheckedCreateWithoutApplicationInput>
  }

  export type EmailLogUpdateWithWhereUniqueWithoutApplicationInput = {
    where: EmailLogWhereUniqueInput
    data: XOR<EmailLogUpdateWithoutApplicationInput, EmailLogUncheckedUpdateWithoutApplicationInput>
  }

  export type EmailLogUpdateManyWithWhereWithoutApplicationInput = {
    where: EmailLogScalarWhereInput
    data: XOR<EmailLogUpdateManyMutationInput, EmailLogUncheckedUpdateManyWithoutApplicationInput>
  }

  export type EmailLogScalarWhereInput = {
    AND?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
    OR?: EmailLogScalarWhereInput[]
    NOT?: EmailLogScalarWhereInput | EmailLogScalarWhereInput[]
    id?: IntFilter<"EmailLog"> | number
    to?: StringFilter<"EmailLog"> | string
    subject?: StringFilter<"EmailLog"> | string
    message?: StringFilter<"EmailLog"> | string
    applicationId?: IntNullableFilter<"EmailLog"> | number | null
    employerId?: IntNullableFilter<"EmailLog"> | number | null
    applicantId?: IntNullableFilter<"EmailLog"> | number | null
    status?: StringFilter<"EmailLog"> | string
    sentAt?: DateTimeNullableFilter<"EmailLog"> | Date | string | null
    error?: StringNullableFilter<"EmailLog"> | string | null
    createdAt?: DateTimeFilter<"EmailLog"> | Date | string
  }

  export type ApplicantCreateWithoutNotificationsInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutNotificationsInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutNotificationsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutNotificationsInput, ApplicantUncheckedCreateWithoutNotificationsInput>
  }

  export type EmployerCreateWithoutNotificationsInput = {
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutEmployerInput
    jobs?: JobCreateNestedManyWithoutEmployerInput
  }

  export type EmployerUncheckedCreateWithoutNotificationsInput = {
    id?: number
    companyName: string
    industry?: string | null
    companySize?: string | null
    website?: string | null
    address: string
    phone?: string | null
    description?: string | null
    userId: number
    isVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobs?: JobUncheckedCreateNestedManyWithoutEmployerInput
  }

  export type EmployerCreateOrConnectWithoutNotificationsInput = {
    where: EmployerWhereUniqueInput
    create: XOR<EmployerCreateWithoutNotificationsInput, EmployerUncheckedCreateWithoutNotificationsInput>
  }

  export type ApplicationCreateWithoutNotificationsInput = {
    status?: $Enums.ApplicationStatus
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutApplicationsInput
    applicant: ApplicantCreateNestedOneWithoutApplicationsInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutNotificationsInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    jobId: number
    applicantId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutNotificationsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
  }

  export type ApplicantUpsertWithoutNotificationsInput = {
    update: XOR<ApplicantUpdateWithoutNotificationsInput, ApplicantUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ApplicantCreateWithoutNotificationsInput, ApplicantUncheckedCreateWithoutNotificationsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutNotificationsInput, ApplicantUncheckedUpdateWithoutNotificationsInput>
  }

  export type ApplicantUpdateWithoutNotificationsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type EmployerUpsertWithoutNotificationsInput = {
    update: XOR<EmployerUpdateWithoutNotificationsInput, EmployerUncheckedUpdateWithoutNotificationsInput>
    create: XOR<EmployerCreateWithoutNotificationsInput, EmployerUncheckedCreateWithoutNotificationsInput>
    where?: EmployerWhereInput
  }

  export type EmployerUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: EmployerWhereInput
    data: XOR<EmployerUpdateWithoutNotificationsInput, EmployerUncheckedUpdateWithoutNotificationsInput>
  }

  export type EmployerUpdateWithoutNotificationsInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutEmployerNestedInput
    jobs?: JobUpdateManyWithoutEmployerNestedInput
  }

  export type EmployerUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    companySize?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    address?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutEmployerNestedInput
  }

  export type ApplicationUpsertWithoutNotificationsInput = {
    update: XOR<ApplicationUpdateWithoutNotificationsInput, ApplicationUncheckedUpdateWithoutNotificationsInput>
    create: XOR<ApplicationCreateWithoutNotificationsInput, ApplicationUncheckedCreateWithoutNotificationsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutNotificationsInput, ApplicationUncheckedUpdateWithoutNotificationsInput>
  }

  export type ApplicationUpdateWithoutNotificationsInput = {
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    applicant?: ApplicantUpdateOneRequiredWithoutApplicationsNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    jobId?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicantCreateWithoutQualificationsInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutQualificationsInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutQualificationsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutQualificationsInput, ApplicantUncheckedCreateWithoutQualificationsInput>
  }

  export type CountryCreateWithoutQualificationsInput = {
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CountryUncheckedCreateWithoutQualificationsInput = {
    id?: number
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
  }

  export type CountryCreateOrConnectWithoutQualificationsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutQualificationsInput, CountryUncheckedCreateWithoutQualificationsInput>
  }

  export type ApplicantUpsertWithoutQualificationsInput = {
    update: XOR<ApplicantUpdateWithoutQualificationsInput, ApplicantUncheckedUpdateWithoutQualificationsInput>
    create: XOR<ApplicantCreateWithoutQualificationsInput, ApplicantUncheckedCreateWithoutQualificationsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutQualificationsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutQualificationsInput, ApplicantUncheckedUpdateWithoutQualificationsInput>
  }

  export type ApplicantUpdateWithoutQualificationsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutQualificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type CountryUpsertWithoutQualificationsInput = {
    update: XOR<CountryUpdateWithoutQualificationsInput, CountryUncheckedUpdateWithoutQualificationsInput>
    create: XOR<CountryCreateWithoutQualificationsInput, CountryUncheckedCreateWithoutQualificationsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutQualificationsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutQualificationsInput, CountryUncheckedUpdateWithoutQualificationsInput>
  }

  export type CountryUpdateWithoutQualificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CountryUncheckedUpdateWithoutQualificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantCreateWithoutExperiencesInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutExperiencesInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutExperiencesInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutExperiencesInput, ApplicantUncheckedCreateWithoutExperiencesInput>
  }

  export type ApplicantUpsertWithoutExperiencesInput = {
    update: XOR<ApplicantUpdateWithoutExperiencesInput, ApplicantUncheckedUpdateWithoutExperiencesInput>
    create: XOR<ApplicantCreateWithoutExperiencesInput, ApplicantUncheckedCreateWithoutExperiencesInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutExperiencesInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutExperiencesInput, ApplicantUncheckedUpdateWithoutExperiencesInput>
  }

  export type ApplicantUpdateWithoutExperiencesInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutExperiencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantCreateWithoutLanguagesInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutLanguagesInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutLanguagesInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutLanguagesInput, ApplicantUncheckedCreateWithoutLanguagesInput>
  }

  export type ApplicantUpsertWithoutLanguagesInput = {
    update: XOR<ApplicantUpdateWithoutLanguagesInput, ApplicantUncheckedUpdateWithoutLanguagesInput>
    create: XOR<ApplicantCreateWithoutLanguagesInput, ApplicantUncheckedCreateWithoutLanguagesInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutLanguagesInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutLanguagesInput, ApplicantUncheckedUpdateWithoutLanguagesInput>
  }

  export type ApplicantUpdateWithoutLanguagesInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutLanguagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantCreateWithoutComputerSkillsInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutComputerSkillsInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutComputerSkillsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutComputerSkillsInput, ApplicantUncheckedCreateWithoutComputerSkillsInput>
  }

  export type ApplicantUpsertWithoutComputerSkillsInput = {
    update: XOR<ApplicantUpdateWithoutComputerSkillsInput, ApplicantUncheckedUpdateWithoutComputerSkillsInput>
    create: XOR<ApplicantCreateWithoutComputerSkillsInput, ApplicantUncheckedCreateWithoutComputerSkillsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutComputerSkillsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutComputerSkillsInput, ApplicantUncheckedUpdateWithoutComputerSkillsInput>
  }

  export type ApplicantUpdateWithoutComputerSkillsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutComputerSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantCreateWithoutGeneralSkillsInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantUncheckedCreateWithoutGeneralSkillsInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
    notificationSettings?: NotificationSettingsUncheckedCreateNestedOneWithoutApplicantInput
  }

  export type ApplicantCreateOrConnectWithoutGeneralSkillsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutGeneralSkillsInput, ApplicantUncheckedCreateWithoutGeneralSkillsInput>
  }

  export type ApplicantUpsertWithoutGeneralSkillsInput = {
    update: XOR<ApplicantUpdateWithoutGeneralSkillsInput, ApplicantUncheckedUpdateWithoutGeneralSkillsInput>
    create: XOR<ApplicantCreateWithoutGeneralSkillsInput, ApplicantUncheckedCreateWithoutGeneralSkillsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutGeneralSkillsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutGeneralSkillsInput, ApplicantUncheckedUpdateWithoutGeneralSkillsInput>
  }

  export type ApplicantUpdateWithoutGeneralSkillsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutGeneralSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type SkillMasterCreateWithoutSkillDemandsInput = {
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobRequirements?: JobRequirementCreateNestedManyWithoutSkillMasterInput
    applicantSkills?: ApplicantSkillCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterUncheckedCreateWithoutSkillDemandsInput = {
    id?: number
    name: string
    category: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    jobRequirements?: JobRequirementUncheckedCreateNestedManyWithoutSkillMasterInput
    applicantSkills?: ApplicantSkillUncheckedCreateNestedManyWithoutSkillMasterInput
  }

  export type SkillMasterCreateOrConnectWithoutSkillDemandsInput = {
    where: SkillMasterWhereUniqueInput
    create: XOR<SkillMasterCreateWithoutSkillDemandsInput, SkillMasterUncheckedCreateWithoutSkillDemandsInput>
  }

  export type SkillMasterUpsertWithoutSkillDemandsInput = {
    update: XOR<SkillMasterUpdateWithoutSkillDemandsInput, SkillMasterUncheckedUpdateWithoutSkillDemandsInput>
    create: XOR<SkillMasterCreateWithoutSkillDemandsInput, SkillMasterUncheckedCreateWithoutSkillDemandsInput>
    where?: SkillMasterWhereInput
  }

  export type SkillMasterUpdateToOneWithWhereWithoutSkillDemandsInput = {
    where?: SkillMasterWhereInput
    data: XOR<SkillMasterUpdateWithoutSkillDemandsInput, SkillMasterUncheckedUpdateWithoutSkillDemandsInput>
  }

  export type SkillMasterUpdateWithoutSkillDemandsInput = {
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobRequirements?: JobRequirementUpdateManyWithoutSkillMasterNestedInput
    applicantSkills?: ApplicantSkillUpdateManyWithoutSkillMasterNestedInput
  }

  export type SkillMasterUncheckedUpdateWithoutSkillDemandsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobRequirements?: JobRequirementUncheckedUpdateManyWithoutSkillMasterNestedInput
    applicantSkills?: ApplicantSkillUncheckedUpdateManyWithoutSkillMasterNestedInput
  }

  export type UserCreateWithoutChatRoomsInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    employer?: EmployerCreateNestedOneWithoutUserInput
    agentChats?: ChatRoomCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatRoomsInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantUncheckedCreateNestedOneWithoutUserInput
    employer?: EmployerUncheckedCreateNestedOneWithoutUserInput
    agentChats?: ChatRoomUncheckedCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatRoomsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatRoomsInput, UserUncheckedCreateWithoutChatRoomsInput>
  }

  export type UserCreateWithoutAgentChatsInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    employer?: EmployerCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAgentChatsInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantUncheckedCreateNestedOneWithoutUserInput
    employer?: EmployerUncheckedCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutUserInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAgentChatsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAgentChatsInput, UserUncheckedCreateWithoutAgentChatsInput>
  }

  export type ChatMessageCreateWithoutRoomInput = {
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
    sender?: UserCreateNestedOneWithoutChatMessagesInput
  }

  export type ChatMessageUncheckedCreateWithoutRoomInput = {
    id?: number
    senderId?: number | null
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
  }

  export type ChatMessageCreateOrConnectWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput
    create: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput>
  }

  export type ChatMessageCreateManyRoomInputEnvelope = {
    data: ChatMessageCreateManyRoomInput | ChatMessageCreateManyRoomInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutChatRoomsInput = {
    update: XOR<UserUpdateWithoutChatRoomsInput, UserUncheckedUpdateWithoutChatRoomsInput>
    create: XOR<UserCreateWithoutChatRoomsInput, UserUncheckedCreateWithoutChatRoomsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatRoomsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatRoomsInput, UserUncheckedUpdateWithoutChatRoomsInput>
  }

  export type UserUpdateWithoutChatRoomsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    employer?: EmployerUpdateOneWithoutUserNestedInput
    agentChats?: ChatRoomUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatRoomsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUncheckedUpdateOneWithoutUserNestedInput
    employer?: EmployerUncheckedUpdateOneWithoutUserNestedInput
    agentChats?: ChatRoomUncheckedUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutAgentChatsInput = {
    update: XOR<UserUpdateWithoutAgentChatsInput, UserUncheckedUpdateWithoutAgentChatsInput>
    create: XOR<UserCreateWithoutAgentChatsInput, UserUncheckedCreateWithoutAgentChatsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAgentChatsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAgentChatsInput, UserUncheckedUpdateWithoutAgentChatsInput>
  }

  export type UserUpdateWithoutAgentChatsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    employer?: EmployerUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAgentChatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUncheckedUpdateOneWithoutUserNestedInput
    employer?: EmployerUncheckedUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutUserNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChatMessageUpsertWithWhereUniqueWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput
    update: XOR<ChatMessageUpdateWithoutRoomInput, ChatMessageUncheckedUpdateWithoutRoomInput>
    create: XOR<ChatMessageCreateWithoutRoomInput, ChatMessageUncheckedCreateWithoutRoomInput>
  }

  export type ChatMessageUpdateWithWhereUniqueWithoutRoomInput = {
    where: ChatMessageWhereUniqueInput
    data: XOR<ChatMessageUpdateWithoutRoomInput, ChatMessageUncheckedUpdateWithoutRoomInput>
  }

  export type ChatMessageUpdateManyWithWhereWithoutRoomInput = {
    where: ChatMessageScalarWhereInput
    data: XOR<ChatMessageUpdateManyMutationInput, ChatMessageUncheckedUpdateManyWithoutRoomInput>
  }

  export type ChatRoomCreateWithoutMessagesInput = {
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
    user: UserCreateNestedOneWithoutChatRoomsInput
    agent?: UserCreateNestedOneWithoutAgentChatsInput
  }

  export type ChatRoomUncheckedCreateWithoutMessagesInput = {
    id?: number
    userId: number
    agentId?: number | null
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
  }

  export type ChatRoomCreateOrConnectWithoutMessagesInput = {
    where: ChatRoomWhereUniqueInput
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type UserCreateWithoutChatMessagesInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    employer?: EmployerCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomCreateNestedManyWithoutAgentInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutChatMessagesInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantUncheckedCreateNestedOneWithoutUserInput
    employer?: EmployerUncheckedCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomUncheckedCreateNestedManyWithoutAgentInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutChatMessagesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
  }

  export type ChatRoomUpsertWithoutMessagesInput = {
    update: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<ChatRoomCreateWithoutMessagesInput, ChatRoomUncheckedCreateWithoutMessagesInput>
    where?: ChatRoomWhereInput
  }

  export type ChatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ChatRoomWhereInput
    data: XOR<ChatRoomUpdateWithoutMessagesInput, ChatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type ChatRoomUpdateWithoutMessagesInput = {
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChatRoomsNestedInput
    agent?: UserUpdateOneWithoutAgentChatsNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    agentId?: NullableIntFieldUpdateOperationsInput | number | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUpsertWithoutChatMessagesInput = {
    update: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
    create: XOR<UserCreateWithoutChatMessagesInput, UserUncheckedCreateWithoutChatMessagesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutChatMessagesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutChatMessagesInput, UserUncheckedUpdateWithoutChatMessagesInput>
  }

  export type UserUpdateWithoutChatMessagesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    employer?: EmployerUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUpdateManyWithoutAgentNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutChatMessagesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUncheckedUpdateOneWithoutUserNestedInput
    employer?: EmployerUncheckedUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUncheckedUpdateManyWithoutAgentNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicantCreateWithoutNotificationSettingsInput = {
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutApplicantInput
    applications?: ApplicationCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillCreateNestedManyWithoutApplicantInput
    notifications?: NotificationCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryCreateNestedManyWithoutApplicantsInput
  }

  export type ApplicantUncheckedCreateWithoutNotificationSettingsInput = {
    id?: number
    fullName: string
    nida: string
    phone?: string | null
    address?: string | null
    dateOfBirth?: Date | string | null
    gender?: string | null
    userId: number
    profileCompleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutApplicantInput
    qualifications?: AcademicQualificationUncheckedCreateNestedManyWithoutApplicantInput
    experiences?: WorkExperienceUncheckedCreateNestedManyWithoutApplicantInput
    languages?: LanguageProficiencyUncheckedCreateNestedManyWithoutApplicantInput
    computerSkills?: ComputerSkillUncheckedCreateNestedManyWithoutApplicantInput
    skills?: ApplicantSkillUncheckedCreateNestedManyWithoutApplicantInput
    generalSkills?: GeneralSkillUncheckedCreateNestedManyWithoutApplicantInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicantInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutApplicantsInput
  }

  export type ApplicantCreateOrConnectWithoutNotificationSettingsInput = {
    where: ApplicantWhereUniqueInput
    create: XOR<ApplicantCreateWithoutNotificationSettingsInput, ApplicantUncheckedCreateWithoutNotificationSettingsInput>
  }

  export type ApplicantUpsertWithoutNotificationSettingsInput = {
    update: XOR<ApplicantUpdateWithoutNotificationSettingsInput, ApplicantUncheckedUpdateWithoutNotificationSettingsInput>
    create: XOR<ApplicantCreateWithoutNotificationSettingsInput, ApplicantUncheckedCreateWithoutNotificationSettingsInput>
    where?: ApplicantWhereInput
  }

  export type ApplicantUpdateToOneWithWhereWithoutNotificationSettingsInput = {
    where?: ApplicantWhereInput
    data: XOR<ApplicantUpdateWithoutNotificationSettingsInput, ApplicantUncheckedUpdateWithoutNotificationSettingsInput>
  }

  export type ApplicantUpdateWithoutNotificationSettingsInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUpdateManyWithoutApplicantsNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutNotificationSettingsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutApplicantsNestedInput
  }

  export type UserCreateWithoutConsentsInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    employer?: EmployerCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutConsentsInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantUncheckedCreateNestedOneWithoutUserInput
    employer?: EmployerUncheckedCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomUncheckedCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutConsentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
  }

  export type UserUpsertWithoutConsentsInput = {
    update: XOR<UserUpdateWithoutConsentsInput, UserUncheckedUpdateWithoutConsentsInput>
    create: XOR<UserCreateWithoutConsentsInput, UserUncheckedCreateWithoutConsentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutConsentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutConsentsInput, UserUncheckedUpdateWithoutConsentsInput>
  }

  export type UserUpdateWithoutConsentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    employer?: EmployerUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutConsentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUncheckedUpdateOneWithoutUserNestedInput
    employer?: EmployerUncheckedUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUncheckedUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantCreateNestedOneWithoutUserInput
    employer?: EmployerCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageCreateNestedManyWithoutSenderInput
    consents?: UserConsentCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    email: string
    password: string
    role: $Enums.Role
    isActive?: boolean
    lastLogin?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applicant?: ApplicantUncheckedCreateNestedOneWithoutUserInput
    employer?: EmployerUncheckedCreateNestedOneWithoutUserInput
    chatRooms?: ChatRoomUncheckedCreateNestedManyWithoutUserInput
    agentChats?: ChatRoomUncheckedCreateNestedManyWithoutAgentInput
    chatMessages?: ChatMessageUncheckedCreateNestedManyWithoutSenderInput
    consents?: UserConsentUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneWithoutUserNestedInput
    employer?: EmployerUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastLogin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUncheckedUpdateOneWithoutUserNestedInput
    employer?: EmployerUncheckedUpdateOneWithoutUserNestedInput
    chatRooms?: ChatRoomUncheckedUpdateManyWithoutUserNestedInput
    agentChats?: ChatRoomUncheckedUpdateManyWithoutAgentNestedInput
    chatMessages?: ChatMessageUncheckedUpdateManyWithoutSenderNestedInput
    consents?: UserConsentUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ApplicationCreateWithoutInterviewsInput = {
    status?: $Enums.ApplicationStatus
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutApplicationsInput
    applicant: ApplicantCreateNestedOneWithoutApplicationsInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutInterviewsInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    jobId: number
    applicantId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    emailLogs?: EmailLogUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutInterviewsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
  }

  export type JobCreateWithoutInterviewsInput = {
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    employer: EmployerCreateNestedOneWithoutJobsInput
    applications?: ApplicationCreateNestedManyWithoutJobInput
    categories?: JobCategoryCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutInterviewsInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    employerId: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    applications?: ApplicationUncheckedCreateNestedManyWithoutJobInput
    categories?: JobCategoryUncheckedCreateNestedManyWithoutJobsInput
    requirements?: JobRequirementUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutInterviewsInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
  }

  export type ApplicationUpsertWithoutInterviewsInput = {
    update: XOR<ApplicationUpdateWithoutInterviewsInput, ApplicationUncheckedUpdateWithoutInterviewsInput>
    create: XOR<ApplicationCreateWithoutInterviewsInput, ApplicationUncheckedCreateWithoutInterviewsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutInterviewsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutInterviewsInput, ApplicationUncheckedUpdateWithoutInterviewsInput>
  }

  export type ApplicationUpdateWithoutInterviewsInput = {
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    applicant?: ApplicantUpdateOneRequiredWithoutApplicationsNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutInterviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    jobId?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type JobUpsertWithoutInterviewsInput = {
    update: XOR<JobUpdateWithoutInterviewsInput, JobUncheckedUpdateWithoutInterviewsInput>
    create: XOR<JobCreateWithoutInterviewsInput, JobUncheckedCreateWithoutInterviewsInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutInterviewsInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutInterviewsInput, JobUncheckedUpdateWithoutInterviewsInput>
  }

  export type JobUpdateWithoutInterviewsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutInterviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    employerId?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUncheckedUpdateManyWithoutJobNestedInput
  }

  export type ApplicationCreateWithoutEmailLogsInput = {
    status?: $Enums.ApplicationStatus
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    job: JobCreateNestedOneWithoutApplicationsInput
    applicant: ApplicantCreateNestedOneWithoutApplicationsInput
    notifications?: NotificationCreateNestedManyWithoutApplicationInput
    interviews?: InterviewCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationUncheckedCreateWithoutEmailLogsInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    jobId: number
    applicantId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    notifications?: NotificationUncheckedCreateNestedManyWithoutApplicationInput
    interviews?: InterviewUncheckedCreateNestedManyWithoutApplicationInput
  }

  export type ApplicationCreateOrConnectWithoutEmailLogsInput = {
    where: ApplicationWhereUniqueInput
    create: XOR<ApplicationCreateWithoutEmailLogsInput, ApplicationUncheckedCreateWithoutEmailLogsInput>
  }

  export type ApplicationUpsertWithoutEmailLogsInput = {
    update: XOR<ApplicationUpdateWithoutEmailLogsInput, ApplicationUncheckedUpdateWithoutEmailLogsInput>
    create: XOR<ApplicationCreateWithoutEmailLogsInput, ApplicationUncheckedCreateWithoutEmailLogsInput>
    where?: ApplicationWhereInput
  }

  export type ApplicationUpdateToOneWithWhereWithoutEmailLogsInput = {
    where?: ApplicationWhereInput
    data: XOR<ApplicationUpdateWithoutEmailLogsInput, ApplicationUncheckedUpdateWithoutEmailLogsInput>
  }

  export type ApplicationUpdateWithoutEmailLogsInput = {
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    applicant?: ApplicantUpdateOneRequiredWithoutApplicationsNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutEmailLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    jobId?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicantUpdateWithoutCategoriesInput = {
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutApplicantNestedInput
    applications?: ApplicationUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUpdateManyWithoutApplicantNestedInput
    notificationSettings?: NotificationSettingsUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutApplicantNestedInput
    qualifications?: AcademicQualificationUncheckedUpdateManyWithoutApplicantNestedInput
    experiences?: WorkExperienceUncheckedUpdateManyWithoutApplicantNestedInput
    languages?: LanguageProficiencyUncheckedUpdateManyWithoutApplicantNestedInput
    computerSkills?: ComputerSkillUncheckedUpdateManyWithoutApplicantNestedInput
    skills?: ApplicantSkillUncheckedUpdateManyWithoutApplicantNestedInput
    generalSkills?: GeneralSkillUncheckedUpdateManyWithoutApplicantNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutApplicantNestedInput
    notificationSettings?: NotificationSettingsUncheckedUpdateOneWithoutApplicantNestedInput
  }

  export type ApplicantUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullName?: StringFieldUpdateOperationsInput | string
    nida?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: IntFieldUpdateOperationsInput | number
    profileCompleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUpdateWithoutCategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    employer?: EmployerUpdateOneRequiredWithoutJobsNestedInput
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    requirements?: JobRequirementUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    employerId?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    requirements?: JobRequirementUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    employerId?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobRequirementCreateManySkillMasterInput = {
    id?: number
    jobId: number
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicantSkillCreateManySkillMasterInput = {
    id?: number
    applicantId: number
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SkillDemandCreateManySkillMasterInput = {
    id?: number
    demandScore: number
    growth: number
    industry?: string | null
    region?: string | null
    period: Date | string
    source?: string | null
    createdAt?: Date | string
  }

  export type JobRequirementUpdateWithoutSkillMasterInput = {
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutRequirementsNestedInput
  }

  export type JobRequirementUncheckedUpdateWithoutSkillMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobRequirementUncheckedUpdateManyWithoutSkillMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: IntFieldUpdateOperationsInput | number
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantSkillUpdateWithoutSkillMasterInput = {
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutSkillsNestedInput
  }

  export type ApplicantSkillUncheckedUpdateWithoutSkillMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantSkillUncheckedUpdateManyWithoutSkillMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicantId?: IntFieldUpdateOperationsInput | number
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillDemandUpdateWithoutSkillMasterInput = {
    demandScore?: FloatFieldUpdateOperationsInput | number
    growth?: FloatFieldUpdateOperationsInput | number
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillDemandUncheckedUpdateWithoutSkillMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    demandScore?: FloatFieldUpdateOperationsInput | number
    growth?: FloatFieldUpdateOperationsInput | number
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SkillDemandUncheckedUpdateManyWithoutSkillMasterInput = {
    id?: IntFieldUpdateOperationsInput | number
    demandScore?: FloatFieldUpdateOperationsInput | number
    growth?: FloatFieldUpdateOperationsInput | number
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    region?: NullableStringFieldUpdateOperationsInput | string | null
    period?: DateTimeFieldUpdateOperationsInput | Date | string
    source?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicQualificationCreateManyCountryInput = {
    id?: number
    level: string
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    applicantId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicQualificationUpdateWithoutCountryInput = {
    level?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutQualificationsNestedInput
  }

  export type AcademicQualificationUncheckedUpdateWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicQualificationUncheckedUpdateManyWithoutCountryInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    applicantId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatRoomCreateManyUserInput = {
    id?: number
    agentId?: number | null
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
  }

  export type ChatRoomCreateManyAgentInput = {
    id?: number
    userId: number
    topic?: string | null
    status?: string
    createdAt?: Date | string
    endedAt?: Date | string | null
  }

  export type ChatMessageCreateManySenderInput = {
    id?: number
    roomId: number
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
  }

  export type UserConsentCreateManyUserInput = {
    id?: number
    consentType: string
    granted: boolean
    grantedAt?: Date | string | null
    revokedAt?: Date | string | null
    purpose?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: number
    action: string
    details?: string | null
    timestamp?: Date | string
  }

  export type ChatRoomUpdateWithoutUserInput = {
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    agent?: UserUpdateOneWithoutAgentChatsNestedInput
    messages?: ChatMessageUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    agentId?: NullableIntFieldUpdateOperationsInput | number | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    agentId?: NullableIntFieldUpdateOperationsInput | number | null
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChatRoomUpdateWithoutAgentInput = {
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutChatRoomsNestedInput
    messages?: ChatMessageUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    messages?: ChatMessageUncheckedUpdateManyWithoutRoomNestedInput
  }

  export type ChatRoomUncheckedUpdateManyWithoutAgentInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    topic?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    endedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChatMessageUpdateWithoutSenderInput = {
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    room?: ChatRoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutSenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    roomId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentUpdateWithoutUserInput = {
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    grantedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    grantedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserConsentUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    consentType?: StringFieldUpdateOperationsInput | string
    granted?: BoolFieldUpdateOperationsInput | boolean
    grantedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purpose?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicationCreateManyApplicantInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    jobId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AcademicQualificationCreateManyApplicantInput = {
    id?: number
    level: string
    countryId: number
    institution: string
    fieldOfStudy: string
    grade?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCompleted?: boolean
    certificateUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkExperienceCreateManyApplicantInput = {
    id?: number
    companyName: string
    jobTitle: string
    industry?: string | null
    location?: string | null
    employmentType?: string | null
    startDate: Date | string
    endDate?: Date | string | null
    isCurrent?: boolean
    responsibilities?: string | null
    achievements?: string | null
    supervisorName?: string | null
    supervisorContact?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LanguageProficiencyCreateManyApplicantInput = {
    id?: number
    language: string
    speakLevel: string
    readLevel: string
    writeLevel: string
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComputerSkillCreateManyApplicantInput = {
    id?: number
    skill: string
    proficiency: string
    createdAt?: Date | string
  }

  export type ApplicantSkillCreateManyApplicantInput = {
    id?: number
    skillMasterId: number
    proficiency?: $Enums.ProficiencyLevel
    yearsExperience?: number | null
    lastUsed?: Date | string | null
    isCertified?: boolean
    certificationName?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GeneralSkillCreateManyApplicantInput = {
    id?: number
    skill: string
    description?: string | null
    proficiency: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyApplicantInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    employerId?: number | null
    applicationId?: number | null
  }

  export type ApplicationUpdateWithoutApplicantInput = {
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneRequiredWithoutApplicationsNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    jobId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    jobId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicQualificationUpdateWithoutApplicantInput = {
    level?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: CountryUpdateOneRequiredWithoutQualificationsNestedInput
  }

  export type AcademicQualificationUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AcademicQualificationUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: StringFieldUpdateOperationsInput | string
    countryId?: IntFieldUpdateOperationsInput | number
    institution?: StringFieldUpdateOperationsInput | string
    fieldOfStudy?: StringFieldUpdateOperationsInput | string
    grade?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCompleted?: BoolFieldUpdateOperationsInput | boolean
    certificateUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkExperienceUpdateWithoutApplicantInput = {
    companyName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorName?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkExperienceUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorName?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkExperienceUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    companyName?: StringFieldUpdateOperationsInput | string
    jobTitle?: StringFieldUpdateOperationsInput | string
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCurrent?: BoolFieldUpdateOperationsInput | boolean
    responsibilities?: NullableStringFieldUpdateOperationsInput | string | null
    achievements?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorName?: NullableStringFieldUpdateOperationsInput | string | null
    supervisorContact?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageProficiencyUpdateWithoutApplicantInput = {
    language?: StringFieldUpdateOperationsInput | string
    speakLevel?: StringFieldUpdateOperationsInput | string
    readLevel?: StringFieldUpdateOperationsInput | string
    writeLevel?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageProficiencyUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    speakLevel?: StringFieldUpdateOperationsInput | string
    readLevel?: StringFieldUpdateOperationsInput | string
    writeLevel?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LanguageProficiencyUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    language?: StringFieldUpdateOperationsInput | string
    speakLevel?: StringFieldUpdateOperationsInput | string
    readLevel?: StringFieldUpdateOperationsInput | string
    writeLevel?: StringFieldUpdateOperationsInput | string
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComputerSkillUpdateWithoutApplicantInput = {
    skill?: StringFieldUpdateOperationsInput | string
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComputerSkillUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComputerSkillUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantSkillUpdateWithoutApplicantInput = {
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillMaster?: SkillMasterUpdateOneRequiredWithoutApplicantSkillsNestedInput
  }

  export type ApplicantSkillUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApplicantSkillUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    proficiency?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsExperience?: NullableIntFieldUpdateOperationsInput | number | null
    lastUsed?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isCertified?: BoolFieldUpdateOperationsInput | boolean
    certificationName?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSkillUpdateWithoutApplicantInput = {
    skill?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSkillUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GeneralSkillUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    skill?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proficiency?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutApplicantInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employer?: EmployerUpdateOneWithoutNotificationsNestedInput
    application?: ApplicationUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationUncheckedUpdateManyWithoutApplicantInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type JobCategoryUpdateWithoutApplicantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUpdateManyWithoutCategoriesNestedInput
  }

  export type JobCategoryUncheckedUpdateWithoutApplicantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jobs?: JobUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type JobCategoryUncheckedUpdateManyWithoutApplicantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateManyEmployerInput = {
    id?: number
    title: string
    description: string
    location?: string | null
    salaryMin?: Decimal | DecimalJsLike | number | string | null
    salaryMax?: Decimal | DecimalJsLike | number | string | null
    currency?: string | null
    employmentType?: string | null
    experienceLevel?: string | null
    status?: $Enums.JobStatus
    applicationCount?: number
    viewCount?: number
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyEmployerInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicantId?: number | null
    applicationId?: number | null
  }

  export type JobUpdateWithoutEmployerInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUpdateManyWithoutJobNestedInput
    interviews?: InterviewUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutEmployerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applications?: ApplicationUncheckedUpdateManyWithoutJobNestedInput
    categories?: JobCategoryUncheckedUpdateManyWithoutJobsNestedInput
    requirements?: JobRequirementUncheckedUpdateManyWithoutJobNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutEmployerInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    location?: NullableStringFieldUpdateOperationsInput | string | null
    salaryMin?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    salaryMax?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    currency?: NullableStringFieldUpdateOperationsInput | string | null
    employmentType?: NullableStringFieldUpdateOperationsInput | string | null
    experienceLevel?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    applicationCount?: IntFieldUpdateOperationsInput | number
    viewCount?: IntFieldUpdateOperationsInput | number
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutEmployerInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicant?: ApplicantUpdateOneWithoutNotificationsNestedInput
    application?: ApplicationUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutEmployerInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationUncheckedUpdateManyWithoutEmployerInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    applicationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ApplicationCreateManyJobInput = {
    id?: number
    status?: $Enums.ApplicationStatus
    applicantId: number
    coverLetter?: string | null
    appliedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: number | null
    rejectionReason?: string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JobRequirementCreateManyJobInput = {
    id?: number
    skillMasterId: number
    importance?: $Enums.ImportanceLevel
    proficiencyLevel?: $Enums.ProficiencyLevel
    yearsRequired?: number | null
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InterviewCreateManyJobInput = {
    id?: number
    applicationId: number
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApplicationUpdateWithoutJobInput = {
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicant?: ApplicantUpdateOneRequiredWithoutApplicationsNestedInput
    notifications?: NotificationUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicantId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    notifications?: NotificationUncheckedUpdateManyWithoutApplicationNestedInput
    interviews?: InterviewUncheckedUpdateManyWithoutApplicationNestedInput
    emailLogs?: EmailLogUncheckedUpdateManyWithoutApplicationNestedInput
  }

  export type ApplicationUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    status?: EnumApplicationStatusFieldUpdateOperationsInput | $Enums.ApplicationStatus
    applicantId?: IntFieldUpdateOperationsInput | number
    coverLetter?: NullableStringFieldUpdateOperationsInput | string | null
    appliedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableIntFieldUpdateOperationsInput | number | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCategoryUpdateWithoutJobsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicants?: ApplicantUpdateManyWithoutCategoriesNestedInput
  }

  export type JobCategoryUncheckedUpdateWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    applicants?: ApplicantUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type JobCategoryUncheckedUpdateManyWithoutJobsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobRequirementUpdateWithoutJobInput = {
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    skillMaster?: SkillMasterUpdateOneRequiredWithoutJobRequirementsNestedInput
  }

  export type JobRequirementUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobRequirementUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    skillMasterId?: IntFieldUpdateOperationsInput | number
    importance?: EnumImportanceLevelFieldUpdateOperationsInput | $Enums.ImportanceLevel
    proficiencyLevel?: EnumProficiencyLevelFieldUpdateOperationsInput | $Enums.ProficiencyLevel
    yearsRequired?: NullableIntFieldUpdateOperationsInput | number | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUpdateWithoutJobInput = {
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    application?: ApplicationUpdateOneRequiredWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyWithoutJobInput = {
    id?: IntFieldUpdateOperationsInput | number
    applicationId?: IntFieldUpdateOperationsInput | number
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyApplicationInput = {
    id?: number
    type: $Enums.NotificationType
    title: string
    message: string
    isRead?: boolean
    createdAt?: Date | string
    readAt?: Date | string | null
    expiresAt?: Date | string | null
    applicantId?: number | null
    employerId?: number | null
  }

  export type InterviewCreateManyApplicationInput = {
    id?: number
    jobId?: number | null
    scheduledAt: Date | string
    duration?: number
    location?: string | null
    type?: string
    notes?: string | null
    interviewers?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailLogCreateManyApplicationInput = {
    id?: number
    to: string
    subject: string
    message: string
    employerId?: number | null
    applicantId?: number | null
    status?: string
    sentAt?: Date | string | null
    error?: string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateWithoutApplicationInput = {
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicant?: ApplicantUpdateOneWithoutNotificationsNestedInput
    employer?: EmployerUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationUncheckedUpdateManyWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type InterviewUpdateWithoutApplicationInput = {
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    job?: JobUpdateOneWithoutInterviewsNestedInput
  }

  export type InterviewUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InterviewUncheckedUpdateManyWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    jobId?: NullableIntFieldUpdateOperationsInput | number | null
    scheduledAt?: DateTimeFieldUpdateOperationsInput | Date | string
    duration?: IntFieldUpdateOperationsInput | number
    location?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    interviewers?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUpdateWithoutApplicationInput = {
    to?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    to?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailLogUncheckedUpdateManyWithoutApplicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    to?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    employerId?: NullableIntFieldUpdateOperationsInput | number | null
    applicantId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    error?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageCreateManyRoomInput = {
    id?: number
    senderId?: number | null
    message: string
    type?: string
    isRead?: boolean
    readAt?: Date | string | null
    timestamp?: Date | string
  }

  export type ChatMessageUpdateWithoutRoomInput = {
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: UserUpdateOneWithoutChatMessagesNestedInput
  }

  export type ChatMessageUncheckedUpdateWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: NullableIntFieldUpdateOperationsInput | number | null
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ChatMessageUncheckedUpdateManyWithoutRoomInput = {
    id?: IntFieldUpdateOperationsInput | number
    senderId?: NullableIntFieldUpdateOperationsInput | number | null
    message?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    readAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}