generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  APPLICANT
  EMPLOYER
  ADMIN
}

enum NotificationType {
  STATUS_CHANGE
  NEW_APPLICATION
  INTERVIEW_SCHEDULED
  MESSAGE
  GENERAL
}

enum ApplicationStatus {
  APPLIED
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  INTERVIEWED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum JobStatus {
  DRAFT
  ACTIVE
  PAUSED
  CLOSED
  EXPIRED
}

enum ImportanceLevel {
  REQUIRED
  PREFERRED
  NICE_TO_HAVE
}

enum ProficiencyLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

// =============================================================================
// MASTER DATA TABLES (3NF Normalized)
// =============================================================================

// Job Categories Master Table
model JobCategory {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applicants Applicant[] @relation("ApplicantCategories")
  jobs       Job[]       @relation("JobCategories")

  @@index([name])
  @@index([isActive])
}

// Skills Master Table (3NF - eliminates skill name duplication)
model SkillMaster {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  category    String // Technical, Soft, Language, Industry-Specific
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  jobRequirements JobRequirement[]
  applicantSkills ApplicantSkill[]
  skillDemands    SkillDemand[]

  @@index([category])
  @@index([name])
  @@index([isActive])
}

// Countries Master Table (3NF - eliminates country duplication)
model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  code      String   @unique // ISO country code
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  qualifications AcademicQualification[]

  @@index([code])
  @@index([name])
}

// =============================================================================
// CORE ENTITY TABLES (3NF Normalized)
// =============================================================================

// Enhanced User Model
model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      Role
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  applicant    Applicant?
  employer     Employer?
  chatRooms    ChatRoom[]
  agentChats   ChatRoom[]    @relation("ChatAgent")
  chatMessages ChatMessage[]
  consents     UserConsent[]
  auditLogs    AuditLog[]

  @@index([email])
  @@index([role])
  @@index([isActive])
}

// Normalized Applicant Table
model Applicant {
  id               Int       @id @default(autoincrement())
  fullName         String
  nida             String    @unique
  phone            String?
  address          String?
  dateOfBirth      DateTime?
  gender           String?
  userId           Int       @unique
  profileCompleted Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  user                 User                    @relation(fields: [userId], references: [id])
  applications         Application[]
  qualifications       AcademicQualification[]
  experiences          WorkExperience[]
  languages            LanguageProficiency[]
  computerSkills       ComputerSkill[] // Legacy - to be migrated to ApplicantSkill
  skills               ApplicantSkill[]
  generalSkills        GeneralSkill[]
  notifications        Notification[]
  categories           JobCategory[]           @relation("ApplicantCategories")
  notificationSettings NotificationSettings?

  @@index([nida])
  @@index([userId])
  @@index([profileCompleted])
}

// Normalized Employer Table
model Employer {
  id          Int      @id @default(autoincrement())
  companyName String
  industry    String?
  companySize String? // Small, Medium, Large, Enterprise
  website     String?
  address     String
  phone       String?
  description String?
  userId      Int      @unique
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id])
  jobs          Job[]
  notifications Notification[]

  @@index([userId])
  @@index([industry])
  @@index([isVerified])
}

// Normalized Job Table
model Job {
  id               Int       @id @default(autoincrement())
  title            String
  description      String    @db.Text
  location         String?
  salaryMin        Decimal?  @db.Decimal(10, 2)
  salaryMax        Decimal?  @db.Decimal(10, 2)
  currency         String?   @default("USD")
  employmentType   String? // Full-time, Part-time, Contract, Internship
  experienceLevel  String? // Entry, Mid, Senior, Executive
  status           JobStatus @default(DRAFT)
  applicationCount Int       @default(0)
  viewCount        Int       @default(0)
  employerId       Int
  expiresAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  employer     Employer         @relation(fields: [employerId], references: [id])
  applications Application[]
  categories   JobCategory[]    @relation("JobCategories")
  requirements JobRequirement[]
  interviews   Interview[]

  @@index([status])
  @@index([employerId])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([experienceLevel])
  @@index([employmentType])
}

// =============================================================================
// RELATIONSHIP TABLES (3NF Normalized)
// =============================================================================

// Job Requirements (3NF compliant - references SkillMaster)
model JobRequirement {
  id               Int              @id @default(autoincrement())
  jobId            Int
  skillMasterId    Int
  importance       ImportanceLevel  @default(PREFERRED)
  proficiencyLevel ProficiencyLevel @default(INTERMEDIATE)
  yearsRequired    Int? // Years of experience required
  description      String? // Specific context for this job
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  job         Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skillMaster SkillMaster @relation(fields: [skillMasterId], references: [id])

  @@unique([jobId, skillMasterId]) // Prevent duplicate skills per job
  @@index([jobId])
  @@index([skillMasterId])
  @@index([importance])
  @@index([proficiencyLevel])
}

// Applicant Skills (3NF compliant - references SkillMaster)
model ApplicantSkill {
  id                Int              @id @default(autoincrement())
  applicantId       Int
  skillMasterId     Int
  proficiency       ProficiencyLevel @default(INTERMEDIATE)
  yearsExperience   Int? // Years of experience with this skill
  lastUsed          DateTime? // When this skill was last used
  isCertified       Boolean          @default(false)
  certificationName String? // Name of certification if any
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Relations
  applicant   Applicant   @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  skillMaster SkillMaster @relation(fields: [skillMasterId], references: [id])

  @@unique([applicantId, skillMasterId]) // Prevent duplicate skills per applicant
  @@index([applicantId])
  @@index([skillMasterId])
  @@index([proficiency])
}

// Normalized Application Table
model Application {
  id              Int               @id @default(autoincrement())
  status          ApplicationStatus @default(APPLIED)
  jobId           Int
  applicantId     Int
  coverLetter     String?           @db.Text
  appliedAt       DateTime          @default(now())
  reviewedAt      DateTime?
  reviewedBy      Int? // Employer user ID who reviewed
  rejectionReason String?
  notes           String?           @db.Text
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  job           Job            @relation(fields: [jobId], references: [id])
  applicant     Applicant      @relation(fields: [applicantId], references: [id])
  notifications Notification[]
  interviews    Interview[]
  emailLogs     EmailLog[]

  @@unique([applicantId, jobId])
  @@index([applicantId])
  @@index([jobId])
  @@index([status])
  @@index([createdAt])
  @@index([appliedAt])
}

model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  readAt    DateTime?
  expiresAt DateTime?

  // Relations
  applicantId   Int?
  applicant     Applicant?   @relation(fields: [applicantId], references: [id])
  employerId    Int?
  employer      Employer?    @relation(fields: [employerId], references: [id])
  applicationId Int?
  application   Application? @relation(fields: [applicationId], references: [id])
}

// =============================================================================
// PROFILE DATA TABLES (3NF Normalized)
// =============================================================================

// Normalized Academic Qualification Table
model AcademicQualification {
  id             Int       @id @default(autoincrement())
  level          String // Bachelor, Master, PhD, Diploma, Certificate
  countryId      Int
  institution    String
  fieldOfStudy   String
  grade          String? // GPA, Class, Percentage
  startDate      DateTime
  endDate        DateTime?
  isCompleted    Boolean   @default(true)
  certificateUrl String?
  applicantId    Int
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  applicant Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  country   Country   @relation(fields: [countryId], references: [id])

  @@index([applicantId])
  @@index([countryId])
  @@index([level])
  @@index([fieldOfStudy])
}

// Normalized Work Experience Table
model WorkExperience {
  id                Int       @id @default(autoincrement())
  companyName       String
  jobTitle          String
  industry          String?
  location          String?
  employmentType    String? // Full-time, Part-time, Contract, Internship
  startDate         DateTime
  endDate           DateTime?
  isCurrent         Boolean   @default(false)
  responsibilities  String?   @db.Text
  achievements      String?   @db.Text
  supervisorName    String?
  supervisorContact String?
  applicantId       Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  applicant Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@index([industry])
  @@index([isCurrent])
}

// Normalized Language Proficiency Table
model LanguageProficiency {
  id                Int      @id @default(autoincrement())
  language          String
  speakLevel        String // Native, Fluent, Conversational, Basic
  readLevel         String // Native, Fluent, Conversational, Basic
  writeLevel        String // Native, Fluent, Conversational, Basic
  isCertified       Boolean  @default(false)
  certificationName String?
  applicantId       Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  applicant Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@index([language])
}

// Legacy Computer Skills Table (to be migrated to ApplicantSkill)
model ComputerSkill {
  id          Int      @id @default(autoincrement())
  skill       String
  proficiency String
  applicantId Int
  createdAt   DateTime @default(now())

  // Relations
  applicant Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@index([skill])
}

// General Skills Table (for soft skills, personal attributes, etc.)
model GeneralSkill {
  id          Int      @id @default(autoincrement())
  skill       String
  description String?
  proficiency String // Basic, Intermediate, Advanced, Expert
  applicantId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  applicant Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)

  @@index([applicantId])
  @@index([skill])
}

// =============================================================================
// ANALYTICS AND MARKET DATA TABLES (3NF Normalized)
// =============================================================================

// Normalized Skill Demand Table
model SkillDemand {
  id            Int      @id @default(autoincrement())
  skillMasterId Int
  demandScore   Float // 0-100 scale
  growth        Float // percentage growth
  industry      String?
  region        String? // Geographic region
  period        DateTime // Time period for this data
  source        String? // Data source
  createdAt     DateTime @default(now())

  // Relations
  skillMaster SkillMaster @relation(fields: [skillMasterId], references: [id])

  @@index([skillMasterId])
  @@index([industry])
  @@index([region])
  @@index([period])
}

// Chat Support System Models
model ChatRoom {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  agentId   Int?
  agent     User?     @relation("ChatAgent", fields: [agentId], references: [id])
  topic     String?
  status    String    @default("WAITING") // WAITING, ACTIVE, CLOSED
  createdAt DateTime  @default(now())
  endedAt   DateTime?

  messages ChatMessage[]
}

model ChatMessage {
  id        Int       @id @default(autoincrement())
  roomId    Int
  room      ChatRoom  @relation(fields: [roomId], references: [id])
  senderId  Int? // null for bot messages
  sender    User?     @relation(fields: [senderId], references: [id])
  message   String    @db.Text // Changed to TEXT to allow longer messages
  type      String    @default("text") // text, image, file, bot
  isRead    Boolean   @default(false)
  readAt    DateTime?
  timestamp DateTime  @default(now())
}

// Notification Settings for Applicants
model NotificationSettings {
  id          Int       @id @default(autoincrement())
  applicantId Int       @unique
  applicant   Applicant @relation(fields: [applicantId], references: [id])

  // Email notifications
  emailEnabled           Boolean @default(true)
  emailJobMatches        Boolean @default(true)
  emailApplicationStatus Boolean @default(true)
  emailInterviews        Boolean @default(true)
  emailMarketing         Boolean @default(false)

  // SMS notifications
  smsEnabled           Boolean @default(false)
  smsApplicationStatus Boolean @default(false)
  smsInterviews        Boolean @default(false)
  smsUrgent            Boolean @default(false)

  // Push notifications (for future mobile app)
  pushEnabled           Boolean @default(true)
  pushJobMatches        Boolean @default(true)
  pushApplicationStatus Boolean @default(true)
  pushInterviews        Boolean @default(true)

  // General preferences
  profileVisible Boolean @default(true)
  autoApply      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([applicantId])
}

// Market Analytics Models
model MarketTrend {
  id        Int      @id @default(autoincrement())
  industry  String
  metric    String // employment_rate, job_postings, salary_avg
  value     Float
  period    String // monthly, quarterly, yearly
  date      DateTime
  source    String?
  createdAt DateTime @default(now())

  @@index([industry])
  @@index([metric])
  @@index([date])
}

// =============================================================================
// COMMUNICATION AND SYSTEM TABLES
// =============================================================================

// Privacy and Ethics Models
model UserConsent {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  consentType String // 'profile_data', 'job_matching', 'analytics', etc.
  granted     Boolean
  grantedAt   DateTime?
  revokedAt   DateTime?
  purpose     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, consentType], name: "userId_consentType")
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  action    String // 'CONSENT_CHANGE', 'DATA_DELETION', 'DATA_EXPORT', etc.
  details   String? // JSON string with additional details
  timestamp DateTime @default(now())
}

model AnonymizedData {
  id             Int      @id @default(autoincrement())
  anonymousId    String   @unique
  originalUserId Int?
  anonymizedData String // JSON string with anonymized user data
  createdAt      DateTime @default(now())
}

// Interview Management Models
model Interview {
  id            Int      @id @default(autoincrement())
  applicationId Int
  jobId         Int? // Optional direct reference to job
  scheduledAt   DateTime
  duration      Int      @default(60) // minutes
  location      String?
  type          String   @default("in-person") // in-person, video-call, phone, online
  notes         String?  @db.Text
  interviewers  String?
  status        String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED, RESCHEDULED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  application Application @relation(fields: [applicationId], references: [id])
  job         Job?        @relation(fields: [jobId], references: [id])

  @@index([applicationId])
  @@index([jobId])
  @@index([status])
  @@index([scheduledAt])
}

// Email Communication Models
model EmailLog {
  id            Int          @id @default(autoincrement())
  to            String
  subject       String
  message       String
  applicationId Int?
  application   Application? @relation(fields: [applicationId], references: [id])
  employerId    Int?
  applicantId   Int?
  status        String       @default("PENDING") // PENDING, SENT, FAILED
  sentAt        DateTime?
  error         String?
  createdAt     DateTime     @default(now())
}
