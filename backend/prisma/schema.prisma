generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  APPLICANT
  EMPLOYER
}

enum NotificationType {
  STATUS_CHANGE
  NEW_APPLICATION
  GENERAL
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  applicant Applicant?
  employer  Employer?
}

model JobCategory {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  applicants  Applicant[]  @relation("ApplicantCategories")
  jobs        Job[]        @relation("JobCategories")
}

model Applicant {
  id          Int      @id @default(autoincrement())
  fullName    String
  nida        String   @unique
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  
  applications    Application[]
  qualifications  AcademicQualification[]
  experiences     WorkExperience[]
  languages       LanguageProficiency[]
  skills          ComputerSkill[]
  notifications   Notification[]
  
  categories     JobCategory[] @relation("ApplicantCategories")
}

model Employer {
  id         Int      @id @default(autoincrement())
  companyName String
  address    String
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  
  jobs Job[]
  notifications Notification[]
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  location    String?
  status      String   @default("DRAFT")
  applicants  Int      @default(0)
  employerId  Int
  employer    Employer @relation(fields: [employerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  applications Application[]
  categories   JobCategory[] @relation("JobCategories")
}

model Application {
  id          Int      @id @default(autoincrement())
  status      String   @default("APPLIED")
  jobId       Int
  job         Job      @relation(fields: [jobId], references: [id])
  applicantId Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  createdAt   DateTime @default(now())
  
  notifications Notification[]
}

model Notification {
  id            Int              @id @default(autoincrement())
  type          NotificationType
  title         String
  message       String
  isRead        Boolean          @default(false)
  createdAt     DateTime         @default(now())
  readAt        DateTime?
  expiresAt     DateTime?
  
  // Relations
  applicantId   Int?
  applicant     Applicant?       @relation(fields: [applicantId], references: [id])
  employerId    Int?
  employer      Employer?        @relation(fields: [employerId], references: [id])
  applicationId Int?
  application   Application?     @relation(fields: [applicationId], references: [id])
}

model AcademicQualification {
  id             Int      @id @default(autoincrement())
  level          String   // already stores 'Bachelor', 'Master', etc.
  country        String
  institution    String
  fieldOfStudy   String
  startDate      DateTime
  endDate        DateTime?
  certificateUrl String?
  applicantId    Int
  applicant      Applicant @relation(fields: [applicantId], references: [id])
}

model WorkExperience {
  id                 Int      @id @default(autoincrement())
  institution        String
  institutionAddress String?
  jobTitle           String
  startDate          DateTime
  endDate            DateTime?
  duties             String?
  supervisorName     String?
  supervisorTel      String?
  supervisorAddress  String?
  applicantId        Int
  applicant          Applicant @relation(fields: [applicantId], references: [id])
}

model LanguageProficiency {
  id          Int        @id @default(autoincrement())
  language    String
  speak       String
  read        String
  write       String
  applicantId Int
  applicant   Applicant  @relation(fields: [applicantId], references: [id])
}

model ComputerSkill {
  id             Int      @id @default(autoincrement())
  skill          String
  proficiency    String
  applicantId    Int
  applicant      Applicant @relation(fields: [applicantId], references: [id])
}